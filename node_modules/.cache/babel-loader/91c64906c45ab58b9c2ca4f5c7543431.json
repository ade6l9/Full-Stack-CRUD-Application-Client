{"ast":null,"code":"/*==================================================\nStudentView.js\n\nThe Views component is responsible for rendering web page with data provided by the corresponding Container component.\nIt constructs a React component to display the single student view page.\n================================================== */\n// StudentView.js\n\n/*==================================================\nStudentView.js\n\nThe Views component is responsible for rendering a web page with data provided by the corresponding Container component.\nIt constructs a React component to display a single student and their enrolled campus (if any).\n================================================== */\n// import { Link } from \"react-router-dom\";\n\n// // Take in props data to construct the component\n// const StudentView = (props) => {\n//   const { student, addCampus } = props;\n\n//   // Render a single Student view with their campus\n//   return (\n//     <div>\n//       <h1>{`${student.firstname} ${student.lastname}`}</h1>\n//       <p>Email: {student.email}</p>\n//       <p>GPA: {student.gpa || \"N/A\"}</p>\n//       <img\n//         src={student.imageurl || \"https://via.placeholder.com/150\"}\n//         alt={`${student.firstname} ${student.lastname}`}\n//         style={{ width: \"300px\", height: \"auto\" }}\n//       />\n//       <br></br>\n\n//       <h2>Enrolled Campus:</h2>\n//       {student.campus ? (\n//         <div>\n//           <Link to={`/campus/${student.campus.id}`}>\n//             <h3>{student.campus.name}</h3>\n//           </Link>\n//           <p>{student.campus.address}</p>\n//           <button onClick={() => addCampus(student.id, null)}>\n//             Remove from Campus\n//           </button>\n//         </div>\n//       ) : (\n//         <p>Student not enrolled in any campus.</p>\n//       )}\n\n//       <br></br>\n//       <Link to={`/add-campus?studentId=${student.id}`}>\n//         <button>Add Campus</button>\n//       </Link>\n//       <br></br>\n//       <Link to={`/editstudent/${student.id}`}>\n//         <button>Edit Student</button>\n//       </Link>\n//     </div>\n//   );\n// };\n\n// // export default StudentView;\n// import React, { useState } from \"react\";\n// import { Link } from \"react-router-dom\";\n// import axios from \"axios\";\n\n// const StudentView = (props) => {\n//   const { student } = props;\n//   const [error, setError] = useState(\"\");\n//   const [success, setSuccess] = useState(\"\");\n\n//   // Handle removing student from campus and refreshing the page\n//   const handleRemoveFromCampus = async () => {\n//     const confirmation = window.confirm(\n//       \"Are you sure you want to remove this student from this campus?\"\n//     );\n//     if (confirmation) {\n//       try {\n//         // Send the request to remove the student from campus\n//         await axios.put(`/api/students/${student.id}/`, {\n//           campusId: null, // Set campusId to null to remove the student from the campus\n//         });\n\n//         setSuccess(\"Student removed from campus successfully!\");\n\n//         // Reload the page to show updated data\n//         window.location.reload();\n//       } catch (error) {\n//         console.error(\"Error removing student from campus:\", error);\n//         setError(\"An error occurred while removing the student from campus.\");\n//       }\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h1>{`${student.firstname} ${student.lastname}`}</h1>\n//       <p>Email: {student.email}</p>\n//       <p>GPA: {student.gpa || \"N/A\"}</p>\n//       <img\n//         src={student.imageurl || \"https://via.placeholder.com/150\"}\n//         alt={`${student.firstname} ${student.lastname}`}\n//         style={{ width: \"300px\", height: \"auto\" }}\n//       />\n//       <br />\n\n//       <h2>Enrolled Campus:</h2>\n//       {student.campus ? (\n//         <div>\n//           <Link to={`/campus/${student.campus.id}`}>\n//             <h3>{student.campus.name}</h3>\n//           </Link>\n//           <p>{student.campus.address}</p>\n//           <button onClick={handleRemoveFromCampus}>\n//             Remove from Campus\n//           </button>\n//         </div>\n//       ) : (\n//         <p>Student not enrolled in any campus.</p>\n//       )}\n\n//       <br />\n//       {error && <p style={{ color: \"red\" }}>{error}</p>}\n//       {success && <p style={{ color: \"green\" }}>{success}</p>}\n//       <br />\n//       <Link to={`/add-campus?studentId=${student.id}`}>\n//         <button>Add Campus</button>\n//       </Link>\n//       <br />\n//       <Link to={`/editstudent/${student.id}`}>\n//         <button>Edit Student</button>\n//       </Link>\n//     </div>\n//   );\n// };\n\n// export default StudentView;\n\n// import React, { useState, useEffect } from \"react\";\n// import { Link } from \"react-router-dom\";\n// import axios from \"axios\";\n\n// const StudentView = (props) => {\n//   const { student } = props;\n//   const [campuses, setCampuses] = useState([]); // List of all campuses\n//   const [selectedCampusId, setSelectedCampusId] = useState(\"\"); // Store selected campus ID (initialized as empty string)\n//   const [isCampusDropdownVisible, setIsCampusDropdownVisible] = useState(false); // Track if the dropdown is visible\n\n//   // Fetch all campuses when the component is mounted\n//   useEffect(() => {\n//     const fetchCampuses = async () => {\n//       try {\n//         const response = await axios.get(\"/api/campuses\");\n//         setCampuses(response.data);\n//       } catch (error) {\n//         console.error(\"Error fetching campuses:\", error);\n//       }\n//     };\n//     fetchCampuses();\n//   }, []);\n\n//   // Handle removing student from campus and refreshing the page\n//   const handleRemoveFromCampus = async () => {\n//     const confirmation = window.confirm(\n//       \"Are you sure you want to remove this student from this campus?\"\n//     );\n//     if (confirmation) {\n//       try {\n//         // Send the request to remove the student from campus\n//         await axios.put(`/api/students/${student.id}/`, {\n//           campusId: null, // Set campusId to null to remove the student from the campus\n//         });\n\n//         //alert(\"Student removed from campus successfully!\");\n//         // Reload the page to show updated data\n//         window.location.reload();\n//       } catch (error) {\n//         console.error(\"Error removing student from campus:\", error);\n//         alert(\"An error occurred while removing the student from campus.\");\n//       }\n//     }\n//   };\n\n//   // Handle adding a student to a campus\n//   const handleAddCampus = () => {\n//     if (student.campusId) {\n//       // Show an alert if the student already has a campusId\n//       alert(\"Campus can't be added, student is already enrolled.\");\n//     } else {\n//       setIsCampusDropdownVisible(true); // Show the dropdown if the student doesn't have a campus\n//     }\n//   };\n\n//   // Handle selecting a campus from the dropdown\n//   const handleCampusSelect = (event) => {\n//     setSelectedCampusId(event.target.value);\n//   };\n\n//   // Handle adding the student to the selected campus\n//   const handleAddCampusToStudent = async () => {\n//     if (!selectedCampusId) {\n//       alert(\"Please select a campus.\");\n//       return;\n//     }\n\n//     try {\n//       // Send a request to update the student's campusId\n//       await axios.put(`/api/students/${student.id}/`, {\n//         campusId: selectedCampusId,\n//       });\n\n//       //alert(\"Student successfully added to the campus!\");\n\n//       // Reload the page to show updated data with the new campus\n//       window.location.reload(); // Refresh the page after adding the campus\n//     } catch (error) {\n//       console.error(\"Error adding student to campus:\", error);\n//       alert(\"An error occurred while adding the student to campus.\");\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h1>{`${student.firstname} ${student.lastname}`}</h1>\n//       <p>Email: {student.email}</p>\n//       <p>GPA: {student.gpa || \"N/A\"}</p>\n//       <img\n//         src={student.imageurl || \"https://via.placeholder.com/150\"}\n//         alt={`${student.firstname} ${student.lastname}`}\n//         style={{ width: \"300px\", height: \"auto\" }}\n//       />\n//       <br />\n\n//       <h2>Enrolled Campus:</h2>\n//       {student.campus ? (\n//         <div>\n//           <Link to={`/campus/${student.campus.id}`}>\n//             <h3>{student.campus.name}</h3>\n//           </Link>\n//           <p>{student.campus.address}</p>\n//           <button onClick={handleRemoveFromCampus}>Remove from Campus</button>\n//         </div>\n//       ) : (\n//         <p>Student not enrolled in any campus.</p>\n//       )}\n\n//       <br />\n//       {/* \"Add Campus\" Button */}\n//       <button onClick={handleAddCampus}>\n//         Add Campus\n//       </button>\n\n//       {/* Dropdown for selecting a campus */}\n//       {isCampusDropdownVisible && (\n//         <div>\n//           <h3>Select a Campus</h3>\n//           <select onChange={handleCampusSelect} value={selectedCampusId}>\n//             <option value=\"\">Select a campus</option>\n//             {campuses.map((campus) => (\n//               <option key={campus.id} value={campus.id}>\n//                 {campus.name}\n//               </option>\n//             ))}\n//           </select>\n//           <button onClick={handleAddCampusToStudent}>Add to Campus</button>\n//         </div>\n//       )}\n\n//       <br />\n//       <Link to={`/editstudent/${student.id}`}>\n//         <button>Edit Student</button>\n//       </Link>\n//     </div>\n//   );\n// };\n\n// export default StudentView;\n\n// import React, { useState, useEffect } from \"react\";\n// import { Link } from \"react-router-dom\";\n// import axios from \"axios\";\n\n// const StudentView = (props) => {\n//   const { student } = props;\n//   const [campuses, setCampuses] = useState([]); // List of all campuses\n//   const [selectedCampusId, setSelectedCampusId] = useState(\"\"); // Store selected campus ID (initialized as empty string)\n//   const [isCampusDropdownVisible, setIsCampusDropdownVisible] = useState(false); // Track if the dropdown is visible\n//   const [success, setSuccess] = useState(\"\"); // Track success messages\n//   const [error, setError] = useState(\"\"); // Track error messages\n\n//   // Fetch all campuses when the component is mounted\n//   useEffect(() => {\n//     const fetchCampuses = async () => {\n//       try {\n//         const response = await axios.get(\"/api/campuses\");\n//         setCampuses(response.data);\n//       } catch (error) {\n//         console.error(\"Error fetching campuses:\", error);\n//         setError(\"Failed to fetch campuses.\");\n//       }\n//     };\n//     fetchCampuses();\n//   }, []);\n\n//   // Handle removing student from campus and refreshing the page\n//   const handleRemoveFromCampus = async () => {\n//     const confirmation = window.confirm(\n//       \"Are you sure you want to remove this student from this campus?\"\n//     );\n//     if (confirmation) {\n//       try {\n//         // Send the request to remove the student from campus\n//         await axios.put(`/api/students/${student.id}/`, {\n//           campusId: null, // Set campusId to null to remove the student from the campus\n//         });\n\n//         setSuccess(\"Student removed from campus successfully!\"); // Update success message\n//         window.location.reload(); // Reload to reflect the changes\n//       } catch (error) {\n//         console.error(\"Error removing student from campus:\", error);\n//         setError(\"An error occurred while removing the student from campus.\"); // Update error message\n//       }\n//     }\n//   };\n\n//   // Handle adding a student to a campus\n//   const handleAddCampus = () => {\n//     if (student.campusId) {\n//       setError(\"Campus can't be added, student is already enrolled.\"); // Show error if already enrolled\n//     } else {\n//       setIsCampusDropdownVisible(true); // Show the dropdown if the student doesn't have a campus\n//     }\n//   };\n\n//   // Handle selecting a campus from the dropdown\n//   const handleCampusSelect = (event) => {\n//     setSelectedCampusId(event.target.value);\n//   };\n\n//   // Handle adding the student to the selected campus\n//   const handleAddCampusToStudent = async () => {\n//     if (!selectedCampusId) {\n//       setError(\"Please select a campus.\"); // Show error if no campus selected\n//       return;\n//     }\n\n//     try {\n//       // Send a request to update the student's campusId\n//       await axios.put(`/api/students/${student.id}/`, {\n//         campusId: selectedCampusId,\n//       });\n\n//       setSuccess(\"Student successfully added to the campus!\"); // Show success message\n//       window.location.reload(); // Refresh the page after adding the campus\n//     } catch (error) {\n//       console.error(\"Error adding student to campus:\", error);\n//       setError(\"An error occurred while adding the student to campus.\"); // Show error message\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h1>{`${student.firstname} ${student.lastname}`}</h1>\n//       <p>Email: {student.email}</p>\n//       <p>GPA: {student.gpa || \"N/A\"}</p>\n//       <img\n//         src={student.imageurl || \"https://via.placeholder.com/150\"}\n//         alt={`${student.firstname} ${student.lastname}`}\n//         style={{ width: \"300px\", height: \"auto\" }}\n//       />\n//       <br />\n\n//       <h2>Enrolled Campus:</h2>\n//       {student.campus ? (\n//         <div>\n//           <Link to={`/campus/${student.campus.id}`}>\n//             <h3>{student.campus.name}</h3>\n//           </Link>\n//           <p>{student.campus.address}</p>\n//           <button onClick={handleRemoveFromCampus}>Remove from Campus</button>\n//         </div>\n//       ) : (\n//         <p>Student not enrolled in any campus.</p>\n//       )}\n\n//       <br />\n//       {/* Display success or error messages dynamically */}\n//       {success && <p style={{ color: \"green\" }}>{success}</p>}\n//       {error && <p style={{ color: \"red\" }}>{error}</p>}\n//       <br />\n\n//       {/* \"Add Campus\" Button */}\n//       <button onClick={handleAddCampus}>\n//         Add Campus\n//       </button>\n\n//       {/* Dropdown for selecting a campus */}\n//       {isCampusDropdownVisible && (\n//         <div>\n//           <h3>Select a Campus</h3>\n//           <select onChange={handleCampusSelect} value={selectedCampusId}>\n//             <option value=\"\">Select a campus</option>\n//             {campuses.map((campus) => (\n//               <option key={campus.id} value={campus.id}>\n//                 {campus.name}\n//               </option>\n//             ))}\n//           </select>\n//           <button onClick={handleAddCampusToStudent}>Add to Campus</button>\n//         </div>\n//       )}\n\n//       <br />\n//       <Link to={`/editstudent/${student.id}`}>\n//   <button>Edit Student</button>\n// </Link>\n\n//     </div>\n//   );\n// };\n\n// export default StudentView;","map":{"version":3,"names":[],"sources":["/Users/adelinadautovic/Full-Stack-CRUD-Application-Client/src/components/views/StudentView.js"],"sourcesContent":["/*==================================================\nStudentView.js\n\nThe Views component is responsible for rendering web page with data provided by the corresponding Container component.\nIt constructs a React component to display the single student view page.\n================================================== */\n// StudentView.js\n\n\n\n/*==================================================\nStudentView.js\n\nThe Views component is responsible for rendering a web page with data provided by the corresponding Container component.\nIt constructs a React component to display a single student and their enrolled campus (if any).\n================================================== */\n// import { Link } from \"react-router-dom\";\n\n// // Take in props data to construct the component\n// const StudentView = (props) => {\n//   const { student, addCampus } = props;\n\n//   // Render a single Student view with their campus\n//   return (\n//     <div>\n//       <h1>{`${student.firstname} ${student.lastname}`}</h1>\n//       <p>Email: {student.email}</p>\n//       <p>GPA: {student.gpa || \"N/A\"}</p>\n//       <img\n//         src={student.imageurl || \"https://via.placeholder.com/150\"}\n//         alt={`${student.firstname} ${student.lastname}`}\n//         style={{ width: \"300px\", height: \"auto\" }}\n//       />\n//       <br></br>\n\n//       <h2>Enrolled Campus:</h2>\n//       {student.campus ? (\n//         <div>\n//           <Link to={`/campus/${student.campus.id}`}>\n//             <h3>{student.campus.name}</h3>\n//           </Link>\n//           <p>{student.campus.address}</p>\n//           <button onClick={() => addCampus(student.id, null)}>\n//             Remove from Campus\n//           </button>\n//         </div>\n//       ) : (\n//         <p>Student not enrolled in any campus.</p>\n//       )}\n\n//       <br></br>\n//       <Link to={`/add-campus?studentId=${student.id}`}>\n//         <button>Add Campus</button>\n//       </Link>\n//       <br></br>\n//       <Link to={`/editstudent/${student.id}`}>\n//         <button>Edit Student</button>\n//       </Link>\n//     </div>\n//   );\n// };\n\n\n\n\n\n\n\n\n\n// // export default StudentView;\n// import React, { useState } from \"react\";\n// import { Link } from \"react-router-dom\";\n// import axios from \"axios\";\n\n// const StudentView = (props) => {\n//   const { student } = props;\n//   const [error, setError] = useState(\"\");\n//   const [success, setSuccess] = useState(\"\");\n\n//   // Handle removing student from campus and refreshing the page\n//   const handleRemoveFromCampus = async () => {\n//     const confirmation = window.confirm(\n//       \"Are you sure you want to remove this student from this campus?\"\n//     );\n//     if (confirmation) {\n//       try {\n//         // Send the request to remove the student from campus\n//         await axios.put(`/api/students/${student.id}/`, {\n//           campusId: null, // Set campusId to null to remove the student from the campus\n//         });\n\n//         setSuccess(\"Student removed from campus successfully!\");\n\n//         // Reload the page to show updated data\n//         window.location.reload();\n//       } catch (error) {\n//         console.error(\"Error removing student from campus:\", error);\n//         setError(\"An error occurred while removing the student from campus.\");\n//       }\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h1>{`${student.firstname} ${student.lastname}`}</h1>\n//       <p>Email: {student.email}</p>\n//       <p>GPA: {student.gpa || \"N/A\"}</p>\n//       <img\n//         src={student.imageurl || \"https://via.placeholder.com/150\"}\n//         alt={`${student.firstname} ${student.lastname}`}\n//         style={{ width: \"300px\", height: \"auto\" }}\n//       />\n//       <br />\n\n//       <h2>Enrolled Campus:</h2>\n//       {student.campus ? (\n//         <div>\n//           <Link to={`/campus/${student.campus.id}`}>\n//             <h3>{student.campus.name}</h3>\n//           </Link>\n//           <p>{student.campus.address}</p>\n//           <button onClick={handleRemoveFromCampus}>\n//             Remove from Campus\n//           </button>\n//         </div>\n//       ) : (\n//         <p>Student not enrolled in any campus.</p>\n//       )}\n\n//       <br />\n//       {error && <p style={{ color: \"red\" }}>{error}</p>}\n//       {success && <p style={{ color: \"green\" }}>{success}</p>}\n//       <br />\n//       <Link to={`/add-campus?studentId=${student.id}`}>\n//         <button>Add Campus</button>\n//       </Link>\n//       <br />\n//       <Link to={`/editstudent/${student.id}`}>\n//         <button>Edit Student</button>\n//       </Link>\n//     </div>\n//   );\n// };\n\n// export default StudentView;\n\n\n\n\n\n// import React, { useState, useEffect } from \"react\";\n// import { Link } from \"react-router-dom\";\n// import axios from \"axios\";\n\n// const StudentView = (props) => {\n//   const { student } = props;\n//   const [campuses, setCampuses] = useState([]); // List of all campuses\n//   const [selectedCampusId, setSelectedCampusId] = useState(\"\"); // Store selected campus ID (initialized as empty string)\n//   const [isCampusDropdownVisible, setIsCampusDropdownVisible] = useState(false); // Track if the dropdown is visible\n\n//   // Fetch all campuses when the component is mounted\n//   useEffect(() => {\n//     const fetchCampuses = async () => {\n//       try {\n//         const response = await axios.get(\"/api/campuses\");\n//         setCampuses(response.data);\n//       } catch (error) {\n//         console.error(\"Error fetching campuses:\", error);\n//       }\n//     };\n//     fetchCampuses();\n//   }, []);\n\n//   // Handle removing student from campus and refreshing the page\n//   const handleRemoveFromCampus = async () => {\n//     const confirmation = window.confirm(\n//       \"Are you sure you want to remove this student from this campus?\"\n//     );\n//     if (confirmation) {\n//       try {\n//         // Send the request to remove the student from campus\n//         await axios.put(`/api/students/${student.id}/`, {\n//           campusId: null, // Set campusId to null to remove the student from the campus\n//         });\n\n//         //alert(\"Student removed from campus successfully!\");\n//         // Reload the page to show updated data\n//         window.location.reload();\n//       } catch (error) {\n//         console.error(\"Error removing student from campus:\", error);\n//         alert(\"An error occurred while removing the student from campus.\");\n//       }\n//     }\n//   };\n\n//   // Handle adding a student to a campus\n//   const handleAddCampus = () => {\n//     if (student.campusId) {\n//       // Show an alert if the student already has a campusId\n//       alert(\"Campus can't be added, student is already enrolled.\");\n//     } else {\n//       setIsCampusDropdownVisible(true); // Show the dropdown if the student doesn't have a campus\n//     }\n//   };\n\n//   // Handle selecting a campus from the dropdown\n//   const handleCampusSelect = (event) => {\n//     setSelectedCampusId(event.target.value);\n//   };\n\n//   // Handle adding the student to the selected campus\n//   const handleAddCampusToStudent = async () => {\n//     if (!selectedCampusId) {\n//       alert(\"Please select a campus.\");\n//       return;\n//     }\n\n//     try {\n//       // Send a request to update the student's campusId\n//       await axios.put(`/api/students/${student.id}/`, {\n//         campusId: selectedCampusId,\n//       });\n\n//       //alert(\"Student successfully added to the campus!\");\n\n//       // Reload the page to show updated data with the new campus\n//       window.location.reload(); // Refresh the page after adding the campus\n//     } catch (error) {\n//       console.error(\"Error adding student to campus:\", error);\n//       alert(\"An error occurred while adding the student to campus.\");\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h1>{`${student.firstname} ${student.lastname}`}</h1>\n//       <p>Email: {student.email}</p>\n//       <p>GPA: {student.gpa || \"N/A\"}</p>\n//       <img\n//         src={student.imageurl || \"https://via.placeholder.com/150\"}\n//         alt={`${student.firstname} ${student.lastname}`}\n//         style={{ width: \"300px\", height: \"auto\" }}\n//       />\n//       <br />\n\n//       <h2>Enrolled Campus:</h2>\n//       {student.campus ? (\n//         <div>\n//           <Link to={`/campus/${student.campus.id}`}>\n//             <h3>{student.campus.name}</h3>\n//           </Link>\n//           <p>{student.campus.address}</p>\n//           <button onClick={handleRemoveFromCampus}>Remove from Campus</button>\n//         </div>\n//       ) : (\n//         <p>Student not enrolled in any campus.</p>\n//       )}\n\n//       <br />\n//       {/* \"Add Campus\" Button */}\n//       <button onClick={handleAddCampus}>\n//         Add Campus\n//       </button>\n\n//       {/* Dropdown for selecting a campus */}\n//       {isCampusDropdownVisible && (\n//         <div>\n//           <h3>Select a Campus</h3>\n//           <select onChange={handleCampusSelect} value={selectedCampusId}>\n//             <option value=\"\">Select a campus</option>\n//             {campuses.map((campus) => (\n//               <option key={campus.id} value={campus.id}>\n//                 {campus.name}\n//               </option>\n//             ))}\n//           </select>\n//           <button onClick={handleAddCampusToStudent}>Add to Campus</button>\n//         </div>\n//       )}\n\n//       <br />\n//       <Link to={`/editstudent/${student.id}`}>\n//         <button>Edit Student</button>\n//       </Link>\n//     </div>\n//   );\n// };\n\n// export default StudentView;\n\n\n// import React, { useState, useEffect } from \"react\";\n// import { Link } from \"react-router-dom\";\n// import axios from \"axios\";\n\n// const StudentView = (props) => {\n//   const { student } = props;\n//   const [campuses, setCampuses] = useState([]); // List of all campuses\n//   const [selectedCampusId, setSelectedCampusId] = useState(\"\"); // Store selected campus ID (initialized as empty string)\n//   const [isCampusDropdownVisible, setIsCampusDropdownVisible] = useState(false); // Track if the dropdown is visible\n//   const [success, setSuccess] = useState(\"\"); // Track success messages\n//   const [error, setError] = useState(\"\"); // Track error messages\n\n//   // Fetch all campuses when the component is mounted\n//   useEffect(() => {\n//     const fetchCampuses = async () => {\n//       try {\n//         const response = await axios.get(\"/api/campuses\");\n//         setCampuses(response.data);\n//       } catch (error) {\n//         console.error(\"Error fetching campuses:\", error);\n//         setError(\"Failed to fetch campuses.\");\n//       }\n//     };\n//     fetchCampuses();\n//   }, []);\n\n//   // Handle removing student from campus and refreshing the page\n//   const handleRemoveFromCampus = async () => {\n//     const confirmation = window.confirm(\n//       \"Are you sure you want to remove this student from this campus?\"\n//     );\n//     if (confirmation) {\n//       try {\n//         // Send the request to remove the student from campus\n//         await axios.put(`/api/students/${student.id}/`, {\n//           campusId: null, // Set campusId to null to remove the student from the campus\n//         });\n\n//         setSuccess(\"Student removed from campus successfully!\"); // Update success message\n//         window.location.reload(); // Reload to reflect the changes\n//       } catch (error) {\n//         console.error(\"Error removing student from campus:\", error);\n//         setError(\"An error occurred while removing the student from campus.\"); // Update error message\n//       }\n//     }\n//   };\n\n//   // Handle adding a student to a campus\n//   const handleAddCampus = () => {\n//     if (student.campusId) {\n//       setError(\"Campus can't be added, student is already enrolled.\"); // Show error if already enrolled\n//     } else {\n//       setIsCampusDropdownVisible(true); // Show the dropdown if the student doesn't have a campus\n//     }\n//   };\n\n//   // Handle selecting a campus from the dropdown\n//   const handleCampusSelect = (event) => {\n//     setSelectedCampusId(event.target.value);\n//   };\n\n//   // Handle adding the student to the selected campus\n//   const handleAddCampusToStudent = async () => {\n//     if (!selectedCampusId) {\n//       setError(\"Please select a campus.\"); // Show error if no campus selected\n//       return;\n//     }\n\n//     try {\n//       // Send a request to update the student's campusId\n//       await axios.put(`/api/students/${student.id}/`, {\n//         campusId: selectedCampusId,\n//       });\n\n//       setSuccess(\"Student successfully added to the campus!\"); // Show success message\n//       window.location.reload(); // Refresh the page after adding the campus\n//     } catch (error) {\n//       console.error(\"Error adding student to campus:\", error);\n//       setError(\"An error occurred while adding the student to campus.\"); // Show error message\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h1>{`${student.firstname} ${student.lastname}`}</h1>\n//       <p>Email: {student.email}</p>\n//       <p>GPA: {student.gpa || \"N/A\"}</p>\n//       <img\n//         src={student.imageurl || \"https://via.placeholder.com/150\"}\n//         alt={`${student.firstname} ${student.lastname}`}\n//         style={{ width: \"300px\", height: \"auto\" }}\n//       />\n//       <br />\n\n//       <h2>Enrolled Campus:</h2>\n//       {student.campus ? (\n//         <div>\n//           <Link to={`/campus/${student.campus.id}`}>\n//             <h3>{student.campus.name}</h3>\n//           </Link>\n//           <p>{student.campus.address}</p>\n//           <button onClick={handleRemoveFromCampus}>Remove from Campus</button>\n//         </div>\n//       ) : (\n//         <p>Student not enrolled in any campus.</p>\n//       )}\n\n//       <br />\n//       {/* Display success or error messages dynamically */}\n//       {success && <p style={{ color: \"green\" }}>{success}</p>}\n//       {error && <p style={{ color: \"red\" }}>{error}</p>}\n//       <br />\n\n//       {/* \"Add Campus\" Button */}\n//       <button onClick={handleAddCampus}>\n//         Add Campus\n//       </button>\n\n//       {/* Dropdown for selecting a campus */}\n//       {isCampusDropdownVisible && (\n//         <div>\n//           <h3>Select a Campus</h3>\n//           <select onChange={handleCampusSelect} value={selectedCampusId}>\n//             <option value=\"\">Select a campus</option>\n//             {campuses.map((campus) => (\n//               <option key={campus.id} value={campus.id}>\n//                 {campus.name}\n//               </option>\n//             ))}\n//           </select>\n//           <button onClick={handleAddCampusToStudent}>Add to Campus</button>\n//         </div>\n//       )}\n\n//       <br />\n//       <Link to={`/editstudent/${student.id}`}>\n//   <button>Edit Student</button>\n// </Link>\n\n//     </div>\n//   );\n// };\n\n// export default StudentView;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAUA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAMA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module"}