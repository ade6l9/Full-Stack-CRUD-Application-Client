{"ast":null,"code":"/*==================================================\n/src/store/thunks.js\n\nIt contains all Thunk Creators and Thunks.\n================================================== */\nimport * as ac from './actions/actionCreators'; // Import Action Creators (\"ac\" keyword Action Creator)\nconst axios = require('axios');\n\n//All Campuses\n// THUNK CREATOR:\nexport const fetchAllCampusesThunk = () => async dispatch => {\n  // The THUNK\n  try {\n    // API \"get\" call to get \"campuses\" data from database\n    let res = await axios.get(`/api/campuses`);\n    // Call Action Creator to return Action object (type + payload with \"campuses\" data)\n    // Then dispatch the Action object to Reducer to update state \n    dispatch(ac.fetchAllCampuses(res.data));\n  } catch (err) {\n    console.error(err);\n  }\n};\n\n// Single Campus\n// THUNK CREATOR:\nexport const fetchCampusThunk = id => async dispatch => {\n  // The THUNK\n  try {\n    // API \"get\" call to get a student data (based on \"id\")from database\n    let res = await axios.get(`/api/campuses/${id}`);\n    dispatch(ac.fetchCampus(res.data));\n  } catch (err) {\n    console.error(err);\n  }\n};\n\n// All Students\n// THUNK CREATOR:\nexport const fetchAllStudentsThunk = () => async dispatch => {\n  // The THUNK\n  try {\n    // API \"get\" call to get \"students\" data from database\n    let res = await axios.get(`/api/students`);\n    // Call Action Creator to return Action object (type + payload with \"students\" data)\n    // Then dispatch the Action object to Reducer to update state \n    dispatch(ac.fetchAllStudents(res.data));\n  } catch (err) {\n    console.error(err);\n  }\n};\n\n// Add Student\n// THUNK CREATOR:\nexport const addStudentThunk = student => async dispatch => {\n  try {\n    // Ensure imageUrl has a fallback\n    student.imageurl = student.imageurl || \"https://via.placeholder.com/150\";\n    console.log(\"Student payload:\", student); // Debugging log\n\n    // API call to add student\n    let res = await axios.post(`/api/students`, student);\n    console.log(\"Response from backend:\", res.data); // Debugging log\n\n    // Dispatch action to update state with new student\n    dispatch(ac.addStudent(res.data));\n    return res.data; // Return the added student data if needed\n  } catch (err) {\n    console.error(\"Error adding student:\", err);\n    alert(\"Failed to add student. Please try again.\");\n  }\n};\n\n// Delete Student\n// THUNK CREATOR:\nexport const deleteStudentThunk = studentId => async dispatch => {\n  // The THUNK\n  try {\n    // API \"delete\" call to delete student (based on \"studentID\") from database\n    await axios.delete(`/api/students/${studentId}`);\n    // Delete successful so change state with dispatch\n    dispatch(ac.deleteStudent(studentId));\n  } catch (err) {\n    console.error(err);\n  }\n};\n\n// Edit Student\n// THUNK CREATOR:\nexport const editStudentThunk = student => async dispatch => {\n  // The THUNK\n  try {\n    // API \"put\" call to update student (based on \"id\" and \"student\" object's data) from database\n    let updatedStudent = await axios.put(`/api/students/${student.id}`, student);\n    // Update successful so change state with dispatch\n    dispatch(ac.editStudent(updatedStudent));\n  } catch (err) {\n    console.error(err);\n  }\n};\n\n// Single Student\n// THUNK CREATOR:\n// export const fetchStudentThunk = id => async dispatch => {  // The THUNK\n//   try {\n//     // API \"get\" call to get a specific student (based on \"id\") data from database\n//     let res = await axios.get(`/api/students/${id}`);  \n//     // Call Action Creator to return Action object (type + payload with student data)\n//     // Then dispatch the Action object to Reducer to display student data \n//     dispatch(ac.fetchStudent(res.data));\n//   } catch(err) {\n//     console.error(err);\n//   }\n// };\n//debugging \nexport const fetchStudentThunk = id => async dispatch => {\n  try {\n    console.log('Fetching student with ID:', id); // Debug log\n    const res = await axios.get(`/api/students/${id}`);\n    console.log('Student data:', res.data); // Debug log\n    dispatch(fetchStudent(res.data));\n  } catch (err) {\n    console.error('Error in fetchStudentThunk:', err);\n  }\n};\n\n// Add Campus\n// THUNK CREATOR:\nexport const addCampusThunk = campus => async dispatch => {\n  try {\n    // Ensure imageUrl has a fallback\n    campus.imageUrl = campus.imageUrl || \"default-image-url.jpg\";\n    console.log(\"Campus payload:\", campus); // Debugging log\n\n    // API call to add campus\n    let res = await axios.post(`/api/campuses`, campus);\n    console.log(\"Response from backend:\", res.data); // Debugging log\n\n    // Dispatch action to update state with new campus\n    dispatch(ac.addCampus(res.data));\n    return res.data;\n  } catch (err) {\n    console.error(\"Error adding campus:\", err);\n    alert(\"Failed to add campus. Please try again.\");\n  }\n};\n\n// Delete Campus\n// THUNK CREATOR:\nexport const deleteCampusThunk = campusId => async dispatch => {\n  try {\n    // Send DELETE request to the backend\n    await axios.delete(`/api/campuses/${campusId}`);\n\n    // Dispatch action to update the Redux store\n    dispatch(ac.deleteCampus(campusId));\n  } catch (err) {\n    console.error(\"Error deleting campus:\", err);\n  }\n};\n\n// Edit Campus\n// THUNK CREATOR:\nexport const updateCampusThunk = (campusId, updatedData) => async dispatch => {\n  try {\n    const {\n      data: updatedCampus\n    } = await axios.put(`/api/campuses/${campusId}`, updatedData);\n    dispatch(fetchCampusThunk(updatedCampus.id)); // Re-fetch the updated campus\n  } catch (error) {\n    console.error(\"Error updating campus:\", error);\n  }\n};\n\n// Remove student from campus\n// THUNK CREATOR:\nexport const removeStudentFromCampusThunk = (studentId, campusId) => async dispatch => {\n  try {\n    // Update the student's campusId to null\n    await axios.put(`/api/students/${studentId}`, {\n      campusId: null\n    });\n\n    // Refresh the campus data\n    dispatch(ac.fetchCampus(campusId));\n  } catch (error) {\n    console.error('Error removing student from campus:', error);\n  }\n};","map":{"version":3,"names":["ac","axios","require","fetchAllCampusesThunk","dispatch","res","get","fetchAllCampuses","data","err","console","error","fetchCampusThunk","id","fetchCampus","fetchAllStudentsThunk","fetchAllStudents","addStudentThunk","student","imageurl","log","post","addStudent","alert","deleteStudentThunk","studentId","delete","deleteStudent","editStudentThunk","updatedStudent","put","editStudent","fetchStudentThunk","fetchStudent","addCampusThunk","campus","imageUrl","addCampus","deleteCampusThunk","campusId","deleteCampus","updateCampusThunk","updatedData","updatedCampus","removeStudentFromCampusThunk"],"sources":["/Users/adelinadautovic/Full-Stack-CRUD-Application-Client/src/store/thunks.js"],"sourcesContent":["/*==================================================\n/src/store/thunks.js\n\nIt contains all Thunk Creators and Thunks.\n================================================== */\nimport * as ac from './actions/actionCreators';  // Import Action Creators (\"ac\" keyword Action Creator)\nconst axios = require('axios');\n\n//All Campuses\n// THUNK CREATOR:\nexport const fetchAllCampusesThunk = () => async (dispatch) => {  // The THUNK\n  try {\n    // API \"get\" call to get \"campuses\" data from database\n    let res = await axios.get(`/api/campuses`);  \n    // Call Action Creator to return Action object (type + payload with \"campuses\" data)\n    // Then dispatch the Action object to Reducer to update state \n    dispatch(ac.fetchAllCampuses(res.data));\n  } catch(err) {\n    console.error(err);\n  }\n};\n\n// Single Campus\n// THUNK CREATOR:\nexport const fetchCampusThunk = (id) => async (dispatch) => {  // The THUNK\n  try {\n    // API \"get\" call to get a student data (based on \"id\")from database\n    let res = await axios.get(`/api/campuses/${id}`);  \n    dispatch(ac.fetchCampus(res.data));\n  } catch(err) {\n    console.error(err);\n  }\n};\n\n// All Students\n// THUNK CREATOR:\nexport const fetchAllStudentsThunk = () => async (dispatch) => {  // The THUNK\n  try {\n    // API \"get\" call to get \"students\" data from database\n    let res = await axios.get(`/api/students`);  \n    // Call Action Creator to return Action object (type + payload with \"students\" data)\n    // Then dispatch the Action object to Reducer to update state \n    dispatch(ac.fetchAllStudents(res.data));  \n  } catch(err) {\n    console.error(err);\n  }\n};\n\n// Add Student\n// THUNK CREATOR:\nexport const addStudentThunk = (student) => async (dispatch) => {\n  try {\n    // Ensure imageUrl has a fallback\n    student.imageurl = student.imageurl || \"https://via.placeholder.com/150\"; \n\n    console.log(\"Student payload:\", student); // Debugging log\n\n    // API call to add student\n    let res = await axios.post(`/api/students`, student);\n\n    console.log(\"Response from backend:\", res.data); // Debugging log\n\n    // Dispatch action to update state with new student\n    dispatch(ac.addStudent(res.data));\n\n    return res.data; // Return the added student data if needed\n  } catch (err) {\n    console.error(\"Error adding student:\", err);\n    alert(\"Failed to add student. Please try again.\");\n  }\n};\n\n// Delete Student\n// THUNK CREATOR:\nexport const deleteStudentThunk = studentId => async dispatch => {  // The THUNK\n  try {\n    // API \"delete\" call to delete student (based on \"studentID\") from database\n    await axios.delete(`/api/students/${studentId}`);  \n    // Delete successful so change state with dispatch\n    dispatch(ac.deleteStudent(studentId));\n  } catch(err) {\n    console.error(err);\n  }\n};\n\n// Edit Student\n// THUNK CREATOR:\nexport const editStudentThunk = student => async dispatch => {  // The THUNK\n  try {\n    // API \"put\" call to update student (based on \"id\" and \"student\" object's data) from database\n    let updatedStudent = await axios.put(`/api/students/${student.id}`, student); \n    // Update successful so change state with dispatch\n    dispatch(ac.editStudent(updatedStudent));\n  } catch(err) {\n    console.error(err);\n  }\n};\n\n// Single Student\n// THUNK CREATOR:\n// export const fetchStudentThunk = id => async dispatch => {  // The THUNK\n//   try {\n//     // API \"get\" call to get a specific student (based on \"id\") data from database\n//     let res = await axios.get(`/api/students/${id}`);  \n//     // Call Action Creator to return Action object (type + payload with student data)\n//     // Then dispatch the Action object to Reducer to display student data \n//     dispatch(ac.fetchStudent(res.data));\n//   } catch(err) {\n//     console.error(err);\n//   }\n// };\n//debugging \nexport const fetchStudentThunk = (id) => async (dispatch) => {\n  try {\n    console.log('Fetching student with ID:', id); // Debug log\n    const res = await axios.get(`/api/students/${id}`);\n    console.log('Student data:', res.data); // Debug log\n    dispatch(fetchStudent(res.data));\n  } catch (err) {\n    console.error('Error in fetchStudentThunk:', err);\n  }\n};\n\n// Add Campus\n// THUNK CREATOR:\nexport const addCampusThunk = (campus) => async (dispatch) => {\n  try {\n    // Ensure imageUrl has a fallback\n    campus.imageUrl = campus.imageUrl || \"default-image-url.jpg\";\n\n    console.log(\"Campus payload:\", campus); // Debugging log\n\n    // API call to add campus\n    let res = await axios.post(`/api/campuses`, campus);\n\n    console.log(\"Response from backend:\", res.data); // Debugging log\n\n    // Dispatch action to update state with new campus\n    dispatch(ac.addCampus(res.data));\n\n    return res.data;\n  } catch (err) {\n    console.error(\"Error adding campus:\", err);\n    alert(\"Failed to add campus. Please try again.\");\n  }\n};\n\n// Delete Campus\n// THUNK CREATOR:\nexport const deleteCampusThunk = (campusId) => async (dispatch) => {\n  try {\n    // Send DELETE request to the backend\n    await axios.delete(`/api/campuses/${campusId}`);\n\n    // Dispatch action to update the Redux store\n    dispatch(ac.deleteCampus(campusId));\n  } catch (err) {\n    console.error(\"Error deleting campus:\", err);\n  }\n};\n\n// Edit Campus\n// THUNK CREATOR:\nexport const updateCampusThunk = (campusId, updatedData) => async (dispatch) => {\n  try {\n    const { data: updatedCampus } = await axios.put(`/api/campuses/${campusId}`, updatedData);\n    dispatch(fetchCampusThunk(updatedCampus.id)); // Re-fetch the updated campus\n  } catch (error) {\n    console.error(\"Error updating campus:\", error);\n  }\n};\n\n// Remove student from campus\n// THUNK CREATOR:\nexport const removeStudentFromCampusThunk = (studentId, campusId) => async (dispatch) => {\n  try {\n    // Update the student's campusId to null\n    await axios.put(`/api/students/${studentId}`, { campusId: null });\n\n    // Refresh the campus data\n    dispatch(ac.fetchCampus(campusId));\n  } catch (error) {\n    console.error('Error removing student from campus:', error);\n  }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,OAAO,KAAKA,EAAE,MAAM,0BAA0B,CAAC,CAAE;AACjD,MAAMC,KAAK,GAAGC,OAAO,CAAC,OAAO,CAAC;;AAE9B;AACA;AACA,OAAO,MAAMC,qBAAqB,GAAGA,CAAA,KAAM,MAAOC,QAAQ,IAAK;EAAG;EAChE,IAAI;IACF;IACA,IAAIC,GAAG,GAAG,MAAMJ,KAAK,CAACK,GAAG,CAAC,eAAe,CAAC;IAC1C;IACA;IACAF,QAAQ,CAACJ,EAAE,CAACO,gBAAgB,CAACF,GAAG,CAACG,IAAI,CAAC,CAAC;EACzC,CAAC,CAAC,OAAMC,GAAG,EAAE;IACXC,OAAO,CAACC,KAAK,CAACF,GAAG,CAAC;EACpB;AACF,CAAC;;AAED;AACA;AACA,OAAO,MAAMG,gBAAgB,GAAIC,EAAE,IAAK,MAAOT,QAAQ,IAAK;EAAG;EAC7D,IAAI;IACF;IACA,IAAIC,GAAG,GAAG,MAAMJ,KAAK,CAACK,GAAG,CAAC,iBAAiBO,EAAE,EAAE,CAAC;IAChDT,QAAQ,CAACJ,EAAE,CAACc,WAAW,CAACT,GAAG,CAACG,IAAI,CAAC,CAAC;EACpC,CAAC,CAAC,OAAMC,GAAG,EAAE;IACXC,OAAO,CAACC,KAAK,CAACF,GAAG,CAAC;EACpB;AACF,CAAC;;AAED;AACA;AACA,OAAO,MAAMM,qBAAqB,GAAGA,CAAA,KAAM,MAAOX,QAAQ,IAAK;EAAG;EAChE,IAAI;IACF;IACA,IAAIC,GAAG,GAAG,MAAMJ,KAAK,CAACK,GAAG,CAAC,eAAe,CAAC;IAC1C;IACA;IACAF,QAAQ,CAACJ,EAAE,CAACgB,gBAAgB,CAACX,GAAG,CAACG,IAAI,CAAC,CAAC;EACzC,CAAC,CAAC,OAAMC,GAAG,EAAE;IACXC,OAAO,CAACC,KAAK,CAACF,GAAG,CAAC;EACpB;AACF,CAAC;;AAED;AACA;AACA,OAAO,MAAMQ,eAAe,GAAIC,OAAO,IAAK,MAAOd,QAAQ,IAAK;EAC9D,IAAI;IACF;IACAc,OAAO,CAACC,QAAQ,GAAGD,OAAO,CAACC,QAAQ,IAAI,iCAAiC;IAExET,OAAO,CAACU,GAAG,CAAC,kBAAkB,EAAEF,OAAO,CAAC,CAAC,CAAC;;IAE1C;IACA,IAAIb,GAAG,GAAG,MAAMJ,KAAK,CAACoB,IAAI,CAAC,eAAe,EAAEH,OAAO,CAAC;IAEpDR,OAAO,CAACU,GAAG,CAAC,wBAAwB,EAAEf,GAAG,CAACG,IAAI,CAAC,CAAC,CAAC;;IAEjD;IACAJ,QAAQ,CAACJ,EAAE,CAACsB,UAAU,CAACjB,GAAG,CAACG,IAAI,CAAC,CAAC;IAEjC,OAAOH,GAAG,CAACG,IAAI,CAAC,CAAC;EACnB,CAAC,CAAC,OAAOC,GAAG,EAAE;IACZC,OAAO,CAACC,KAAK,CAAC,uBAAuB,EAAEF,GAAG,CAAC;IAC3Cc,KAAK,CAAC,0CAA0C,CAAC;EACnD;AACF,CAAC;;AAED;AACA;AACA,OAAO,MAAMC,kBAAkB,GAAGC,SAAS,IAAI,MAAMrB,QAAQ,IAAI;EAAG;EAClE,IAAI;IACF;IACA,MAAMH,KAAK,CAACyB,MAAM,CAAC,iBAAiBD,SAAS,EAAE,CAAC;IAChD;IACArB,QAAQ,CAACJ,EAAE,CAAC2B,aAAa,CAACF,SAAS,CAAC,CAAC;EACvC,CAAC,CAAC,OAAMhB,GAAG,EAAE;IACXC,OAAO,CAACC,KAAK,CAACF,GAAG,CAAC;EACpB;AACF,CAAC;;AAED;AACA;AACA,OAAO,MAAMmB,gBAAgB,GAAGV,OAAO,IAAI,MAAMd,QAAQ,IAAI;EAAG;EAC9D,IAAI;IACF;IACA,IAAIyB,cAAc,GAAG,MAAM5B,KAAK,CAAC6B,GAAG,CAAC,iBAAiBZ,OAAO,CAACL,EAAE,EAAE,EAAEK,OAAO,CAAC;IAC5E;IACAd,QAAQ,CAACJ,EAAE,CAAC+B,WAAW,CAACF,cAAc,CAAC,CAAC;EAC1C,CAAC,CAAC,OAAMpB,GAAG,EAAE;IACXC,OAAO,CAACC,KAAK,CAACF,GAAG,CAAC;EACpB;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMuB,iBAAiB,GAAInB,EAAE,IAAK,MAAOT,QAAQ,IAAK;EAC3D,IAAI;IACFM,OAAO,CAACU,GAAG,CAAC,2BAA2B,EAAEP,EAAE,CAAC,CAAC,CAAC;IAC9C,MAAMR,GAAG,GAAG,MAAMJ,KAAK,CAACK,GAAG,CAAC,iBAAiBO,EAAE,EAAE,CAAC;IAClDH,OAAO,CAACU,GAAG,CAAC,eAAe,EAAEf,GAAG,CAACG,IAAI,CAAC,CAAC,CAAC;IACxCJ,QAAQ,CAAC6B,YAAY,CAAC5B,GAAG,CAACG,IAAI,CAAC,CAAC;EAClC,CAAC,CAAC,OAAOC,GAAG,EAAE;IACZC,OAAO,CAACC,KAAK,CAAC,6BAA6B,EAAEF,GAAG,CAAC;EACnD;AACF,CAAC;;AAED;AACA;AACA,OAAO,MAAMyB,cAAc,GAAIC,MAAM,IAAK,MAAO/B,QAAQ,IAAK;EAC5D,IAAI;IACF;IACA+B,MAAM,CAACC,QAAQ,GAAGD,MAAM,CAACC,QAAQ,IAAI,uBAAuB;IAE5D1B,OAAO,CAACU,GAAG,CAAC,iBAAiB,EAAEe,MAAM,CAAC,CAAC,CAAC;;IAExC;IACA,IAAI9B,GAAG,GAAG,MAAMJ,KAAK,CAACoB,IAAI,CAAC,eAAe,EAAEc,MAAM,CAAC;IAEnDzB,OAAO,CAACU,GAAG,CAAC,wBAAwB,EAAEf,GAAG,CAACG,IAAI,CAAC,CAAC,CAAC;;IAEjD;IACAJ,QAAQ,CAACJ,EAAE,CAACqC,SAAS,CAAChC,GAAG,CAACG,IAAI,CAAC,CAAC;IAEhC,OAAOH,GAAG,CAACG,IAAI;EACjB,CAAC,CAAC,OAAOC,GAAG,EAAE;IACZC,OAAO,CAACC,KAAK,CAAC,sBAAsB,EAAEF,GAAG,CAAC;IAC1Cc,KAAK,CAAC,yCAAyC,CAAC;EAClD;AACF,CAAC;;AAED;AACA;AACA,OAAO,MAAMe,iBAAiB,GAAIC,QAAQ,IAAK,MAAOnC,QAAQ,IAAK;EACjE,IAAI;IACF;IACA,MAAMH,KAAK,CAACyB,MAAM,CAAC,iBAAiBa,QAAQ,EAAE,CAAC;;IAE/C;IACAnC,QAAQ,CAACJ,EAAE,CAACwC,YAAY,CAACD,QAAQ,CAAC,CAAC;EACrC,CAAC,CAAC,OAAO9B,GAAG,EAAE;IACZC,OAAO,CAACC,KAAK,CAAC,wBAAwB,EAAEF,GAAG,CAAC;EAC9C;AACF,CAAC;;AAED;AACA;AACA,OAAO,MAAMgC,iBAAiB,GAAGA,CAACF,QAAQ,EAAEG,WAAW,KAAK,MAAOtC,QAAQ,IAAK;EAC9E,IAAI;IACF,MAAM;MAAEI,IAAI,EAAEmC;IAAc,CAAC,GAAG,MAAM1C,KAAK,CAAC6B,GAAG,CAAC,iBAAiBS,QAAQ,EAAE,EAAEG,WAAW,CAAC;IACzFtC,QAAQ,CAACQ,gBAAgB,CAAC+B,aAAa,CAAC9B,EAAE,CAAC,CAAC,CAAC,CAAC;EAChD,CAAC,CAAC,OAAOF,KAAK,EAAE;IACdD,OAAO,CAACC,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;EAChD;AACF,CAAC;;AAED;AACA;AACA,OAAO,MAAMiC,4BAA4B,GAAGA,CAACnB,SAAS,EAAEc,QAAQ,KAAK,MAAOnC,QAAQ,IAAK;EACvF,IAAI;IACF;IACA,MAAMH,KAAK,CAAC6B,GAAG,CAAC,iBAAiBL,SAAS,EAAE,EAAE;MAAEc,QAAQ,EAAE;IAAK,CAAC,CAAC;;IAEjE;IACAnC,QAAQ,CAACJ,EAAE,CAACc,WAAW,CAACyB,QAAQ,CAAC,CAAC;EACpC,CAAC,CAAC,OAAO5B,KAAK,EAAE;IACdD,OAAO,CAACC,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;EAC7D;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}