{"ast":null,"code":"var _jsxFileName = \"/Users/adelinadautovic/Full-Stack-CRUD-Application-Client/src/components/containers/StudentContainer.js\",\n  _s = $RefreshSig$();\n/*==================================================\nStudentContainer.js\n\nThe Container component is responsible for stateful logic and data fetching, and\npasses data (if any) as props to the corresponding View component.\nIf needed, it also defines the component's \"connect\" function.\n================================================== */\n// import Header from './Header';\n// import React, { Component } from \"react\";\n// import { connect } from \"react-redux\";\n// import { fetchStudentThunk } from \"../../store/thunks\";\n// import { fetchCampusThunk } from \"../../store/thunks\";\n// import { StudentView } from \"../views\";\n// import { fetchCampus } from '../../store/actions/actionCreators';\n\n// class StudentContainer extends Component {\n//   // Get student data from back-end database\n//   componentDidMount() {\n//     //getting student ID from url\n//     this.props.fetchStudent(this.props.match.params.id);\n//   }\n\n//   // Render Student view by passing student data as props to the corresponding View component\n//   render() {\n//     return (\n//       <div>\n//         <Header />\n//         <StudentView student={this.props.student} />\n//       </div>\n//     );\n//   }\n// }\n\n// // The following 2 input arguments are passed to the \"connect\" function used by \"StudentContainer\" to connect to Redux Store.  \n// // The following 2 input arguments are passed to the \"connect\" function used by \"AllCampusesContainer\" component to connect to Redux Store.\n// const mapState = (state) => {\n//   return {\n//     student: state.student,  // Get the State object from Reducer \"student\"\n//     campus: state.campuses.find(campus => campus.id === state.student.campusId), // Get the campus data\n\n//   };\n// };\n// // 2. The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// // The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\n// const mapDispatch = (dispatch) => {\n//   return {\n//     fetchStudent: (id) => dispatch(fetchStudentThunk(id)),\n//     fetchCampus:(id)  => dispatch(fetchCampusThunk(id)),\n//   };\n// };\n\n// // Export store-connected container by default\n// // StudentContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// // (and re-read the values when the Store State updates).\n// export default connect(mapState, mapDispatch)(StudentContainer);\n\nimport React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport StudentView from \"../views\";\nimport { fetchStudentThunk, fetchCampusThunk, deleteStudentThunk } from \"../../store/thunks\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StudentContainer = ({\n  student,\n  campus,\n  fetchStudent,\n  fetchCampus,\n  deleteStudent\n}) => {\n  _s();\n  const {\n    studentId\n  } = useParams();\n  const navigate = useNavigate();\n  useEffect(() => {\n    fetchStudent(studentId);\n  }, [studentId, fetchStudent]);\n  useEffect(() => {\n    if (student && student.campusId) {\n      fetchSingleCampus(student.campusId);\n    }\n  }, [student, fetchSingleCampus]);\n  const handleDeleteStudent = id => {\n    deleteStudent(id);\n    navigate('/students'); // Redirect after deletion\n  };\n  return /*#__PURE__*/_jsxDEV(StudentView, {\n    student: student,\n    campus: campus,\n    onDeleteStudent: handleDeleteStudent\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n};\n_s(StudentContainer, \"mFLIGGln0simosG15w0tUBVYSHo=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = StudentContainer;\nconst mapStateToProps = state => ({\n  student: state.student.selectedStudent,\n  campus: state.campus.selectedCampus\n});\nconst mapDispatchToProps = dispatch => ({\n  fetchStudent: id => dispatch(fetchStudentThunk(id)),\n  fetchSingleCampus: id => dispatch(fetchCampusThunk(id)),\n  deleteStudent: id => dispatch(deleteStudentThunk(id))\n});\nexport default connect(mapStateToProps, mapDispatchToProps)(StudentContainer);\nvar _c;\n$RefreshReg$(_c, \"StudentContainer\");","map":{"version":3,"names":["React","useEffect","connect","useParams","useNavigate","StudentView","fetchStudentThunk","fetchCampusThunk","deleteStudentThunk","jsxDEV","_jsxDEV","StudentContainer","student","campus","fetchStudent","fetchCampus","deleteStudent","_s","studentId","navigate","campusId","fetchSingleCampus","handleDeleteStudent","id","onDeleteStudent","fileName","_jsxFileName","lineNumber","columnNumber","_c","mapStateToProps","state","selectedStudent","selectedCampus","mapDispatchToProps","dispatch","$RefreshReg$"],"sources":["/Users/adelinadautovic/Full-Stack-CRUD-Application-Client/src/components/containers/StudentContainer.js"],"sourcesContent":["/*==================================================\nStudentContainer.js\n\nThe Container component is responsible for stateful logic and data fetching, and\npasses data (if any) as props to the corresponding View component.\nIf needed, it also defines the component's \"connect\" function.\n================================================== */\n// import Header from './Header';\n// import React, { Component } from \"react\";\n// import { connect } from \"react-redux\";\n// import { fetchStudentThunk } from \"../../store/thunks\";\n// import { fetchCampusThunk } from \"../../store/thunks\";\n// import { StudentView } from \"../views\";\n// import { fetchCampus } from '../../store/actions/actionCreators';\n\n// class StudentContainer extends Component {\n//   // Get student data from back-end database\n//   componentDidMount() {\n//     //getting student ID from url\n//     this.props.fetchStudent(this.props.match.params.id);\n//   }\n\n//   // Render Student view by passing student data as props to the corresponding View component\n//   render() {\n//     return (\n//       <div>\n//         <Header />\n//         <StudentView student={this.props.student} />\n//       </div>\n//     );\n//   }\n// }\n\n// // The following 2 input arguments are passed to the \"connect\" function used by \"StudentContainer\" to connect to Redux Store.  \n// // The following 2 input arguments are passed to the \"connect\" function used by \"AllCampusesContainer\" component to connect to Redux Store.\n// const mapState = (state) => {\n//   return {\n//     student: state.student,  // Get the State object from Reducer \"student\"\n//     campus: state.campuses.find(campus => campus.id === state.student.campusId), // Get the campus data\n\n//   };\n// };\n// // 2. The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// // The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\n// const mapDispatch = (dispatch) => {\n//   return {\n//     fetchStudent: (id) => dispatch(fetchStudentThunk(id)),\n//     fetchCampus:(id)  => dispatch(fetchCampusThunk(id)),\n//   };\n// };\n\n// // Export store-connected container by default\n// // StudentContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// // (and re-read the values when the Store State updates).\n// export default connect(mapState, mapDispatch)(StudentContainer);\n\n\n\nimport React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport StudentView from \"../views\";\nimport { \n  fetchStudentThunk, \n  fetchCampusThunk,\n  deleteStudentThunk \n} from \"../../store/thunks\";\n\nconst StudentContainer = ({\n  student, \n  campus, \n  fetchStudent, \n  fetchCampus,\n  deleteStudent\n}) => {\n  const { studentId } = useParams();\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    fetchStudent(studentId);\n  }, [studentId, fetchStudent]);\n\n  useEffect(() => {\n    if (student && student.campusId) {\n      fetchSingleCampus(student.campusId);\n    }\n  }, [student, fetchSingleCampus]);\n\n  const handleDeleteStudent = (id) => {\n    deleteStudent(id);\n    navigate('/students'); // Redirect after deletion\n  };\n\n  return (\n    <StudentView \n      student={student} \n      campus={campus}\n      onDeleteStudent={handleDeleteStudent}\n    />\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  student: state.student.selectedStudent,\n  campus: state.campus.selectedCampus\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  fetchStudent: (id) => dispatch(fetchStudentThunk(id)),\n  fetchSingleCampus: (id) => dispatch(fetchCampusThunk(id)),\n  deleteStudent: (id) => dispatch(deleteStudentThunk(id))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(StudentContainer);"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAIA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAASC,OAAO,QAAQ,aAAa;AACrC,SAASC,SAAS,EAAEC,WAAW,QAAQ,kBAAkB;AACzD,OAAOC,WAAW,MAAM,UAAU;AAClC,SACEC,iBAAiB,EACjBC,gBAAgB,EAChBC,kBAAkB,QACb,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5B,MAAMC,gBAAgB,GAAGA,CAAC;EACxBC,OAAO;EACPC,MAAM;EACNC,YAAY;EACZC,WAAW;EACXC;AACF,CAAC,KAAK;EAAAC,EAAA;EACJ,MAAM;IAAEC;EAAU,CAAC,GAAGf,SAAS,CAAC,CAAC;EACjC,MAAMgB,QAAQ,GAAGf,WAAW,CAAC,CAAC;EAE9BH,SAAS,CAAC,MAAM;IACda,YAAY,CAACI,SAAS,CAAC;EACzB,CAAC,EAAE,CAACA,SAAS,EAAEJ,YAAY,CAAC,CAAC;EAE7Bb,SAAS,CAAC,MAAM;IACd,IAAIW,OAAO,IAAIA,OAAO,CAACQ,QAAQ,EAAE;MAC/BC,iBAAiB,CAACT,OAAO,CAACQ,QAAQ,CAAC;IACrC;EACF,CAAC,EAAE,CAACR,OAAO,EAAES,iBAAiB,CAAC,CAAC;EAEhC,MAAMC,mBAAmB,GAAIC,EAAE,IAAK;IAClCP,aAAa,CAACO,EAAE,CAAC;IACjBJ,QAAQ,CAAC,WAAW,CAAC,CAAC,CAAC;EACzB,CAAC;EAED,oBACET,OAAA,CAACL,WAAW;IACVO,OAAO,EAAEA,OAAQ;IACjBC,MAAM,EAAEA,MAAO;IACfW,eAAe,EAAEF;EAAoB;IAAAG,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACtC,CAAC;AAEN,CAAC;AAACX,EAAA,CAhCIN,gBAAgB;EAAA,QAOER,SAAS,EACdC,WAAW;AAAA;AAAAyB,EAAA,GARxBlB,gBAAgB;AAkCtB,MAAMmB,eAAe,GAAIC,KAAK,KAAM;EAClCnB,OAAO,EAAEmB,KAAK,CAACnB,OAAO,CAACoB,eAAe;EACtCnB,MAAM,EAAEkB,KAAK,CAAClB,MAAM,CAACoB;AACvB,CAAC,CAAC;AAEF,MAAMC,kBAAkB,GAAIC,QAAQ,KAAM;EACxCrB,YAAY,EAAGS,EAAE,IAAKY,QAAQ,CAAC7B,iBAAiB,CAACiB,EAAE,CAAC,CAAC;EACrDF,iBAAiB,EAAGE,EAAE,IAAKY,QAAQ,CAAC5B,gBAAgB,CAACgB,EAAE,CAAC,CAAC;EACzDP,aAAa,EAAGO,EAAE,IAAKY,QAAQ,CAAC3B,kBAAkB,CAACe,EAAE,CAAC;AACxD,CAAC,CAAC;AAEF,eAAerB,OAAO,CAAC4B,eAAe,EAAEI,kBAAkB,CAAC,CAACvB,gBAAgB,CAAC;AAAC,IAAAkB,EAAA;AAAAO,YAAA,CAAAP,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module"}