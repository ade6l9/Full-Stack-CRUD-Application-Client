{"ast":null,"code":"// /*==================================================\n// /src/store/reducers/student.js\n\n// This is a Reducer function that accepts 2 parameters: the previous state object (aka current state) and an action object. \n// Depending on the Action object, the Reducer updates the State and return the new State object.\n// It also defines the State and its default initial value.\n// ================================================== */\n// import { FETCH_STUDENT } from \"../actions/actionTypes\";  // Import Action Type\n\n// // Define default Initial state\n// const initialState = {\n//   campus: {},  // Empty object\n// };\n\n// // REDUCER:\n// const student = (state=initialState, action) => {  // Use \"initialState\" as default Initial State\n//   switch (action.type) {\n//     case FETCH_STUDENT:\n//       return action.payload;\n//     default:\n//       // If the Reducer doesn't recognize the Action Type, returns the previous (current) State unchanged.\n//       return state;\n//   }\n// };\n\n// export default student;\n\nimport * as at from \"../actions/actionTypes\"; // Import Action Types (\"at\" keyword for Action Type)\n\n// Define default Initial state\nconst initialState = {\n  student: null // Initialize with null for a single student\n};\n\n// REDUCER:\nconst studentReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case at.FETCH_STUDENT:\n      return {\n        ...state,\n        student: action.payload\n      };\n    default:\n      return state;\n    // Return the current state if action type is not recognized\n  }\n};\nexport default studentReducer;","map":{"version":3,"names":["at","initialState","student","studentReducer","state","action","type","FETCH_STUDENT","payload"],"sources":["/Users/adelinadautovic/Full-Stack-CRUD-Application-Client/src/store/reducers/student.js"],"sourcesContent":["// /*==================================================\n// /src/store/reducers/student.js\n\n// This is a Reducer function that accepts 2 parameters: the previous state object (aka current state) and an action object. \n// Depending on the Action object, the Reducer updates the State and return the new State object.\n// It also defines the State and its default initial value.\n// ================================================== */\n// import { FETCH_STUDENT } from \"../actions/actionTypes\";  // Import Action Type\n\n// // Define default Initial state\n// const initialState = {\n//   campus: {},  // Empty object\n// };\n\n// // REDUCER:\n// const student = (state=initialState, action) => {  // Use \"initialState\" as default Initial State\n//   switch (action.type) {\n//     case FETCH_STUDENT:\n//       return action.payload;\n//     default:\n//       // If the Reducer doesn't recognize the Action Type, returns the previous (current) State unchanged.\n//       return state;\n//   }\n// };\n\n// export default student;\n\n\nimport * as at from \"../actions/actionTypes\"; // Import Action Types (\"at\" keyword for Action Type)\n\n// Define default Initial state\nconst initialState = {\n  student: null, // Initialize with null for a single student\n};\n\n// REDUCER:\nconst studentReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case at.FETCH_STUDENT:\n      return { ...state, student: action.payload };\n    default:\n      return state; // Return the current state if action type is not recognized\n  }\n};\n\nexport default studentReducer;"],"mappings":"AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA,OAAO,KAAKA,EAAE,MAAM,wBAAwB,CAAC,CAAC;;AAE9C;AACA,MAAMC,YAAY,GAAG;EACnBC,OAAO,EAAE,IAAI,CAAE;AACjB,CAAC;;AAED;AACA,MAAMC,cAAc,GAAGA,CAACC,KAAK,GAAGH,YAAY,EAAEI,MAAM,KAAK;EACvD,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAKN,EAAE,CAACO,aAAa;MACnB,OAAO;QAAE,GAAGH,KAAK;QAAEF,OAAO,EAAEG,MAAM,CAACG;MAAQ,CAAC;IAC9C;MACE,OAAOJ,KAAK;IAAE;EAClB;AACF,CAAC;AAED,eAAeD,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module"}