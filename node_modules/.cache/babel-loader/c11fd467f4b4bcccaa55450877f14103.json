{"ast":null,"code":"var _jsxFileName = \"/Users/adelinadautovic/Full-Stack-CRUD-Application-Client/src/components/views/CampusView.js\",\n  _s = $RefreshSig$();\n// /*==================================================\n// CampusView.js\n\n// The Views component is responsible for rendering web page with data provided by the corresponding Container component.\n// It constructs a React component to display a single campus and its students (if any).\n// ================================================== */\n\n// import { useState } from \"react\";\n// import { Link } from \"react-router-dom\";\n// import { addStudentThunk } from \"../../store/thunks\";\n\n// const CampusView = (props) => {\n//   const {\n//     campus,\n//     allStudents,\n//     updateStudent,\n//     removeStudentFromCampus,\n//     fetchCampus,\n//   } = props;\n\n//   // Track whether to show the forms\n//   const [showNewStudentForm, setShowNewStudentForm] = useState(false);\n//   const [showExistingStudentForm, setShowExistingStudentForm] = useState(false);\n\n//   // Handle new student form state\n//   const [newStudent, setNewStudent] = useState({\n//     firstname: \"\",\n//     lastname: \"\",\n//     email: \"\",\n//     gpa: \"\",\n//     campusId: campus.id,\n//   });\n\n//   const [selectedStudent, setSelectedStudent] = useState(\"\");\n\n//   // Handle new student form submission\n//   const handleNewStudentSubmit = async (e) => {\n//     e.preventDefault();\n//     const addedStudent = await addStudentThunk(newStudent); // Call the thunk\n//     if (addedStudent) {\n//       setNewStudent({ firstname: \"\", lastname: \"\", email: \"\", gpa: \"\", campusId: campus.id });\n//       setShowNewStudentForm(false); // Hide the form\n//     }\n//   };\n\n//   // Handle adding existing student\n//   const handleAddExistingStudent = (e) => {\n//     e.preventDefault();\n//     if (selectedStudent) {\n//       updateStudent(selectedStudent, { campusId: campus.id });\n//       setSelectedStudent(\"\");\n//       setShowExistingStudentForm(false); // Hide the form after submission\n//     }\n//   };\n\n//   // Handle removing a student with confirmation\n//   const handleRemoveStudent = async (studentId) => {\n//     const confirmation = window.confirm(\"Are you sure you want to remove this student?\");\n//     if (confirmation) {\n//       await removeStudentFromCampus(studentId, campus.id); // Remove the student\n//       await fetchCampus(campus.id); // Re-fetch the updated campus data\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h1>{campus.name}</h1>\n//       <p>{campus.address}</p>\n//       <p>{campus.description}</p>\n//       <img\n//         src={campus.imageUrl || \"https://via.placeholder.com/150\"}\n//         alt={`${campus.name} campus`}\n//         style={{ width: \"300px\", height: \"auto\" }}\n//       />\n//       <br />\n\n//       <h2>Enrolled Students:</h2>\n//       {campus.students && campus.students.length > 0 ? (\n//         campus.students.map((student) => (\n//           <div key={student.id}>\n//             <Link to={`/student/${student.id}`}>\n//               <h3>{`${student.firstname} ${student.lastname}`}</h3>\n//             </Link>\n//             <button onClick={() => handleRemoveStudent(student.id)}>\n//               Remove Student\n//             </button>\n//           </div>\n//         ))\n//       ) : (\n//         <p>No students are currently enrolled at this campus.</p>\n//       )}\n\n//       <br />\n\n//       {/* Buttons to trigger the forms */}\n//       <button onClick={() => setShowNewStudentForm(!showNewStudentForm)}>\n//         {showNewStudentForm ? \"Cancel Add New Student\" : \"Add New Student\"}\n//       </button>\n//       <br />\n//       <button onClick={() => setShowExistingStudentForm(!showExistingStudentForm)}>\n//         {showExistingStudentForm ? \"Cancel Add Existing Student\" : \"Add Existing Student\"}\n//       </button>\n\n//       {/* New Student Form */}\n//       {showNewStudentForm && (\n//         <form onSubmit={handleNewStudentSubmit}>\n//           <h2>Add New Student</h2>\n//           <label>\n//             First Name:\n//             <input\n//               type=\"text\"\n//               value={newStudent.firstname}\n//               onChange={(e) => setNewStudent({ ...newStudent, firstname: e.target.value })}\n//               required\n//             />\n//           </label>\n//           <br />\n//           <label>\n//             Last Name:\n//             <input\n//               type=\"text\"\n//               value={newStudent.lastname}\n//               onChange={(e) => setNewStudent({ ...newStudent, lastname: e.target.value })}\n//               required\n//             />\n//           </label>\n//           <br />\n//           <label>\n//             Email:\n//             <input\n//               type=\"email\"\n//               value={newStudent.email}\n//               onChange={(e) => setNewStudent({ ...newStudent, email: e.target.value })}\n//               required\n//             />\n//           </label>\n//           <br />\n//           <label>\n//             GPA:\n//             <input\n//               type=\"number\"\n//               step=\"0.01\"\n//               value={newStudent.gpa}\n//               onChange={(e) => setNewStudent({ ...newStudent, gpa: e.target.value })}\n//             />\n//           </label>\n//           <br />\n//           <button type=\"submit\">Add Student</button>\n//         </form>\n//       )}\n\n//       {/* Existing Student Dropdown */}\n//       {showExistingStudentForm && (\n//         <form onSubmit={handleAddExistingStudent}>\n//           <h2>Add Existing Student</h2>\n//           <label>\n//             Select Student:\n//             <select\n//               value={selectedStudent}\n//               onChange={(e) => setSelectedStudent(e.target.value)}\n//               required\n//             >\n//               <option value=\"\">-- Select a Student --</option>\n//               {allStudents &&\n//                 allStudents\n//                   .filter((student) => !student.campusId) // Only show students not already enrolled\n//                   .map((student) => (\n//                     <option key={student.id} value={student.id}>\n//                       {`${student.firstname} ${student.lastname}`}\n//                     </option>\n//                   ))}\n//             </select>\n//           </label>\n//           <br />\n//           <button type=\"submit\">Add to Campus</button>\n//         </form>\n//       )}\n\n//       <br />\n//       <Link to={`/editcampus/${campus.id}`}>\n//         <button>Edit Campus</button>\n//       </Link>\n//     </div>\n//   );\n// };\n\n// export default CampusView;\n\nimport { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { addStudentThunk } from \"../../store/thunks\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CampusView = props => {\n  _s();\n  const {\n    campus,\n    allStudents,\n    updateStudent,\n    removeStudentFromCampus,\n    fetchCampus\n  } = props;\n  const [showNewStudentForm, setShowNewStudentForm] = useState(false);\n  const [newStudent, setNewStudent] = useState({\n    firstname: \"\",\n    lastname: \"\",\n    email: \"\",\n    gpa: \"\",\n    campusId: campus.id // Pre-select campus ID\n  });\n\n  // Handle form submission for adding a new student\n  const handleNewStudentSubmit = async e => {\n    e.preventDefault();\n    const addedStudent = await addStudentThunk(newStudent); // API call\n    if (addedStudent) {\n      // Reset the form and close it\n      setNewStudent({\n        firstname: \"\",\n        lastname: \"\",\n        email: \"\",\n        gpa: \"\",\n        campusId: campus.id\n      });\n      setShowNewStudentForm(false);\n      await fetchCampus(campus.id); // Re-fetch updated campus data\n    }\n  };\n\n  // Handle removing a student with confirmation\n  //   const handleRemoveStudent = async (studentId) => {\n  //     const confirmation = window.confirm(\"Are you sure you want to remove this student?\");\n  //     if (confirmation) {\n  //       await removeStudentFromCampus(studentId, campus.id); // Remove the student\n  //       await fetchCampus(campus.id); // Re-fetch the updated campus data\n  //     }\n  //   };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: campus.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: campus.address\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: campus.description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      src: campus.imageUrl || \"https://via.placeholder.com/150\",\n      alt: `${campus.name} campus`,\n      style: {\n        width: \"300px\",\n        height: \"auto\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Enrolled Students:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 7\n    }, this), campus.students && campus.students.length > 0 ? campus.students.map(student => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Link, {\n        to: `/student/${student.id}`,\n        children: /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: `${student.firstname} ${student.lastname}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleRemoveStudent(student.id),\n        children: \"Remove Student\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 13\n      }, this)]\n    }, student.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 11\n    }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No students are currently enrolled at this campus.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setShowNewStudentForm(!showNewStudentForm),\n      children: showNewStudentForm ? \"Cancel Add New Student\" : \"Add New Student\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 7\n    }, this), showNewStudentForm && /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleNewStudentSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Add New Student\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"First Name:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: newStudent.firstname,\n          onChange: e => setNewStudent({\n            ...newStudent,\n            firstname: e.target.value\n          }),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Last Name:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: newStudent.lastname,\n          onChange: e => setNewStudent({\n            ...newStudent,\n            lastname: e.target.value\n          }),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Email:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"email\",\n          value: newStudent.email,\n          onChange: e => setNewStudent({\n            ...newStudent,\n            email: e.target.value\n          }),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"GPA:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          step: \"0.01\",\n          value: newStudent.gpa,\n          onChange: e => setNewStudent({\n            ...newStudent,\n            gpa: e.target.value\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 305,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Add Student\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 317,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Link, {\n      to: `/editcampus/${campus.id}`,\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Edit Campus\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 319,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 318,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 235,\n    columnNumber: 5\n  }, this);\n};\n_s(CampusView, \"Xtil7mJ/nEFfnlyEFlzyzYp2GHA=\");\n_c = CampusView;\nexport default CampusView;\nvar _c;\n$RefreshReg$(_c, \"CampusView\");","map":{"version":3,"names":["useState","Link","addStudentThunk","jsxDEV","_jsxDEV","CampusView","props","_s","campus","allStudents","updateStudent","removeStudentFromCampus","fetchCampus","showNewStudentForm","setShowNewStudentForm","newStudent","setNewStudent","firstname","lastname","email","gpa","campusId","id","handleNewStudentSubmit","e","preventDefault","addedStudent","children","name","fileName","_jsxFileName","lineNumber","columnNumber","address","description","src","imageUrl","alt","style","width","height","students","length","map","student","to","onClick","handleRemoveStudent","onSubmit","type","value","onChange","target","required","step","_c","$RefreshReg$"],"sources":["/Users/adelinadautovic/Full-Stack-CRUD-Application-Client/src/components/views/CampusView.js"],"sourcesContent":["// /*==================================================\n// CampusView.js\n\n// The Views component is responsible for rendering web page with data provided by the corresponding Container component.\n// It constructs a React component to display a single campus and its students (if any).\n// ================================================== */\n\n\n// import { useState } from \"react\";\n// import { Link } from \"react-router-dom\";\n// import { addStudentThunk } from \"../../store/thunks\";\n\n// const CampusView = (props) => {\n//   const {\n//     campus,\n//     allStudents,\n//     updateStudent,\n//     removeStudentFromCampus,\n//     fetchCampus,\n//   } = props;\n\n//   // Track whether to show the forms\n//   const [showNewStudentForm, setShowNewStudentForm] = useState(false);\n//   const [showExistingStudentForm, setShowExistingStudentForm] = useState(false);\n\n//   // Handle new student form state\n//   const [newStudent, setNewStudent] = useState({\n//     firstname: \"\",\n//     lastname: \"\",\n//     email: \"\",\n//     gpa: \"\",\n//     campusId: campus.id,\n//   });\n\n//   const [selectedStudent, setSelectedStudent] = useState(\"\");\n\n//   // Handle new student form submission\n//   const handleNewStudentSubmit = async (e) => {\n//     e.preventDefault();\n//     const addedStudent = await addStudentThunk(newStudent); // Call the thunk\n//     if (addedStudent) {\n//       setNewStudent({ firstname: \"\", lastname: \"\", email: \"\", gpa: \"\", campusId: campus.id });\n//       setShowNewStudentForm(false); // Hide the form\n//     }\n//   };\n\n//   // Handle adding existing student\n//   const handleAddExistingStudent = (e) => {\n//     e.preventDefault();\n//     if (selectedStudent) {\n//       updateStudent(selectedStudent, { campusId: campus.id });\n//       setSelectedStudent(\"\");\n//       setShowExistingStudentForm(false); // Hide the form after submission\n//     }\n//   };\n\n//   // Handle removing a student with confirmation\n//   const handleRemoveStudent = async (studentId) => {\n//     const confirmation = window.confirm(\"Are you sure you want to remove this student?\");\n//     if (confirmation) {\n//       await removeStudentFromCampus(studentId, campus.id); // Remove the student\n//       await fetchCampus(campus.id); // Re-fetch the updated campus data\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h1>{campus.name}</h1>\n//       <p>{campus.address}</p>\n//       <p>{campus.description}</p>\n//       <img\n//         src={campus.imageUrl || \"https://via.placeholder.com/150\"}\n//         alt={`${campus.name} campus`}\n//         style={{ width: \"300px\", height: \"auto\" }}\n//       />\n//       <br />\n\n//       <h2>Enrolled Students:</h2>\n//       {campus.students && campus.students.length > 0 ? (\n//         campus.students.map((student) => (\n//           <div key={student.id}>\n//             <Link to={`/student/${student.id}`}>\n//               <h3>{`${student.firstname} ${student.lastname}`}</h3>\n//             </Link>\n//             <button onClick={() => handleRemoveStudent(student.id)}>\n//               Remove Student\n//             </button>\n//           </div>\n//         ))\n//       ) : (\n//         <p>No students are currently enrolled at this campus.</p>\n//       )}\n\n//       <br />\n\n//       {/* Buttons to trigger the forms */}\n//       <button onClick={() => setShowNewStudentForm(!showNewStudentForm)}>\n//         {showNewStudentForm ? \"Cancel Add New Student\" : \"Add New Student\"}\n//       </button>\n//       <br />\n//       <button onClick={() => setShowExistingStudentForm(!showExistingStudentForm)}>\n//         {showExistingStudentForm ? \"Cancel Add Existing Student\" : \"Add Existing Student\"}\n//       </button>\n\n//       {/* New Student Form */}\n//       {showNewStudentForm && (\n//         <form onSubmit={handleNewStudentSubmit}>\n//           <h2>Add New Student</h2>\n//           <label>\n//             First Name:\n//             <input\n//               type=\"text\"\n//               value={newStudent.firstname}\n//               onChange={(e) => setNewStudent({ ...newStudent, firstname: e.target.value })}\n//               required\n//             />\n//           </label>\n//           <br />\n//           <label>\n//             Last Name:\n//             <input\n//               type=\"text\"\n//               value={newStudent.lastname}\n//               onChange={(e) => setNewStudent({ ...newStudent, lastname: e.target.value })}\n//               required\n//             />\n//           </label>\n//           <br />\n//           <label>\n//             Email:\n//             <input\n//               type=\"email\"\n//               value={newStudent.email}\n//               onChange={(e) => setNewStudent({ ...newStudent, email: e.target.value })}\n//               required\n//             />\n//           </label>\n//           <br />\n//           <label>\n//             GPA:\n//             <input\n//               type=\"number\"\n//               step=\"0.01\"\n//               value={newStudent.gpa}\n//               onChange={(e) => setNewStudent({ ...newStudent, gpa: e.target.value })}\n//             />\n//           </label>\n//           <br />\n//           <button type=\"submit\">Add Student</button>\n//         </form>\n//       )}\n\n//       {/* Existing Student Dropdown */}\n//       {showExistingStudentForm && (\n//         <form onSubmit={handleAddExistingStudent}>\n//           <h2>Add Existing Student</h2>\n//           <label>\n//             Select Student:\n//             <select\n//               value={selectedStudent}\n//               onChange={(e) => setSelectedStudent(e.target.value)}\n//               required\n//             >\n//               <option value=\"\">-- Select a Student --</option>\n//               {allStudents &&\n//                 allStudents\n//                   .filter((student) => !student.campusId) // Only show students not already enrolled\n//                   .map((student) => (\n//                     <option key={student.id} value={student.id}>\n//                       {`${student.firstname} ${student.lastname}`}\n//                     </option>\n//                   ))}\n//             </select>\n//           </label>\n//           <br />\n//           <button type=\"submit\">Add to Campus</button>\n//         </form>\n//       )}\n\n//       <br />\n//       <Link to={`/editcampus/${campus.id}`}>\n//         <button>Edit Campus</button>\n//       </Link>\n//     </div>\n//   );\n// };\n\n// export default CampusView;\n\n\nimport { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { addStudentThunk } from \"../../store/thunks\";\n\nconst CampusView = (props) => {\n  const {\n    campus,\n    allStudents,\n    updateStudent,\n    removeStudentFromCampus,\n    fetchCampus,\n  } = props;\n\n  const [showNewStudentForm, setShowNewStudentForm] = useState(false);\n  const [newStudent, setNewStudent] = useState({\n    firstname: \"\",\n    lastname: \"\",\n    email: \"\",\n    gpa: \"\",\n    campusId: campus.id, // Pre-select campus ID\n  });\n\n  // Handle form submission for adding a new student\n  const handleNewStudentSubmit = async (e) => {\n    e.preventDefault();\n    const addedStudent = await addStudentThunk(newStudent); // API call\n    if (addedStudent) {\n      // Reset the form and close it\n      setNewStudent({ firstname: \"\", lastname: \"\", email: \"\", gpa: \"\", campusId: campus.id });\n      setShowNewStudentForm(false);\n      await fetchCampus(campus.id); // Re-fetch updated campus data\n    }\n  };\n\n   // Handle removing a student with confirmation\n//   const handleRemoveStudent = async (studentId) => {\n//     const confirmation = window.confirm(\"Are you sure you want to remove this student?\");\n//     if (confirmation) {\n//       await removeStudentFromCampus(studentId, campus.id); // Remove the student\n//       await fetchCampus(campus.id); // Re-fetch the updated campus data\n//     }\n//   };\n\n  return (\n    <div>\n      <h1>{campus.name}</h1>\n      <p>{campus.address}</p>\n      <p>{campus.description}</p>\n      <img\n        src={campus.imageUrl || \"https://via.placeholder.com/150\"}\n        alt={`${campus.name} campus`}\n        style={{ width: \"300px\", height: \"auto\" }}\n      />\n      <br />\n\n      <h2>Enrolled Students:</h2>\n      {campus.students && campus.students.length > 0 ? (\n        campus.students.map((student) => (\n          <div key={student.id}>\n            <Link to={`/student/${student.id}`}>\n              <h3>{`${student.firstname} ${student.lastname}`}</h3>\n            </Link>\n            <button onClick={() => handleRemoveStudent(student.id)}>\n              Remove Student\n            </button>\n          </div>\n        ))\n      ) : (\n        <p>No students are currently enrolled at this campus.</p>\n      )}\n\n      <br />\n\n      {/* Add New Student Button */}\n      <button onClick={() => setShowNewStudentForm(!showNewStudentForm)}>\n        {showNewStudentForm ? \"Cancel Add New Student\" : \"Add New Student\"}\n      </button>\n\n      {/* New Student Form */}\n      {showNewStudentForm && (\n        <form onSubmit={handleNewStudentSubmit}>\n          <h2>Add New Student</h2>\n          <label>\n            First Name:\n            <input\n              type=\"text\"\n              value={newStudent.firstname}\n              onChange={(e) => setNewStudent({ ...newStudent, firstname: e.target.value })}\n              required\n            />\n          </label>\n          <br />\n          <label>\n            Last Name:\n            <input\n              type=\"text\"\n              value={newStudent.lastname}\n              onChange={(e) => setNewStudent({ ...newStudent, lastname: e.target.value })}\n              required\n            />\n          </label>\n          <br />\n          <label>\n            Email:\n            <input\n              type=\"email\"\n              value={newStudent.email}\n              onChange={(e) => setNewStudent({ ...newStudent, email: e.target.value })}\n              required\n            />\n          </label>\n          <br />\n          <label>\n            GPA:\n            <input\n              type=\"number\"\n              step=\"0.01\"\n              value={newStudent.gpa}\n              onChange={(e) => setNewStudent({ ...newStudent, gpa: e.target.value })}\n            />\n          </label>\n          <br />\n          <button type=\"submit\">Add Student</button>\n        </form>\n      )}\n\n      <br />\n      <Link to={`/editcampus/${campus.id}`}>\n        <button>Edit Campus</button>\n      </Link>\n    </div>\n  );\n};\n\nexport default CampusView;\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA,SAASA,QAAQ,QAAQ,OAAO;AAChC,SAASC,IAAI,QAAQ,kBAAkB;AACvC,SAASC,eAAe,QAAQ,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErD,MAAMC,UAAU,GAAIC,KAAK,IAAK;EAAAC,EAAA;EAC5B,MAAM;IACJC,MAAM;IACNC,WAAW;IACXC,aAAa;IACbC,uBAAuB;IACvBC;EACF,CAAC,GAAGN,KAAK;EAET,MAAM,CAACO,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGd,QAAQ,CAAC,KAAK,CAAC;EACnE,MAAM,CAACe,UAAU,E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","ignoreList":[]},"metadata":{},"sourceType":"module"}