{"ast":null,"code":"// /*==================================================\n// NewStudentContainer.js\n\n// The Container component is responsible for stateful logic and data fetching, and\n// passes data (if any) as props to the corresponding View component.\n// If needed, it also defines the component's \"connect\" function.\n// ================================================== */\n// import Header from './Header';\n// import { Component } from 'react';\n// import { connect } from 'react-redux';\n// import { Redirect } from 'react-router-dom';\n\n// import NewStudentView from '../views/NewStudentView';\n// import { addStudentThunk } from '../../store/thunks';\n\n// class NewStudentContainer extends Component {\n//   // Initialize state\n//   constructor(props){\n//     super(props);\n//     this.state = {\n//       firstname: \"\", \n//       lastname: \"\", \n//       campusId: null, \n//       redirect: false, \n//       redirectId: null\n//     };\n//   }\n\n//   // Capture input data when it is entered\n//   handleChange = event => {\n//     this.setState({\n//       [event.target.name]: event.target.value\n//     });\n//   }\n\n//   // Take action after user click the submit button\n//   handleSubmit = async event => {\n//     event.preventDefault();  // Prevent browser reload/refresh after submit.\n\n//     let student = {\n//         firstname: this.state.firstname,\n//         lastname: this.state.lastname,\n//         campusId: this.state.campusId\n//     };\n\n//     // Add new student in back-end database\n//     let newStudent = await this.props.addStudent(student);\n\n//     // Update state, and trigger redirect to show the new student\n//     this.setState({\n//       firstname: \"\", \n//       lastname: \"\", \n//       campusId: null, \n//       redirect: true, \n//       redirectId: newStudent.id\n//     });\n//   }\n\n//   // Unmount when the component is being removed from the DOM:\n//   componentWillUnmount() {\n//       this.setState({redirect: false, redirectId: null});\n//   }\n\n//   // Render new student input form\n//   render() {\n//     // Redirect to new student's page after submit\n//     if(this.state.redirect) {\n//       return (<Redirect to={`/student/${this.state.redirectId}`}/>)\n//     }\n\n//     // Display the input form via the corresponding View component\n//     return (\n//       <div>\n//         <Header />\n//         <NewStudentView \n//           handleChange = {this.handleChange} \n//           handleSubmit={this.handleSubmit}      \n//         />\n//       </div>          \n//     );\n//   }\n// }\n\n// // The following input argument is passed to the \"connect\" function used by \"NewStudentContainer\" component to connect to Redux Store.\n// // The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// // The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\n// const mapDispatch = (dispatch) => {\n//     return({\n//         addStudent: (student) => dispatch(addStudentThunk(student)),\n//     })\n// }\n\n// // Export store-connected container by default\n// // NewStudentContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// // (and re-read the values when the Store State updates).\n// export default connect(null, mapDispatch)(NewStudentContainer);\n\n/*==================================================\nNewStudentContainer.js\n\nThe Container component is responsible for stateful logic and data fetching, and\npasses data (if any) as props to the corresponding View component.\nIf needed, it also defines the component's \"connect\" function.\n================================================== */\n// import React, { Component } from 'react';\n// import Header from './Header';\n// import { connect } from 'react-redux';\n// import { Redirect } from 'react-router-dom';\n// import NewStudentView from '../views/NewStudentView';\n// import { addStudentThunk, fetchAllStudentsThunk } from '../../store/thunks'; // Import the fetch action\n\n// class NewStudentContainer extends Component {\n//   // Initialize state\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       firstname: \"\",\n//       lastname: \"\",\n//       email: \"\",\n//       gpa: \"\",\n//       campusId: null,\n//       imageUrl: \"\",\n//       redirect: false,\n//       redirectId: null,\n//       errors: {}, // To handle form errors\n//     };\n//   }\n\n//   // Capture input data when it is entered\n//   handleChange = event => {\n//     this.setState({\n//       [event.target.name]: event.target.value\n//     });\n//   }\n\n//   // Take action after user clicks the submit button\n//   handleSubmit = async event => {\n//     event.preventDefault();  // Prevent browser reload/refresh after submit.\n\n//     const { firstname, lastname, email, gpa, campusId, imageUrl } = this.state;\n//     let student = {\n//       firstname,\n//       lastname,\n//       email,\n//       gpa,\n//       campusId,\n//       imageUrl\n//     };\n\n//     try {\n//       // Add new student in back-end database\n//       let newStudent = await this.props.addStudent(student);\n\n//       // Update state, and trigger redirect to show the new student\n//       this.setState({\n//         firstname: \"\",\n//         lastname: \"\",\n//         email: \"\",\n//         gpa: \"\",\n//         campusId: null,\n//         imageUrl: \"\",\n//         redirect: true,\n//         redirectId: newStudent.id\n//       });\n//     } catch (error) {\n//       // Handle errors from the API\n//       if (error.response && error.response.data.errors) {\n//         this.setState({ errors: error.response.data.errors });\n//       } else {\n//         console.error('There was an error adding the student!', error);\n//         this.setState({ errors: { general: 'An error occurred. Please try again.' } });\n//       }\n//     }\n//   }\n\n//   // Fetch students when the component mounts\n//   componentDidMount() {\n//     this.props.fetchAllStudents(); // Fetch students from the database\n//   }\n\n//   // Unmount when the component is being removed from the DOM:\n//   componentWillUnmount() {\n//     this.setState({ redirect: false, redirectId: null });\n//   }\n\n//   // Render new student input form\n//   render() {\n//     // Redirect to new student's page after submit\n//     if (this.state.redirect) {\n//       return (<Redirect to={`/student/${this.state.redirectId}`} />);\n//     }\n\n//     // Display the input form via the corresponding View component\n//     return (\n//       <div>\n//         <Header />\n//         <NewStudentView\n//           handleChange={this.handleChange}\n//           handleSubmit={this.handleSubmit}\n//           studentData={this.state} // Pass the state to the view for controlled inputs\n//           errors={this.state.errors} // Pass errors to the view if needed\n//         />\n//       </div>\n//     );\n//   }\n// }\n\n// // Map dispatch to props\n// const mapDispatch = (dispatch) => {\n//   return {\n//     addStudent: (student) => dispatch(addStudentThunk(student)),\n//     fetchAllStudents: () => dispatch(fetchAllStudentsThunk()), // Add fetch action\n//   };\n// }\n\n// // Export store-connected container by default\n// export default connect(null, mapDispatch)(NewStudentContainer);","map":{"version":3,"names":[],"sources":["/Users/adelinadautovic/Full-Stack-CRUD-Application-Client/src/components/containers/NewStudentContainer.js"],"sourcesContent":["// /*==================================================\n// NewStudentContainer.js\n\n// The Container component is responsible for stateful logic and data fetching, and\n// passes data (if any) as props to the corresponding View component.\n// If needed, it also defines the component's \"connect\" function.\n// ================================================== */\n// import Header from './Header';\n// import { Component } from 'react';\n// import { connect } from 'react-redux';\n// import { Redirect } from 'react-router-dom';\n\n// import NewStudentView from '../views/NewStudentView';\n// import { addStudentThunk } from '../../store/thunks';\n\n// class NewStudentContainer extends Component {\n//   // Initialize state\n//   constructor(props){\n//     super(props);\n//     this.state = {\n//       firstname: \"\", \n//       lastname: \"\", \n//       campusId: null, \n//       redirect: false, \n//       redirectId: null\n//     };\n//   }\n\n//   // Capture input data when it is entered\n//   handleChange = event => {\n//     this.setState({\n//       [event.target.name]: event.target.value\n//     });\n//   }\n\n//   // Take action after user click the submit button\n//   handleSubmit = async event => {\n//     event.preventDefault();  // Prevent browser reload/refresh after submit.\n\n//     let student = {\n//         firstname: this.state.firstname,\n//         lastname: this.state.lastname,\n//         campusId: this.state.campusId\n//     };\n    \n//     // Add new student in back-end database\n//     let newStudent = await this.props.addStudent(student);\n\n//     // Update state, and trigger redirect to show the new student\n//     this.setState({\n//       firstname: \"\", \n//       lastname: \"\", \n//       campusId: null, \n//       redirect: true, \n//       redirectId: newStudent.id\n//     });\n//   }\n\n//   // Unmount when the component is being removed from the DOM:\n//   componentWillUnmount() {\n//       this.setState({redirect: false, redirectId: null});\n//   }\n\n//   // Render new student input form\n//   render() {\n//     // Redirect to new student's page after submit\n//     if(this.state.redirect) {\n//       return (<Redirect to={`/student/${this.state.redirectId}`}/>)\n//     }\n\n//     // Display the input form via the corresponding View component\n//     return (\n//       <div>\n//         <Header />\n//         <NewStudentView \n//           handleChange = {this.handleChange} \n//           handleSubmit={this.handleSubmit}      \n//         />\n//       </div>          \n//     );\n//   }\n// }\n\n// // The following input argument is passed to the \"connect\" function used by \"NewStudentContainer\" component to connect to Redux Store.\n// // The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// // The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\n// const mapDispatch = (dispatch) => {\n//     return({\n//         addStudent: (student) => dispatch(addStudentThunk(student)),\n//     })\n// }\n\n// // Export store-connected container by default\n// // NewStudentContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// // (and re-read the values when the Store State updates).\n// export default connect(null, mapDispatch)(NewStudentContainer);\n\n\n\n\n\n\n\n\n\n\n\n/*==================================================\nNewStudentContainer.js\n\nThe Container component is responsible for stateful logic and data fetching, and\npasses data (if any) as props to the corresponding View component.\nIf needed, it also defines the component's \"connect\" function.\n================================================== */\n// import React, { Component } from 'react';\n// import Header from './Header';\n// import { connect } from 'react-redux';\n// import { Redirect } from 'react-router-dom';\n// import NewStudentView from '../views/NewStudentView';\n// import { addStudentThunk, fetchAllStudentsThunk } from '../../store/thunks'; // Import the fetch action\n\n// class NewStudentContainer extends Component {\n//   // Initialize state\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       firstname: \"\",\n//       lastname: \"\",\n//       email: \"\",\n//       gpa: \"\",\n//       campusId: null,\n//       imageUrl: \"\",\n//       redirect: false,\n//       redirectId: null,\n//       errors: {}, // To handle form errors\n//     };\n//   }\n\n//   // Capture input data when it is entered\n//   handleChange = event => {\n//     this.setState({\n//       [event.target.name]: event.target.value\n//     });\n//   }\n\n//   // Take action after user clicks the submit button\n//   handleSubmit = async event => {\n//     event.preventDefault();  // Prevent browser reload/refresh after submit.\n\n//     const { firstname, lastname, email, gpa, campusId, imageUrl } = this.state;\n//     let student = {\n//       firstname,\n//       lastname,\n//       email,\n//       gpa,\n//       campusId,\n//       imageUrl\n//     };\n\n//     try {\n//       // Add new student in back-end database\n//       let newStudent = await this.props.addStudent(student);\n\n//       // Update state, and trigger redirect to show the new student\n//       this.setState({\n//         firstname: \"\",\n//         lastname: \"\",\n//         email: \"\",\n//         gpa: \"\",\n//         campusId: null,\n//         imageUrl: \"\",\n//         redirect: true,\n//         redirectId: newStudent.id\n//       });\n//     } catch (error) {\n//       // Handle errors from the API\n//       if (error.response && error.response.data.errors) {\n//         this.setState({ errors: error.response.data.errors });\n//       } else {\n//         console.error('There was an error adding the student!', error);\n//         this.setState({ errors: { general: 'An error occurred. Please try again.' } });\n//       }\n//     }\n//   }\n\n//   // Fetch students when the component mounts\n//   componentDidMount() {\n//     this.props.fetchAllStudents(); // Fetch students from the database\n//   }\n\n//   // Unmount when the component is being removed from the DOM:\n//   componentWillUnmount() {\n//     this.setState({ redirect: false, redirectId: null });\n//   }\n\n//   // Render new student input form\n//   render() {\n//     // Redirect to new student's page after submit\n//     if (this.state.redirect) {\n//       return (<Redirect to={`/student/${this.state.redirectId}`} />);\n//     }\n\n//     // Display the input form via the corresponding View component\n//     return (\n//       <div>\n//         <Header />\n//         <NewStudentView\n//           handleChange={this.handleChange}\n//           handleSubmit={this.handleSubmit}\n//           studentData={this.state} // Pass the state to the view for controlled inputs\n//           errors={this.state.errors} // Pass errors to the view if needed\n//         />\n//       </div>\n//     );\n//   }\n// }\n\n// // Map dispatch to props\n// const mapDispatch = (dispatch) => {\n//   return {\n//     addStudent: (student) => dispatch(addStudentThunk(student)),\n//     fetchAllStudents: () => dispatch(fetchAllStudentsThunk()), // Add fetch action\n//   };\n// }\n\n// // Export store-connected container by default\n// export default connect(null, mapDispatch)(NewStudentContainer);\n\n\n\n\n\n"],"mappings":"AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module"}