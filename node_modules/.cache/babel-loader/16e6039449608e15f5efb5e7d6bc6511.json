{"ast":null,"code":"var _jsxFileName = \"/Users/adelinadautovic/Full-Stack-CRUD-Application-Client/src/components/containers/NewStudentContainer.js\";\n// /*==================================================\n// NewStudentContainer.js\n\n// The Container component is responsible for stateful logic and data fetching, and\n// passes data (if any) as props to the corresponding View component.\n// If needed, it also defines the component's \"connect\" function.\n// ================================================== */\n// import Header from './Header';\n// import { Component } from 'react';\n// import { connect } from 'react-redux';\n// import { Redirect } from 'react-router-dom';\n\n// import NewStudentView from '../views/NewStudentView';\n// import { addStudentThunk } from '../../store/thunks';\n\n// class NewStudentContainer extends Component {\n//   // Initialize state\n//   constructor(props){\n//     super(props);\n//     this.state = {\n//       firstname: \"\", \n//       lastname: \"\", \n//       campusId: null, \n//       redirect: false, \n//       redirectId: null\n//     };\n//   }\n\n//   // Capture input data when it is entered\n//   handleChange = event => {\n//     this.setState({\n//       [event.target.name]: event.target.value\n//     });\n//   }\n\n//   // Take action after user click the submit button\n//   handleSubmit = async event => {\n//     event.preventDefault();  // Prevent browser reload/refresh after submit.\n\n//     let student = {\n//         firstname: this.state.firstname,\n//         lastname: this.state.lastname,\n//         campusId: this.state.campusId\n//     };\n\n//     // Add new student in back-end database\n//     let newStudent = await this.props.addStudent(student);\n\n//     // Update state, and trigger redirect to show the new student\n//     this.setState({\n//       firstname: \"\", \n//       lastname: \"\", \n//       campusId: null, \n//       redirect: true, \n//       redirectId: newStudent.id\n//     });\n//   }\n\n//   // Unmount when the component is being removed from the DOM:\n//   componentWillUnmount() {\n//       this.setState({redirect: false, redirectId: null});\n//   }\n\n//   // Render new student input form\n//   render() {\n//     // Redirect to new student's page after submit\n//     if(this.state.redirect) {\n//       return (<Redirect to={`/student/${this.state.redirectId}`}/>)\n//     }\n\n//     // Display the input form via the corresponding View component\n//     return (\n//       <div>\n//         <Header />\n//         <NewStudentView \n//           handleChange = {this.handleChange} \n//           handleSubmit={this.handleSubmit}      \n//         />\n//       </div>          \n//     );\n//   }\n// }\n\n// // The following input argument is passed to the \"connect\" function used by \"NewStudentContainer\" component to connect to Redux Store.\n// // The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// // The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\n// const mapDispatch = (dispatch) => {\n//     return({\n//         addStudent: (student) => dispatch(addStudentThunk(student)),\n//     })\n// }\n\n// // Export store-connected container by default\n// // NewStudentContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// // (and re-read the values when the Store State updates).\n// export default connect(null, mapDispatch)(NewStudentContainer);\n\n/*==================================================\nNewStudentContainer.js\n\nThe Container component is responsible for stateful logic and data fetching, and\npasses data (if any) as props to the corresponding View component.\nIf needed, it also defines the component's \"connect\" function.\n================================================== */\nimport React, { Component } from 'react';\nimport Header from './Header';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport NewStudentView from '../views/NewStudentView';\nimport { addStudentThunk, fetchAllStudentsThunk } from '../../store/thunks'; // Import the fetch action\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass NewStudentContainer extends Component {\n  // Initialize state\n  constructor(props) {\n    super(props);\n    // Capture input data when it is entered\n    this.handleChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n    // Take action after user clicks the submit button\n    this.handleSubmit = async event => {\n      event.preventDefault(); // Prevent browser reload/refresh after submit.\n\n      const {\n        firstname,\n        lastname,\n        email,\n        gpa,\n        campusId,\n        imageUrl\n      } = this.state;\n      let student = {\n        firstname,\n        lastname,\n        email,\n        gpa,\n        campusId,\n        imageUrl\n      };\n      try {\n        // Add new student in back-end database\n        let newStudent = await this.props.addStudent(student);\n\n        // Update state, and trigger redirect to show the new student\n        this.setState({\n          firstname: \"\",\n          lastname: \"\",\n          email: \"\",\n          gpa: \"\",\n          campusId: null,\n          imageUrl: \"\",\n          redirect: true,\n          redirectId: newStudent.id\n        });\n      } catch (error) {\n        // Handle errors from the API\n        if (error.response && error.response.data.errors) {\n          this.setState({\n            errors: error.response.data.errors\n          });\n        } else {\n          console.error('There was an error adding the student!', error);\n          this.setState({\n            errors: {\n              general: 'An error occurred. Please try again.'\n            }\n          });\n        }\n      }\n    };\n    this.state = {\n      firstname: \"\",\n      lastname: \"\",\n      email: \"\",\n      gpa: \"\",\n      campusId: null,\n      imageUrl: \"\",\n      redirect: false,\n      redirectId: null,\n      errors: {} // To handle form errors\n    };\n  }\n  // Fetch students when the component mounts\n  componentDidMount() {\n    this.props.fetchAllStudents(); // Fetch students from the database\n  }\n\n  // Unmount when the component is being removed from the DOM:\n  componentWillUnmount() {\n    this.setState({\n      redirect: false,\n      redirectId: null\n    });\n  }\n\n  // Render new student input form\n  render() {\n    // Redirect to new student's page after submit\n    if (this.state.redirect) {\n      return /*#__PURE__*/_jsxDEV(Redirect, {\n        to: `/student/${this.state.redirectId}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 15\n      }, this);\n    }\n\n    // Display the input form via the corresponding View component\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(NewStudentView, {\n        handleChange: this.handleChange,\n        handleSubmit: this.handleSubmit,\n        studentData: this.state // Pass the state to the view for controlled inputs\n        ,\n        errors: this.state.errors // Pass errors to the view if needed\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 7\n    }, this);\n  }\n}\n\n// Map dispatch to props\nconst mapDispatch = dispatch => {\n  return {\n    addStudent: student => dispatch(addStudentThunk(student)),\n    fetchAllStudents: () => dispatch(fetchAllStudentsThunk()) // Add fetch action\n  };\n};\n\n// Export store-connected container by default\nexport default connect(null, mapDispatch)(NewStudentContainer);","map":{"version":3,"names":["React","Component","Header","connect","Redirect","NewStudentView","addStudentThunk","fetchAllStudentsThunk","jsxDEV","_jsxDEV","NewStudentContainer","constructor","props","handleChange","event","setState","target","name","value","handleSubmit","preventDefault","firstname","lastname","email","gpa","campusId","imageUrl","state","student","newStudent","addStudent","redirect","redirectId","id","error","response","data","errors","console","general","componentDidMount","fetchAllStudents","componentWillUnmount","render","to","fileName","_jsxFileName","lineNumber","columnNumber","children","studentData","mapDispatch","dispatch"],"sources":["/Users/adelinadautovic/Full-Stack-CRUD-Application-Client/src/components/containers/NewStudentContainer.js"],"sourcesContent":["// /*==================================================\n// NewStudentContainer.js\n\n// The Container component is responsible for stateful logic and data fetching, and\n// passes data (if any) as props to the corresponding View component.\n// If needed, it also defines the component's \"connect\" function.\n// ================================================== */\n// import Header from './Header';\n// import { Component } from 'react';\n// import { connect } from 'react-redux';\n// import { Redirect } from 'react-router-dom';\n\n// import NewStudentView from '../views/NewStudentView';\n// import { addStudentThunk } from '../../store/thunks';\n\n// class NewStudentContainer extends Component {\n//   // Initialize state\n//   constructor(props){\n//     super(props);\n//     this.state = {\n//       firstname: \"\", \n//       lastname: \"\", \n//       campusId: null, \n//       redirect: false, \n//       redirectId: null\n//     };\n//   }\n\n//   // Capture input data when it is entered\n//   handleChange = event => {\n//     this.setState({\n//       [event.target.name]: event.target.value\n//     });\n//   }\n\n//   // Take action after user click the submit button\n//   handleSubmit = async event => {\n//     event.preventDefault();  // Prevent browser reload/refresh after submit.\n\n//     let student = {\n//         firstname: this.state.firstname,\n//         lastname: this.state.lastname,\n//         campusId: this.state.campusId\n//     };\n    \n//     // Add new student in back-end database\n//     let newStudent = await this.props.addStudent(student);\n\n//     // Update state, and trigger redirect to show the new student\n//     this.setState({\n//       firstname: \"\", \n//       lastname: \"\", \n//       campusId: null, \n//       redirect: true, \n//       redirectId: newStudent.id\n//     });\n//   }\n\n//   // Unmount when the component is being removed from the DOM:\n//   componentWillUnmount() {\n//       this.setState({redirect: false, redirectId: null});\n//   }\n\n//   // Render new student input form\n//   render() {\n//     // Redirect to new student's page after submit\n//     if(this.state.redirect) {\n//       return (<Redirect to={`/student/${this.state.redirectId}`}/>)\n//     }\n\n//     // Display the input form via the corresponding View component\n//     return (\n//       <div>\n//         <Header />\n//         <NewStudentView \n//           handleChange = {this.handleChange} \n//           handleSubmit={this.handleSubmit}      \n//         />\n//       </div>          \n//     );\n//   }\n// }\n\n// // The following input argument is passed to the \"connect\" function used by \"NewStudentContainer\" component to connect to Redux Store.\n// // The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// // The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\n// const mapDispatch = (dispatch) => {\n//     return({\n//         addStudent: (student) => dispatch(addStudentThunk(student)),\n//     })\n// }\n\n// // Export store-connected container by default\n// // NewStudentContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// // (and re-read the values when the Store State updates).\n// export default connect(null, mapDispatch)(NewStudentContainer);\n\n/*==================================================\nNewStudentContainer.js\n\nThe Container component is responsible for stateful logic and data fetching, and\npasses data (if any) as props to the corresponding View component.\nIf needed, it also defines the component's \"connect\" function.\n================================================== */\nimport React, { Component } from 'react';\nimport Header from './Header';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport NewStudentView from '../views/NewStudentView';\nimport { addStudentThunk, fetchAllStudentsThunk } from '../../store/thunks'; // Import the fetch action\n\nclass NewStudentContainer extends Component {\n  // Initialize state\n  constructor(props) {\n    super(props);\n    this.state = {\n      firstname: \"\",\n      lastname: \"\",\n      email: \"\",\n      gpa: \"\",\n      campusId: null,\n      imageUrl: \"\",\n      redirect: false,\n      redirectId: null,\n      errors: {}, // To handle form errors\n    };\n  }\n\n  // Capture input data when it is entered\n  handleChange = event => {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  }\n\n  // Take action after user clicks the submit button\n  handleSubmit = async event => {\n    event.preventDefault();  // Prevent browser reload/refresh after submit.\n\n    const { firstname, lastname, email, gpa, campusId, imageUrl } = this.state;\n    let student = {\n      firstname,\n      lastname,\n      email,\n      gpa,\n      campusId,\n      imageUrl\n    };\n\n    try {\n      // Add new student in back-end database\n      let newStudent = await this.props.addStudent(student);\n\n      // Update state, and trigger redirect to show the new student\n      this.setState({\n        firstname: \"\",\n        lastname: \"\",\n        email: \"\",\n        gpa: \"\",\n        campusId: null,\n        imageUrl: \"\",\n        redirect: true,\n        redirectId: newStudent.id\n      });\n    } catch (error) {\n      // Handle errors from the API\n      if (error.response && error.response.data.errors) {\n        this.setState({ errors: error.response.data.errors });\n      } else {\n        console.error('There was an error adding the student!', error);\n        this.setState({ errors: { general: 'An error occurred. Please try again.' } });\n      }\n    }\n  }\n\n  // Fetch students when the component mounts\n  componentDidMount() {\n    this.props.fetchAllStudents(); // Fetch students from the database\n  }\n\n  // Unmount when the component is being removed from the DOM:\n  componentWillUnmount() {\n    this.setState({ redirect: false, redirectId: null });\n  }\n\n  // Render new student input form\n  render() {\n    // Redirect to new student's page after submit\n    if (this.state.redirect) {\n      return (<Redirect to={`/student/${this.state.redirectId}`} />);\n    }\n\n    // Display the input form via the corresponding View component\n    return (\n      <div>\n        <Header />\n        <NewStudentView\n          handleChange={this.handleChange}\n          handleSubmit={this.handleSubmit}\n          studentData={this.state} // Pass the state to the view for controlled inputs\n          errors={this.state.errors} // Pass errors to the view if needed\n        />\n      </div>\n    );\n  }\n}\n\n// Map dispatch to props\nconst mapDispatch = (dispatch) => {\n  return {\n    addStudent: (student) => dispatch(addStudentThunk(student)),\n    fetchAllStudents: () => dispatch(fetchAllStudentsThunk()), // Add fetch action\n  };\n}\n\n// Export store-connected container by default\nexport default connect(null, mapDispatch)(NewStudentContainer);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}