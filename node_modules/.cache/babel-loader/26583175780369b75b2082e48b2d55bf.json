{"ast":null,"code":"var _jsxFileName = \"/Users/adelinadautovic/Full-Stack-CRUD-Application-Client/src/components/containers/CampusContainer.js\";\n/*==================================================\nCampusContainer.js\n\nThe Container component is responsible for stateful logic and data fetching, and\npasses data (if any) as props to the corresponding View component.\nIf needed, it also defines the component's \"connect\" function.\n================================================== */\n\nimport Header from './Header';\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { fetchCampusThunk, removeStudentFromCampusThunk } from \"../../store/thunks\";\nimport { CampusView } from \"../views\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass CampusContainer extends Component {\n  // Get the specific campus data from back-end database\n  componentDidMount() {\n    // Get campus ID from URL (API link)\n    this.props.fetchCampus(this.props.match.params.id);\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(CampusView, {\n        campus: this.props.campus,\n        removeStudentFromCampus: this.props.removeStudentFromCampus,\n        fetchCampus: this.props.fetchCampus // Pass fetchCampus as a prop\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 5\n    }, this);\n  }\n}\n\n// The following 2 input arguments are passed to the \"connect\" function used by \"CampusContainer\" component to connect to Redux Store.\n// 1. The \"mapState\" argument specifies the data from Redux Store that the component needs.\n// The \"mapState\" is called when the Store State changes, and it returns a data object of \"campus\".\nconst mapState = state => {\n  return {\n    campus: state.campus // Get the State object from Reducer \"campus\"\n  };\n};\n// 2. The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\n// const mapDispatch = (dispatch) => {\n//   return {\n//     fetchCampus: (id) => dispatch(fetchCampusThunk(id)),\n//   };\n// };\n// const mapDispatch = (dispatch) => {\n//   return {\n//     fetchCampus: (id) => dispatch(fetchCampusThunk(id)),\n//     removeStudentFromCampus: (studentId, campusId) =>\n//       dispatch(removeStudentFromCampusThunk(studentId, campusId)), // Add this line\n//   };\n// };\nconst mapDispatch = dispatch => ({\n  fetchCampus: id => dispatch(fetchCampusThunk(id)),\n  // Map fetchCampusThunk\n  removeStudentFromCampus: (studentId, campusId) => dispatch(removeStudentFromCampusThunk(studentId, campusId))\n});\n\n// Export store-connected container by default\n// CampusContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// (and re-read the values when the Store State updates).\nexport default connect(mapState, mapDispatch)(CampusContainer);","map":{"version":3,"names":["Header","React","Component","connect","fetchCampusThunk","removeStudentFromCampusThunk","CampusView","jsxDEV","_jsxDEV","CampusContainer","componentDidMount","props","fetchCampus","match","params","id","render","children","fileName","_jsxFileName","lineNumber","columnNumber","campus","removeStudentFromCampus","mapState","state","mapDispatch","dispatch","studentId","campusId"],"sources":["/Users/adelinadautovic/Full-Stack-CRUD-Application-Client/src/components/containers/CampusContainer.js"],"sourcesContent":["/*==================================================\nCampusContainer.js\n\nThe Container component is responsible for stateful logic and data fetching, and\npasses data (if any) as props to the corresponding View component.\nIf needed, it also defines the component's \"connect\" function.\n================================================== */\n\nimport Header from './Header';\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { fetchCampusThunk, removeStudentFromCampusThunk } from \"../../store/thunks\";\nimport { CampusView } from \"../views\";\n\nclass CampusContainer extends Component {\n  // Get the specific campus data from back-end database\n  componentDidMount() {\n    // Get campus ID from URL (API link)\n    this.props.fetchCampus(this.props.match.params.id);\n  }\n\nrender() {\n  return (\n    <div>\n      <Header />\n      <CampusView\n        campus={this.props.campus}\n        removeStudentFromCampus={this.props.removeStudentFromCampus}\n        fetchCampus={this.props.fetchCampus} // Pass fetchCampus as a prop\n      />\n    </div>\n  );\n}\n\n}\n\n// The following 2 input arguments are passed to the \"connect\" function used by \"CampusContainer\" component to connect to Redux Store.\n// 1. The \"mapState\" argument specifies the data from Redux Store that the component needs.\n// The \"mapState\" is called when the Store State changes, and it returns a data object of \"campus\".\nconst mapState = (state) => {\n  return {\n    campus: state.campus,  // Get the State object from Reducer \"campus\"\n  };\n};\n// 2. The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\n// const mapDispatch = (dispatch) => {\n//   return {\n//     fetchCampus: (id) => dispatch(fetchCampusThunk(id)),\n//   };\n// };\n// const mapDispatch = (dispatch) => {\n//   return {\n//     fetchCampus: (id) => dispatch(fetchCampusThunk(id)),\n//     removeStudentFromCampus: (studentId, campusId) =>\n//       dispatch(removeStudentFromCampusThunk(studentId, campusId)), // Add this line\n//   };\n// };\nconst mapDispatch = (dispatch) => ({\n  fetchCampus: (id) => dispatch(fetchCampusThunk(id)), // Map fetchCampusThunk\n  removeStudentFromCampus: (studentId, campusId) =>\n    dispatch(removeStudentFromCampusThunk(studentId, campusId)),\n});\n\n// Export store-connected container by default\n// CampusContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// (and re-read the values when the Store State updates).\nexport default connect(mapState, mapDispatch)(CampusContainer);"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,MAAM,MAAM,UAAU;AAC7B,OAAOC,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAASC,OAAO,QAAQ,aAAa;AACrC,SAASC,gBAAgB,EAAEC,4BAA4B,QAAQ,oBAAoB;AACnF,SAASC,UAAU,QAAQ,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtC,MAAMC,eAAe,SAASP,SAAS,CAAC;EACtC;EACAQ,iBAAiBA,CAAA,EAAG;IAClB;IACA,IAAI,CAACC,KAAK,CAACC,WAAW,CAAC,IAAI,CAACD,KAAK,CAACE,KAAK,CAACC,MAAM,CAACC,EAAE,CAAC;EACpD;EAEFC,MAAMA,CAAA,EAAG;IACP,oBACER,OAAA;MAAAS,QAAA,gBACET,OAAA,CAACR,MAAM;QAAAkB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACVb,OAAA,CAACF,UAAU;QACTgB,MAAM,EAAE,IAAI,CAACX,KAAK,CAACW,MAAO;QAC1BC,uBAAuB,EAAE,IAAI,CAACZ,KAAK,CAACY,uBAAwB;QAC5DX,WAAW,EAAE,IAAI,CAACD,KAAK,CAACC,WAAY,CAAC;MAAA;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACtC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAEV;AAEA;;AAEA;AACA;AACA;AACA,MAAMG,QAAQ,GAAIC,KAAK,IAAK;EAC1B,OAAO;IACLH,MAAM,EAAEG,KAAK,CAACH,MAAM,CAAG;EACzB,CAAC;AACH,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMI,WAAW,GAAIC,QAAQ,KAAM;EACjCf,WAAW,EAAGG,EAAE,IAAKY,QAAQ,CAACvB,gBAAgB,CAACW,EAAE,CAAC,CAAC;EAAE;EACrDQ,uBAAuB,EAAEA,CAACK,SAAS,EAAEC,QAAQ,KAC3CF,QAAQ,CAACtB,4BAA4B,CAACuB,SAAS,EAAEC,QAAQ,CAAC;AAC9D,CAAC,CAAC;;AAEF;AACA;AACA;AACA,eAAe1B,OAAO,CAACqB,QAAQ,EAAEE,WAAW,CAAC,CAACjB,eAAe,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}