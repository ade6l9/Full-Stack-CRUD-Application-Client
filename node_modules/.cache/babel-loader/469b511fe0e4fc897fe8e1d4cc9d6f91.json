{"ast":null,"code":"var _jsxFileName = \"/Users/adelinadautovic/Full-Stack-CRUD-Application-Client/src/components/containers/StudentContainer.js\",\n  _s = $RefreshSig$();\n/*==================================================\nStudentContainer.js\n\nThe Container component is responsible for stateful logic and data fetching, and\npasses data (if any) as props to the corresponding View component.\nIf needed, it also defines the component's \"connect\" function.\n================================================== */\n// import Header from './Header';\n// import React, { Component } from \"react\";\n// import { connect } from \"react-redux\";\n// import { fetchStudentThunk } from \"../../store/thunks\";\n// import { fetchCampusThunk } from \"../../store/thunks\";\n// import { StudentView } from \"../views\";\n// import { fetchCampus } from '../../store/actions/actionCreators';\n\n// class StudentContainer extends Component {\n//   // Get student data from back-end database\n//   componentDidMount() {\n//     //getting student ID from url\n//     this.props.fetchStudent(this.props.match.params.id);\n//   }\n\n//   // Render Student view by passing student data as props to the corresponding View component\n//   render() {\n//     return (\n//       <div>\n//         <Header />\n//         <StudentView student={this.props.student} />\n//       </div>\n//     );\n//   }\n// }\n\n// // The following 2 input arguments are passed to the \"connect\" function used by \"StudentContainer\" to connect to Redux Store.  \n// // The following 2 input arguments are passed to the \"connect\" function used by \"AllCampusesContainer\" component to connect to Redux Store.\n// const mapState = (state) => {\n//   return {\n//     student: state.student,  // Get the State object from Reducer \"student\"\n//     campus: state.campuses.find(campus => campus.id === state.student.campusId), // Get the campus data\n\n//   };\n// };\n// // 2. The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// // The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\n// const mapDispatch = (dispatch) => {\n//   return {\n//     fetchStudent: (id) => dispatch(fetchStudentThunk(id)),\n//     fetchCampus:(id)  => dispatch(fetchCampusThunk(id)),\n//   };\n// };\n\n// // Export store-connected container by default\n// // StudentContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// // (and re-read the values when the Store State updates).\n// export default connect(mapState, mapDispatch)(StudentContainer);\n\nimport React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport StudentView from \"../views/StudentView\";\nimport { fetchStudentThunk, fetchCampusThunk, deleteStudentThunk } from \"../../store/thunks\";\nimport { deleteStudent } from '../../store/actions/actionCreators';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StudentContainer = ({\n  student,\n  campus,\n  fetchStudent,\n  fetchCampus,\n  deleteStudent,\n  history // Add history from withRouter\n}) => {\n  _s();\n  const {\n    studentId\n  } = useParams();\n  useEffect(() => {\n    fetchStudent(studentId);\n  }, [studentId, fetchStudent]);\n  useEffect(() => {\n    if (student && student.campusId) {\n      fetchCampus(student.campusId);\n    }\n  }, [student, fetchCampus]);\n  const handleDeleteStudent = id => {\n    deleteStudent(id);\n    history.push('/students'); // Use history.push instead of navigate\n  };\n  return /*#__PURE__*/_jsxDEV(StudentView, {\n    student: student,\n    campus: campus,\n    onDeleteStudent: handleDeleteStudent\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n};\n_s(StudentContainer, \"wbXCTg3wZSdDoKx87F7GKFYPXSs=\", false, function () {\n  return [useParams];\n});\n_c = StudentContainer;\nconst mapStateToProps = state => ({\n  student: state.student.selectedStudent,\n  campus: state.campus.selectedCampus\n});\nconst mapDispatchToProps = dispatch => ({\n  fetchStudent: id => dispatch(fetchStudentThunk(id)),\n  fetchCampus: id => dispatch(fetchCampusThunk(id)),\n  deleteStudent: id => dispatch(deleteStudentThunk(id))\n});\nvar _c;\n$RefreshReg$(_c, \"StudentContainer\");","map":{"version":3,"names":["React","useEffect","connect","useParams","useNavigate","StudentView","fetchStudentThunk","fetchCampusThunk","deleteStudentThunk","deleteStudent","jsxDEV","_jsxDEV","StudentContainer","student","campus","fetchStudent","fetchCampus","history","_s","studentId","campusId","handleDeleteStudent","id","push","onDeleteStudent","fileName","_jsxFileName","lineNumber","columnNumber","_c","mapStateToProps","state","selectedStudent","selectedCampus","mapDispatchToProps","dispatch","$RefreshReg$"],"sources":["/Users/adelinadautovic/Full-Stack-CRUD-Application-Client/src/components/containers/StudentContainer.js"],"sourcesContent":["/*==================================================\nStudentContainer.js\n\nThe Container component is responsible for stateful logic and data fetching, and\npasses data (if any) as props to the corresponding View component.\nIf needed, it also defines the component's \"connect\" function.\n================================================== */\n// import Header from './Header';\n// import React, { Component } from \"react\";\n// import { connect } from \"react-redux\";\n// import { fetchStudentThunk } from \"../../store/thunks\";\n// import { fetchCampusThunk } from \"../../store/thunks\";\n// import { StudentView } from \"../views\";\n// import { fetchCampus } from '../../store/actions/actionCreators';\n\n// class StudentContainer extends Component {\n//   // Get student data from back-end database\n//   componentDidMount() {\n//     //getting student ID from url\n//     this.props.fetchStudent(this.props.match.params.id);\n//   }\n\n//   // Render Student view by passing student data as props to the corresponding View component\n//   render() {\n//     return (\n//       <div>\n//         <Header />\n//         <StudentView student={this.props.student} />\n//       </div>\n//     );\n//   }\n// }\n\n// // The following 2 input arguments are passed to the \"connect\" function used by \"StudentContainer\" to connect to Redux Store.  \n// // The following 2 input arguments are passed to the \"connect\" function used by \"AllCampusesContainer\" component to connect to Redux Store.\n// const mapState = (state) => {\n//   return {\n//     student: state.student,  // Get the State object from Reducer \"student\"\n//     campus: state.campuses.find(campus => campus.id === state.student.campusId), // Get the campus data\n\n//   };\n// };\n// // 2. The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// // The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\n// const mapDispatch = (dispatch) => {\n//   return {\n//     fetchStudent: (id) => dispatch(fetchStudentThunk(id)),\n//     fetchCampus:(id)  => dispatch(fetchCampusThunk(id)),\n//   };\n// };\n\n// // Export store-connected container by default\n// // StudentContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// // (and re-read the values when the Store State updates).\n// export default connect(mapState, mapDispatch)(StudentContainer);\n\n\n\nimport React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport StudentView from \"../views/StudentView\";\nimport { \n  fetchStudentThunk, \n  fetchCampusThunk,\n  deleteStudentThunk \n} from \"../../store/thunks\";\nimport { deleteStudent } from '../../store/actions/actionCreators';\n\nconst StudentContainer = ({\n  student, \n  campus, \n  fetchStudent, \n  fetchCampus,\n  deleteStudent,\n  history // Add history from withRouter\n}) => {\n  const { studentId } = useParams();\n\n  useEffect(() => {\n    fetchStudent(studentId);\n  }, [studentId, fetchStudent]);\n\n  useEffect(() => {\n    if (student && student.campusId) {\n      fetchCampus(student.campusId);\n    }\n  }, [student, fetchCampus]);\n\n  const handleDeleteStudent = (id) => {\n    deleteStudent(id);\n    history.push('/students'); // Use history.push instead of navigate\n  };\n\n  return (\n    <StudentView \n      student={student} \n      campus={campus}\n      onDeleteStudent={handleDeleteStudent}\n    />\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  student: state.student.selectedStudent,\n  campus: state.campus.selectedCampus\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  fetchStudent: (id) => dispatch(fetchStudentThunk(id)),\n  fetchCampus: (id) => dispatch(fetchCampusThunk(id)),\n  deleteStudent: (id) => dispatch(deleteStudentThunk(id))\n});\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAIA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAASC,OAAO,QAAQ,aAAa;AACrC,SAASC,SAAS,EAAEC,WAAW,QAAQ,kBAAkB;AACzD,OAAOC,WAAW,MAAM,sBAAsB;AAC9C,SACEC,iBAAiB,EACjBC,gBAAgB,EAChBC,kBAAkB,QACb,oBAAoB;AAC3B,SAASC,aAAa,QAAQ,oCAAoC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnE,MAAMC,gBAAgB,GAAGA,CAAC;EACxBC,OAAO;EACPC,MAAM;EACNC,YAAY;EACZC,WAAW;EACXP,aAAa;EACbQ,OAAO,CAAC;AACV,CAAC,KAAK;EAAAC,EAAA;EACJ,MAAM;IAAEC;EAAU,CAAC,GAAGhB,SAAS,CAAC,CAAC;EAEjCF,SAAS,CAAC,MAAM;IACdc,YAAY,CAACI,SAAS,CAAC;EACzB,CAAC,EAAE,CAACA,SAAS,EAAEJ,YAAY,CAAC,CAAC;EAE7Bd,SAAS,CAAC,MAAM;IACd,IAAIY,OAAO,IAAIA,OAAO,CAACO,QAAQ,EAAE;MAC/BJ,WAAW,CAACH,OAAO,CAACO,QAAQ,CAAC;IAC/B;EACF,CAAC,EAAE,CAACP,OAAO,EAAEG,WAAW,CAAC,CAAC;EAE1B,MAAMK,mBAAmB,GAAIC,EAAE,IAAK;IAClCb,aAAa,CAACa,EAAE,CAAC;IACjBL,OAAO,CAACM,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;EAC7B,CAAC;EAED,oBACEZ,OAAA,CAACN,WAAW;IACVQ,OAAO,EAAEA,OAAQ;IACjBC,MAAM,EAAEA,MAAO;IACfU,eAAe,EAAEH;EAAoB;IAAAI,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACtC,CAAC;AAEN,CAAC;AAACV,EAAA,CAhCIN,gBAAgB;EAAA,QAQET,SAAS;AAAA;AAAA0B,EAAA,GAR3BjB,gBAAgB;AAkCtB,MAAMkB,eAAe,GAAIC,KAAK,KAAM;EAClClB,OAAO,EAAEkB,KAAK,CAAClB,OAAO,CAACmB,eAAe;EACtClB,MAAM,EAAEiB,KAAK,CAACjB,MAAM,CAACmB;AACvB,CAAC,CAAC;AAEF,MAAMC,kBAAkB,GAAIC,QAAQ,KAAM;EACxCpB,YAAY,EAAGO,EAAE,IAAKa,QAAQ,CAAC7B,iBAAiB,CAACgB,EAAE,CAAC,CAAC;EACrDN,WAAW,EAAGM,EAAE,IAAKa,QAAQ,CAAC5B,gBAAgB,CAACe,EAAE,CAAC,CAAC;EACnDb,aAAa,EAAGa,EAAE,IAAKa,QAAQ,CAAC3B,kBAAkB,CAACc,EAAE,CAAC;AACxD,CAAC,CAAC;AAAC,IAAAO,EAAA;AAAAO,YAAA,CAAAP,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module"}