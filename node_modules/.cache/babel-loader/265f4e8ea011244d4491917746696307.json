{"ast":null,"code":"var _jsxFileName = \"/Users/adelinadautovic/Full-Stack-CRUD-Application-Client/src/components/containers/NewStudentContainer.js\",\n  _s = $RefreshSig$();\n// /*==================================================\n// NewStudentContainer.js\n\n// The Container component is responsible for stateful logic and data fetching, and\n// passes data (if any) as props to the corresponding View component.\n// If needed, it also defines the component's \"connect\" function.\n// ================================================== */\n// import Header from './Header';\n// import { Component } from 'react';\n// import { connect } from 'react-redux';\n// import { Redirect } from 'react-router-dom';\n\n// import NewStudentView from '../views/NewStudentView';\n// import { addStudentThunk } from '../../store/thunks';\n\n// class NewStudentContainer extends Component {\n//   // Initialize state\n//   constructor(props){\n//     super(props);\n//     this.state = {\n//       firstname: \"\", \n//       lastname: \"\", \n//       campusId: null, \n//       redirect: false, \n//       redirectId: null\n//     };\n//   }\n\n//   // Capture input data when it is entered\n//   handleChange = event => {\n//     this.setState({\n//       [event.target.name]: event.target.value\n//     });\n//   }\n\n//   // Take action after user click the submit button\n//   handleSubmit = async event => {\n//     event.preventDefault();  // Prevent browser reload/refresh after submit.\n\n//     let student = {\n//         firstname: this.state.firstname,\n//         lastname: this.state.lastname,\n//         campusId: this.state.campusId\n//     };\n\n//     // Add new student in back-end database\n//     let newStudent = await this.props.addStudent(student);\n\n//     // Update state, and trigger redirect to show the new student\n//     this.setState({\n//       firstname: \"\", \n//       lastname: \"\", \n//       campusId: null, \n//       redirect: true, \n//       redirectId: newStudent.id\n//     });\n//   }\n\n//   // Unmount when the component is being removed from the DOM:\n//   componentWillUnmount() {\n//       this.setState({redirect: false, redirectId: null});\n//   }\n\n//   // Render new student input form\n//   render() {\n//     // Redirect to new student's page after submit\n//     if(this.state.redirect) {\n//       return (<Redirect to={`/student/${this.state.redirectId}`}/>)\n//     }\n\n//     // Display the input form via the corresponding View component\n//     return (\n//       <div>\n//         <Header />\n//         <NewStudentView \n//           handleChange = {this.handleChange} \n//           handleSubmit={this.handleSubmit}      \n//         />\n//       </div>          \n//     );\n//   }\n// }\n\n// // The following input argument is passed to the \"connect\" function used by \"NewStudentContainer\" component to connect to Redux Store.\n// // The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// // The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\n// const mapDispatch = (dispatch) => {\n//     return({\n//         addStudent: (student) => dispatch(addStudentThunk(student)),\n//     })\n// }\n\n// // Export store-connected container by default\n// // NewStudentContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// // (and re-read the values when the Store State updates).\n// export default connect(null, mapDispatch)(NewStudentContainer);\n\n/*==================================================\nNewStudentContainer.js\n\nThe Container component is responsible for stateful logic and data fetching, and\npasses data (if any) as props to the corresponding View component.\nIf needed, it also defines the component's \"connect\" function.\n================================================== */\n// import React, { Component } from 'react';\n// import Header from './Header';\n// import { connect } from 'react-redux';\n// import { Redirect } from 'react-router-dom';\n// import NewStudentView from '../views/NewStudentView';\n// import { addStudentThunk, fetchAllStudentsThunk } from '../../store/thunks'; // Import the fetch action\n\n// class NewStudentContainer extends Component {\n//   // Initialize state\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       firstname: \"\",\n//       lastname: \"\",\n//       email: \"\",\n//       gpa: \"\",\n//       campusId: null,\n//       imageUrl: \"\",\n//       redirect: false,\n//       redirectId: null,\n//       errors: {}, // To handle form errors\n//     };\n//   }\n\n//   // Capture input data when it is entered\n//   handleChange = event => {\n//     this.setState({\n//       [event.target.name]: event.target.value\n//     });\n//   }\n\n//   // Take action after user clicks the submit button\n//   handleSubmit = async event => {\n//     event.preventDefault();  // Prevent browser reload/refresh after submit.\n\n//     const { firstname, lastname, email, gpa, campusId, imageUrl } = this.state;\n//     let student = {\n//       firstname,\n//       lastname,\n//       email,\n//       gpa,\n//       campusId,\n//       imageUrl\n//     };\n\n//     try {\n//       // Add new student in back-end database\n//       let newStudent = await this.props.addStudent(student);\n\n//       // Update state, and trigger redirect to show the new student\n//       this.setState({\n//         firstname: \"\",\n//         lastname: \"\",\n//         email: \"\",\n//         gpa: \"\",\n//         campusId: null,\n//         imageUrl: \"\",\n//         redirect: true,\n//         redirectId: newStudent.id\n//       });\n//     } catch (error) {\n//       // Handle errors from the API\n//       if (error.response && error.response.data.errors) {\n//         this.setState({ errors: error.response.data.errors });\n//       } else {\n//         console.error('There was an error adding the student!', error);\n//         this.setState({ errors: { general: 'An error occurred. Please try again.' } });\n//       }\n//     }\n//   }\n\n//   // Fetch students when the component mounts\n//   componentDidMount() {\n//     this.props.fetchAllStudents(); // Fetch students from the database\n//   }\n\n//   // Unmount when the component is being removed from the DOM:\n//   componentWillUnmount() {\n//     this.setState({ redirect: false, redirectId: null });\n//   }\n\n//   // Render new student input form\n//   render() {\n//     // Redirect to new student's page after submit\n//     if (this.state.redirect) {\n//       return (<Redirect to={`/student/${this.state.redirectId}`} />);\n//     }\n\n//     // Display the input form via the corresponding View component\n//     return (\n//       <div>\n//         <Header />\n//         <NewStudentView\n//           handleChange={this.handleChange}\n//           handleSubmit={this.handleSubmit}\n//           studentData={this.state} // Pass the state to the view for controlled inputs\n//           errors={this.state.errors} // Pass errors to the view if needed\n//         />\n//       </div>\n//     );\n//   }\n// }\n\n// // Map dispatch to props\n// const mapDispatch = (dispatch) => {\n//   return {\n//     addStudent: (student) => dispatch(addStudentThunk(student)),\n//     fetchAllStudents: () => dispatch(fetchAllStudentsThunk()), // Add fetch action\n//   };\n// }\n\n// // Export store-connected container by default\n// export default connect(null, mapDispatch)(NewStudentContainer);\n\nimport Header from './Header';\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { useHistory } from 'react-router-dom';\nimport NewStudentView from '../views/NewStudentView';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NewStudentContainer = () => {\n  _s();\n  const history = useHistory();\n  const [newStudent, setNewStudent] = useState({\n    firstname: '',\n    lastname: '',\n    email: '',\n    imageurl: '',\n    gpa: '',\n    campusId: ''\n  });\n  const [errors, setErrors] = useState({\n    firstname: '',\n    lastname: '',\n    email: '',\n    imageurl: '',\n    gpa: '',\n    campusId: ''\n  });\n  const [blankFieldError, setBlankFieldError] = useState('');\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    if (name === 'campusId') {\n      axios.get(`/api/campuses/${value}`).then(response => {\n        const campusName = response.data.name;\n        setNewStudent({\n          ...newStudent,\n          campusName\n        });\n      }).catch(error => {\n        console.error(error);\n      });\n    } else {\n      setNewStudent({\n        ...newStudent,\n        [name]: value\n      });\n      validateField(name, value); // Add this line to validate the field\n    }\n  };\n  const validateField = (fieldName, value) => {\n    let error = '';\n    if (fieldName === 'firstname' || fieldName === 'lastname') {\n      if (value.length < 2) {\n        error = 'Name must be at least 2 characters long';\n      }\n    } else if (fieldName === 'email') {\n      const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n      if (!emailRegex.test(value)) {\n        error = 'Invalid email address';\n      }\n    } else if (fieldName === 'gpa') {\n      if (value < 0 || value > 4) {\n        error = 'GPA must be between 0 and 4';\n      }\n    } else if (fieldName === 'imageurl') {\n      if (!value.startsWith('http')) {\n        error = 'Image URL must start with http';\n      }\n    }\n    setErrors({\n      ...errors,\n      [fieldName]: error\n    });\n  };\n  const handleSubmit = e => {\n    e.preventDefault();\n    const requiredFields = ['firstname', 'lastname', 'email', 'gpa', 'campusId'];\n    const blankFields = requiredFields.filter(field => newStudent[field] === '');\n    if (blankFields.length > 0) {\n      setBlankFieldError(`Please fill in the following fields: ${blankFields.join(', ')}`);\n    } else if (Object.values(errors).every(error => error === '')) {\n      axios.post('/api/students', newStudent).then(response => {\n        console.log(response.data);\n        history.goBack();\n      }).catch(error => {\n        console.error(error);\n      });\n    }\n  };\n  const handleCancel = () => {\n    history.goBack();\n  };\n  return /*#__PURE__*/_jsxDEV(NewStudentView, {\n    newStudent: newStudent,\n    errors: errors,\n    blankFieldError: blankFieldError,\n    handleChange: handleChange,\n    handleSubmit: handleSubmit,\n    handleCancel: handleCancel\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 322,\n    columnNumber: 5\n  }, this);\n};\n_s(NewStudentContainer, \"kT6EN+ekjkMlgg1AiJrx7TB0eRg=\", false, function () {\n  return [useHistory];\n});\n_c = NewStudentContainer;\nexport default NewStudentContainer;\nvar _c;\n$RefreshReg$(_c, \"NewStudentContainer\");","map":{"version":3,"names":["Header","React","useState","axios","useHistory","NewStudentView","jsxDEV","_jsxDEV","NewStudentContainer","_s","history","newStudent","setNewStudent","firstname","lastname","email","imageurl","gpa","campusId","errors","setErrors","blankFieldError","setBlankFieldError","handleChange","e","name","value","target","get","then","response","campusName","data","catch","error","console","validateField","fieldName","length","emailRegex","test","startsWith","handleSubmit","preventDefault","requiredFields","blankFields","filter","field","join","Object","values","every","post","log","goBack","handleCancel","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/adelinadautovic/Full-Stack-CRUD-Application-Client/src/components/containers/NewStudentContainer.js"],"sourcesContent":["// /*==================================================\n// NewStudentContainer.js\n\n// The Container component is responsible for stateful logic and data fetching, and\n// passes data (if any) as props to the corresponding View component.\n// If needed, it also defines the component's \"connect\" function.\n// ================================================== */\n// import Header from './Header';\n// import { Component } from 'react';\n// import { connect } from 'react-redux';\n// import { Redirect } from 'react-router-dom';\n\n// import NewStudentView from '../views/NewStudentView';\n// import { addStudentThunk } from '../../store/thunks';\n\n// class NewStudentContainer extends Component {\n//   // Initialize state\n//   constructor(props){\n//     super(props);\n//     this.state = {\n//       firstname: \"\", \n//       lastname: \"\", \n//       campusId: null, \n//       redirect: false, \n//       redirectId: null\n//     };\n//   }\n\n//   // Capture input data when it is entered\n//   handleChange = event => {\n//     this.setState({\n//       [event.target.name]: event.target.value\n//     });\n//   }\n\n//   // Take action after user click the submit button\n//   handleSubmit = async event => {\n//     event.preventDefault();  // Prevent browser reload/refresh after submit.\n\n//     let student = {\n//         firstname: this.state.firstname,\n//         lastname: this.state.lastname,\n//         campusId: this.state.campusId\n//     };\n    \n//     // Add new student in back-end database\n//     let newStudent = await this.props.addStudent(student);\n\n//     // Update state, and trigger redirect to show the new student\n//     this.setState({\n//       firstname: \"\", \n//       lastname: \"\", \n//       campusId: null, \n//       redirect: true, \n//       redirectId: newStudent.id\n//     });\n//   }\n\n//   // Unmount when the component is being removed from the DOM:\n//   componentWillUnmount() {\n//       this.setState({redirect: false, redirectId: null});\n//   }\n\n//   // Render new student input form\n//   render() {\n//     // Redirect to new student's page after submit\n//     if(this.state.redirect) {\n//       return (<Redirect to={`/student/${this.state.redirectId}`}/>)\n//     }\n\n//     // Display the input form via the corresponding View component\n//     return (\n//       <div>\n//         <Header />\n//         <NewStudentView \n//           handleChange = {this.handleChange} \n//           handleSubmit={this.handleSubmit}      \n//         />\n//       </div>          \n//     );\n//   }\n// }\n\n// // The following input argument is passed to the \"connect\" function used by \"NewStudentContainer\" component to connect to Redux Store.\n// // The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// // The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\n// const mapDispatch = (dispatch) => {\n//     return({\n//         addStudent: (student) => dispatch(addStudentThunk(student)),\n//     })\n// }\n\n// // Export store-connected container by default\n// // NewStudentContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// // (and re-read the values when the Store State updates).\n// export default connect(null, mapDispatch)(NewStudentContainer);\n\n\n\n\n\n\n\n\n\n\n\n/*==================================================\nNewStudentContainer.js\n\nThe Container component is responsible for stateful logic and data fetching, and\npasses data (if any) as props to the corresponding View component.\nIf needed, it also defines the component's \"connect\" function.\n================================================== */\n// import React, { Component } from 'react';\n// import Header from './Header';\n// import { connect } from 'react-redux';\n// import { Redirect } from 'react-router-dom';\n// import NewStudentView from '../views/NewStudentView';\n// import { addStudentThunk, fetchAllStudentsThunk } from '../../store/thunks'; // Import the fetch action\n\n// class NewStudentContainer extends Component {\n//   // Initialize state\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       firstname: \"\",\n//       lastname: \"\",\n//       email: \"\",\n//       gpa: \"\",\n//       campusId: null,\n//       imageUrl: \"\",\n//       redirect: false,\n//       redirectId: null,\n//       errors: {}, // To handle form errors\n//     };\n//   }\n\n//   // Capture input data when it is entered\n//   handleChange = event => {\n//     this.setState({\n//       [event.target.name]: event.target.value\n//     });\n//   }\n\n//   // Take action after user clicks the submit button\n//   handleSubmit = async event => {\n//     event.preventDefault();  // Prevent browser reload/refresh after submit.\n\n//     const { firstname, lastname, email, gpa, campusId, imageUrl } = this.state;\n//     let student = {\n//       firstname,\n//       lastname,\n//       email,\n//       gpa,\n//       campusId,\n//       imageUrl\n//     };\n\n//     try {\n//       // Add new student in back-end database\n//       let newStudent = await this.props.addStudent(student);\n\n//       // Update state, and trigger redirect to show the new student\n//       this.setState({\n//         firstname: \"\",\n//         lastname: \"\",\n//         email: \"\",\n//         gpa: \"\",\n//         campusId: null,\n//         imageUrl: \"\",\n//         redirect: true,\n//         redirectId: newStudent.id\n//       });\n//     } catch (error) {\n//       // Handle errors from the API\n//       if (error.response && error.response.data.errors) {\n//         this.setState({ errors: error.response.data.errors });\n//       } else {\n//         console.error('There was an error adding the student!', error);\n//         this.setState({ errors: { general: 'An error occurred. Please try again.' } });\n//       }\n//     }\n//   }\n\n//   // Fetch students when the component mounts\n//   componentDidMount() {\n//     this.props.fetchAllStudents(); // Fetch students from the database\n//   }\n\n//   // Unmount when the component is being removed from the DOM:\n//   componentWillUnmount() {\n//     this.setState({ redirect: false, redirectId: null });\n//   }\n\n//   // Render new student input form\n//   render() {\n//     // Redirect to new student's page after submit\n//     if (this.state.redirect) {\n//       return (<Redirect to={`/student/${this.state.redirectId}`} />);\n//     }\n\n//     // Display the input form via the corresponding View component\n//     return (\n//       <div>\n//         <Header />\n//         <NewStudentView\n//           handleChange={this.handleChange}\n//           handleSubmit={this.handleSubmit}\n//           studentData={this.state} // Pass the state to the view for controlled inputs\n//           errors={this.state.errors} // Pass errors to the view if needed\n//         />\n//       </div>\n//     );\n//   }\n// }\n\n// // Map dispatch to props\n// const mapDispatch = (dispatch) => {\n//   return {\n//     addStudent: (student) => dispatch(addStudentThunk(student)),\n//     fetchAllStudents: () => dispatch(fetchAllStudentsThunk()), // Add fetch action\n//   };\n// }\n\n// // Export store-connected container by default\n// export default connect(null, mapDispatch)(NewStudentContainer);\n\n\n\n\nimport Header from './Header';\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { useHistory } from 'react-router-dom';\nimport NewStudentView from '../views/NewStudentView';\n\n\nconst NewStudentContainer = () => {\n  const history = useHistory();\n  const [newStudent, setNewStudent] = useState({\n    firstname: '',\n    lastname: '',\n    email: '',\n    imageurl: '',\n    gpa: '',\n    campusId: '',\n  });\n  const [errors, setErrors] = useState({\n    firstname: '',\n    lastname: '',\n    email: '',\n    imageurl: '',\n    gpa: '',\n    campusId: '',\n  });\n  const [blankFieldError, setBlankFieldError] = useState('');\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    if (name === 'campusId') {\n      axios.get(`/api/campuses/${value}`)\n        .then((response) => {\n          const campusName = response.data.name;\n          setNewStudent({ ...newStudent, campusName });\n        })\n        .catch((error) => {\n          console.error(error);\n        });\n    } else {\n      setNewStudent({ ...newStudent, [name]: value });\n      validateField(name, value); // Add this line to validate the field\n    }\n  };\n  \n  const validateField = (fieldName, value) => {\n    let error = '';\n    if (fieldName === 'firstname' || fieldName === 'lastname') {\n      if (value.length < 2) {\n        error = 'Name must be at least 2 characters long';\n      }\n    } else if (fieldName === 'email') {\n      const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n      if (!emailRegex.test(value)) {\n        error = 'Invalid email address';\n      }\n    } else if (fieldName === 'gpa') {\n      if (value < 0 || value > 4) {\n        error = 'GPA must be between 0 and 4';\n      }\n    } else if (fieldName === 'imageurl') {\n      if (!value.startsWith('http')) {\n        error = 'Image URL must start with http';\n      }\n    }\n    setErrors({ ...errors, [fieldName]: error });\n  };\n  \n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const requiredFields = ['firstname', 'lastname', 'email', 'gpa', 'campusId'];\n    const blankFields = requiredFields.filter((field) => newStudent[field] === '');\n    if (blankFields.length > 0) {\n      setBlankFieldError(`Please fill in the following fields: ${blankFields.join(', ')}`);\n    } else if (Object.values(errors).every((error) => error === '')) {\n      axios.post('/api/students', newStudent)\n        .then((response) => {\n          console.log(response.data);\n          history.goBack();\n        })\n        .catch((error) => {\n          console.error(error);\n        });\n    }\n  };\n\n  const handleCancel = () => {\n    history.goBack();\n  };\n\n  return (\n    <NewStudentView\n      newStudent={newStudent}\n      errors={errors}\n      blankFieldError={blankFieldError}\n      handleChange={handleChange}\n      handleSubmit={handleSubmit}\n      handleCancel={handleCancel}\n    />\n  );\n};\n\nexport default NewStudentContainer;"],"mappings":";;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAKA,OAAOA,MAAM,MAAM,UAAU;AAC7B,OAAOC,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,UAAU,QAAQ,kBAAkB;AAC7C,OAAOC,cAAc,MAAM,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAGrD,MAAMC,mBAAmB,GAAGA,CAAA,KAAM;EAAAC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","ignoreList":[]},"metadata":{},"sourceType":"module"}