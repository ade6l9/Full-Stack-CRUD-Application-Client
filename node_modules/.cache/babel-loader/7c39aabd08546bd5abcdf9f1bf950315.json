{"ast":null,"code":"var _jsxFileName = \"/Users/adelinadautovic/Full-Stack-CRUD-Application-Client/src/components/views/EditCampusView.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from \"react\";\n// import { useParams, useHistory } from \"react-router-dom\";\n\n// const EditCampusView = ({ fetchCampus, updateCampus, campus }) => {\n//   const { id } = useParams(); // Get campus ID from the route\n//   const history = useHistory();\n//   const [formData, setFormData] = useState({\n//     name: \"\",\n//     address: \"\",\n//     description: \"\",\n//     imageUrl: \"\",\n//   });\n\n//   // Fetch the campus data when the component mounts\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       await fetchCampus(id);\n//     };\n//     fetchData();\n//   }, [id, fetchCampus]);\n\n//   // Update form data when the campus data is fetched\n//   useEffect(() => {\n//     if (campus) {\n//       setFormData({\n//         name: campus.name || \"\",\n//         address: campus.address || \"\",\n//         description: campus.description || \"\",\n//         imageUrl: campus.imageUrl || \"\",\n//       });\n//     }\n//   }, [campus]);\n\n//   const handleChange = (e) => {\n//     const { name, value } = e.target;\n//     setFormData({ ...formData, [name]: value });\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     await updateCampus(id, formData); // Call the updateCampus thunk\n//     history.push(`/campus/${id}`); // Navigate back to the Campus View\n//   };\n\n//   return (\n//     <div>\n//       <h1>Edit Campus</h1>\n//       <form onSubmit={handleSubmit}>\n//         <label>\n//           Name:\n//           <input\n//             type=\"text\"\n//             name=\"name\"\n//             value={formData.name}\n//             onChange={handleChange}\n//             required\n//           />\n//         </label>\n//         <br />\n//         <label>\n//           Address:\n//           <input\n//             type=\"text\"\n//             name=\"address\"\n//             value={formData.address}\n//             onChange={handleChange}\n//             required\n//           />\n//         </label>\n//         <br />\n//         <label>\n//           Description:\n//           <textarea\n//             name=\"description\"\n//             value={formData.description}\n//             onChange={handleChange}\n//           />\n//         </label>\n//         <br />\n//         <label>\n//           Image URL:\n//           <input\n//             type=\"text\"\n//             name=\"imageUrl\"\n//             value={formData.imageUrl}\n//             onChange={handleChange}\n//           />\n//         </label>\n//         <br />\n//         <button type=\"submit\">Save Changes</button>\n//       </form>\n//     </div>\n//   );\n// };\n\n// export default EditCampusView;\n\nimport React, { useState, useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\"; // Import useHistory for navigation\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EditCampusView = props => {\n  _s();\n  const {\n    campusId\n  } = props.match.params; // Assuming you're passing the campusId as a parameter\n  const [campus, setCampus] = useState({\n    name: \"\",\n    address: \"\",\n    description: \"\",\n    imageUrl: \"\"\n  });\n  const history = useHistory(); // Hook to navigate programmatically\n\n  useEffect(() => {\n    // Fetch campus details\n    const fetchCampus = async () => {\n      try {\n        const response = await axios.get(`/api/campuses/${campusId}`);\n        setCampus(response.data);\n      } catch (error) {\n        console.error(\"Error fetching campus:\", error);\n      }\n    };\n    fetchCampus();\n  }, [campusId]);\n  const handleChange = e => {\n    setCampus({\n      ...campus,\n      [e.target.name]: e.target.value\n    });\n  };\n  const handleSaveChanges = async () => {\n    try {\n      await axios.put(`/api/campuses/${campusId}`, campus);\n      history.push(`/campus/${campusId}`); // Navigate to the campus page after saving changes\n    } catch (error) {\n      console.error(\"Error updating campus:\", error);\n    }\n  };\n  const handleCancel = () => {\n    history.push(`/campus/${campusId}`); // Navigate to the campus page without saving changes\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Edit Campus\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Name:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"name\",\n          value: campus.name,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Address:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"address\",\n          value: campus.address,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Description:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          name: \"description\",\n          value: campus.description,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Image URL:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"imageUrl\",\n          value: campus.imageUrl,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: handleSaveChanges,\n        children: \"Save Changes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: handleCancel,\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 148,\n    columnNumber: 5\n  }, this);\n};\n_s(EditCampusView, \"EyV66cS4S4c7v80DX9d6MPXcOOk=\", false, function () {\n  return [useHistory];\n});\n_c = EditCampusView;\nexport default EditCampusView;\nvar _c;\n$RefreshReg$(_c, \"EditCampusView\");","map":{"version":3,"names":["React","useState","useEffect","useHistory","axios","jsxDEV","_jsxDEV","EditCampusView","props","_s","campusId","match","params","campus","setCampus","name","address","description","imageUrl","history","fetchCampus","response","get","data","error","console","handleChange","e","target","value","handleSaveChanges","put","push","handleCancel","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","onClick","_c","$RefreshReg$"],"sources":["/Users/adelinadautovic/Full-Stack-CRUD-Application-Client/src/components/views/EditCampusView.js"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\n// import { useParams, useHistory } from \"react-router-dom\";\n\n// const EditCampusView = ({ fetchCampus, updateCampus, campus }) => {\n//   const { id } = useParams(); // Get campus ID from the route\n//   const history = useHistory();\n//   const [formData, setFormData] = useState({\n//     name: \"\",\n//     address: \"\",\n//     description: \"\",\n//     imageUrl: \"\",\n//   });\n\n//   // Fetch the campus data when the component mounts\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       await fetchCampus(id);\n//     };\n//     fetchData();\n//   }, [id, fetchCampus]);\n\n//   // Update form data when the campus data is fetched\n//   useEffect(() => {\n//     if (campus) {\n//       setFormData({\n//         name: campus.name || \"\",\n//         address: campus.address || \"\",\n//         description: campus.description || \"\",\n//         imageUrl: campus.imageUrl || \"\",\n//       });\n//     }\n//   }, [campus]);\n\n//   const handleChange = (e) => {\n//     const { name, value } = e.target;\n//     setFormData({ ...formData, [name]: value });\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     await updateCampus(id, formData); // Call the updateCampus thunk\n//     history.push(`/campus/${id}`); // Navigate back to the Campus View\n//   };\n\n//   return (\n//     <div>\n//       <h1>Edit Campus</h1>\n//       <form onSubmit={handleSubmit}>\n//         <label>\n//           Name:\n//           <input\n//             type=\"text\"\n//             name=\"name\"\n//             value={formData.name}\n//             onChange={handleChange}\n//             required\n//           />\n//         </label>\n//         <br />\n//         <label>\n//           Address:\n//           <input\n//             type=\"text\"\n//             name=\"address\"\n//             value={formData.address}\n//             onChange={handleChange}\n//             required\n//           />\n//         </label>\n//         <br />\n//         <label>\n//           Description:\n//           <textarea\n//             name=\"description\"\n//             value={formData.description}\n//             onChange={handleChange}\n//           />\n//         </label>\n//         <br />\n//         <label>\n//           Image URL:\n//           <input\n//             type=\"text\"\n//             name=\"imageUrl\"\n//             value={formData.imageUrl}\n//             onChange={handleChange}\n//           />\n//         </label>\n//         <br />\n//         <button type=\"submit\">Save Changes</button>\n//       </form>\n//     </div>\n//   );\n// };\n\n// export default EditCampusView;\n\n\nimport React, { useState, useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";  // Import useHistory for navigation\nimport axios from \"axios\";\n\nconst EditCampusView = (props) => {\n  const { campusId } = props.match.params;  // Assuming you're passing the campusId as a parameter\n  const [campus, setCampus] = useState({\n    name: \"\",\n    address: \"\",\n    description: \"\",\n    imageUrl: \"\",\n  });\n\n  const history = useHistory(); // Hook to navigate programmatically\n\n  useEffect(() => {\n    // Fetch campus details\n    const fetchCampus = async () => {\n      try {\n        const response = await axios.get(`/api/campuses/${campusId}`);\n        setCampus(response.data);\n      } catch (error) {\n        console.error(\"Error fetching campus:\", error);\n      }\n    };\n    fetchCampus();\n  }, [campusId]);\n\n  const handleChange = (e) => {\n    setCampus({\n      ...campus,\n      [e.target.name]: e.target.value,\n    });\n  };\n\n  const handleSaveChanges = async () => {\n    try {\n      await axios.put(`/api/campuses/${campusId}`, campus);\n      history.push(`/campus/${campusId}`);  // Navigate to the campus page after saving changes\n    } catch (error) {\n      console.error(\"Error updating campus:\", error);\n    }\n  };\n\n  const handleCancel = () => {\n    history.push(`/campus/${campusId}`);  // Navigate to the campus page without saving changes\n  };\n\n  return (\n    <div>\n      <h1>Edit Campus</h1>\n      <form>\n        <div>\n          <label>Name:</label>\n          <input\n            type=\"text\"\n            name=\"name\"\n            value={campus.name}\n            onChange={handleChange}\n          />\n        </div>\n        <div>\n          <label>Address:</label>\n          <input\n            type=\"text\"\n            name=\"address\"\n            value={campus.address}\n            onChange={handleChange}\n          />\n        </div>\n        <div>\n          <label>Description:</label>\n          <textarea\n            name=\"description\"\n            value={campus.description}\n            onChange={handleChange}\n          />\n        </div>\n        <div>\n          <label>Image URL:</label>\n          <input\n            type=\"text\"\n            name=\"imageUrl\"\n            value={campus.imageUrl}\n            onChange={handleChange}\n          />\n        </div>\n\n        <button type=\"button\" onClick={handleSaveChanges}>\n          Save Changes\n        </button>\n        <button type=\"button\" onClick={handleCancel}>\n          Cancel\n        </button>\n      </form>\n    </div>\n  );\n};\n\nexport default EditCampusView;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}