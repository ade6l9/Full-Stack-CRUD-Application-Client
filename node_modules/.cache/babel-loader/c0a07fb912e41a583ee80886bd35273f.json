{"ast":null,"code":"/*==================================================\n/src/store/reducers/students.js\n\nThis is a Reducer function that accepts 2 parameters: the previous state object (aka current state) and an action object. \nDepending on the Action object, the Reducer updates the State and return the new State object.\nIt also defines the State and its default initial value.\n================================================== */\n//import * as at from \"../actions/actionTypes\";  // Import Action Types (\"at\" keyword for Action Type)\n\n//REDUCER:\n// const initialState = {\n//   students: [],\n//   success: false, // Add success property\n// };\n\n// const allStudents = (state = initialState, action) => {\n//   switch (action.type) {\n//     case at.FETCH_ALL_STUDENTS:\n//       return { ...state, students: action.payload, success: true }; // Update success as needed\n//     case at.ADD_STUDENT:\n//       return { ...state, students: [...state.students, action.payload], success: true };\n//     case at.DELETE_STUDENT:\n//       return { ...state, students: state.students.filter(student => student.id !== action.payload), success: true };\n//     case at.EDIT_STUDENT:\n//       return {\n//         ...state,\n//         students: state.students.map(student => \n//           student.id === action.payload.id ? action.payload : student\n//         ),\n//         success: true,\n//       };\n//     default:\n//       return state; // Return the current state if action type is not recognized\n//   }\n// };\n\n// export default allStudents;\n\nconst initialState = [];\nconst allStudents = (state = initialState, action) => {\n  switch (action.type) {\n    case at.FETCH_ALL_STUDENTS:\n      return action.payload;\n    case at.ADD_STUDENT:\n      return [...state, action.payload];\n    case at.REMOVE_STUDENT:\n      return state.filter(student => student.id !== action.payload);\n    default:\n      return state;\n  }\n};\nexport default allStudents;","map":{"version":3,"names":["initialState","allStudents","state","action","type","at","FETCH_ALL_STUDENTS","payload","ADD_STUDENT","REMOVE_STUDENT","filter","student","id"],"sources":["/Users/adelinadautovic/Full-Stack-CRUD-Application-Client/src/store/reducers/students.js"],"sourcesContent":["/*==================================================\n/src/store/reducers/students.js\n\nThis is a Reducer function that accepts 2 parameters: the previous state object (aka current state) and an action object. \nDepending on the Action object, the Reducer updates the State and return the new State object.\nIt also defines the State and its default initial value.\n================================================== */\n//import * as at from \"../actions/actionTypes\";  // Import Action Types (\"at\" keyword for Action Type)\n\n//REDUCER:\n// const initialState = {\n//   students: [],\n//   success: false, // Add success property\n// };\n\n// const allStudents = (state = initialState, action) => {\n//   switch (action.type) {\n//     case at.FETCH_ALL_STUDENTS:\n//       return { ...state, students: action.payload, success: true }; // Update success as needed\n//     case at.ADD_STUDENT:\n//       return { ...state, students: [...state.students, action.payload], success: true };\n//     case at.DELETE_STUDENT:\n//       return { ...state, students: state.students.filter(student => student.id !== action.payload), success: true };\n//     case at.EDIT_STUDENT:\n//       return {\n//         ...state,\n//         students: state.students.map(student => \n//           student.id === action.payload.id ? action.payload : student\n//         ),\n//         success: true,\n//       };\n//     default:\n//       return state; // Return the current state if action type is not recognized\n//   }\n// };\n\n// export default allStudents;\n\nconst initialState = [];\n\nconst allStudents = (state = initialState, action) => {\n  switch (action.type) {\n    case at.FETCH_ALL_STUDENTS:\n      return action.payload;\n    case at.ADD_STUDENT:\n      return [...state, action.payload];\n    case at.REMOVE_STUDENT:\n      return state.filter(student => student.id !== action.payload);\n    default:\n      return state;\n  }\n};\n\nexport default allStudents;\n\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,MAAMA,YAAY,GAAG,EAAE;AAEvB,MAAMC,WAAW,GAAGA,CAACC,KAAK,GAAGF,YAAY,EAAEG,MAAM,KAAK;EACpD,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAKC,EAAE,CAACC,kBAAkB;MACxB,OAAOH,MAAM,CAACI,OAAO;IACvB,KAAKF,EAAE,CAACG,WAAW;MACjB,OAAO,CAAC,GAAGN,KAAK,EAAEC,MAAM,CAACI,OAAO,CAAC;IACnC,KAAKF,EAAE,CAACI,cAAc;MACpB,OAAOP,KAAK,CAACQ,MAAM,CAACC,OAAO,IAAIA,OAAO,CAACC,EAAE,KAAKT,MAAM,CAACI,OAAO,CAAC;IAC/D;MACE,OAAOL,KAAK;EAChB;AACF,CAAC;AAED,eAAeD,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module"}