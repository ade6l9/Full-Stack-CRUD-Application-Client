{"ast":null,"code":"// /*==================================================\n// /src/store/reducers/student.js\n\n// This is a Reducer function that accepts 2 parameters: the previous state object (aka current state) and an action object. \n// Depending on the Action object, the Reducer updates the State and return the new State object.\n// It also defines the State and its default initial value.\n// ================================================== */\n// import { FETCH_STUDENT } from \"../actions/actionTypes\";  // Import Action Type\n\n// // Define default Initial state\n// const initialState = {\n//   campus: {},  // Empty object\n// };\n\n// // REDUCER:\n// const student = (state=initialState, action) => {  // Use \"initialState\" as default Initial State\n//   switch (action.type) {\n//     case FETCH_STUDENT:\n//       return action.payload;\n//     default:\n//       // If the Reducer doesn't recognize the Action Type, returns the previous (current) State unchanged.\n//       return state;\n//   }\n// };\n\n// export default student;\n\nimport { FETCH_STUDENT, ADD_STUDENT } from \"../actions/actionTypes\"; // Import Action Types\n\n// Define default Initial state\nconst initialState = {\n  students: [] // Initialize with an empty array for students\n};\n\n// REDUCER:\nconst student = (state = initialState, action) => {\n  switch (action.type) {\n    case atob.FETCH_STUDENT:\n      return action.payload;\n    case ADD_STUDENT:\n      return {\n        ...state,\n        students: [...state.students, action.payload] // Add the new student to the array\n      };\n    default:\n      return state;\n    // Return the current state if action type is not recognized\n  }\n};\nexport default student;","map":{"version":3,"names":["FETCH_STUDENT","ADD_STUDENT","initialState","students","student","state","action","type","atob","payload"],"sources":["/Users/adelinadautovic/Full-Stack-CRUD-Application-Client/src/store/reducers/student.js"],"sourcesContent":["// /*==================================================\n// /src/store/reducers/student.js\n\n// This is a Reducer function that accepts 2 parameters: the previous state object (aka current state) and an action object. \n// Depending on the Action object, the Reducer updates the State and return the new State object.\n// It also defines the State and its default initial value.\n// ================================================== */\n// import { FETCH_STUDENT } from \"../actions/actionTypes\";  // Import Action Type\n\n// // Define default Initial state\n// const initialState = {\n//   campus: {},  // Empty object\n// };\n\n// // REDUCER:\n// const student = (state=initialState, action) => {  // Use \"initialState\" as default Initial State\n//   switch (action.type) {\n//     case FETCH_STUDENT:\n//       return action.payload;\n//     default:\n//       // If the Reducer doesn't recognize the Action Type, returns the previous (current) State unchanged.\n//       return state;\n//   }\n// };\n\n// export default student;\n\nimport { FETCH_STUDENT, ADD_STUDENT } from \"../actions/actionTypes\";  // Import Action Types\n\n// Define default Initial state\nconst initialState = {\n  students: [],  // Initialize with an empty array for students\n};\n\n// REDUCER:\nconst student = (state = initialState, action) => {\n  switch (action.type) {\n    case atob.FETCH_STUDENT:\n      return action.payload;\n    case ADD_STUDENT:\n      return {\n        ...state,\n        students: [...state.students, action.payload], // Add the new student to the array\n      };\n    default:\n      return state; // Return the current state if action type is not recognized\n  }\n};\n\nexport default student;"],"mappings":"AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,SAASA,aAAa,EAAEC,WAAW,QAAQ,wBAAwB,CAAC,CAAE;;AAEtE;AACA,MAAMC,YAAY,GAAG;EACnBC,QAAQ,EAAE,EAAE,CAAG;AACjB,CAAC;;AAED;AACA,MAAMC,OAAO,GAAGA,CAACC,KAAK,GAAGH,YAAY,EAAEI,MAAM,KAAK;EAChD,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAKC,IAAI,CAACR,aAAa;MACrB,OAAOM,MAAM,CAACG,OAAO;IACvB,KAAKR,WAAW;MACd,OAAO;QACL,GAAGI,KAAK;QACRF,QAAQ,EAAE,CAAC,GAAGE,KAAK,CAACF,QAAQ,EAAEG,MAAM,CAACG,OAAO,CAAC,CAAE;MACjD,CAAC;IACH;MACE,OAAOJ,KAAK;IAAE;EAClB;AACF,CAAC;AAED,eAAeD,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module"}