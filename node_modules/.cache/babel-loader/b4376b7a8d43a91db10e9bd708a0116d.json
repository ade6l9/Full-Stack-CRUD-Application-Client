{"ast":null,"code":"var _jsxFileName = \"/Users/adelinadautovic/Full-Stack-CRUD-Application-Client/src/components/containers/AllCampusesContainer.js\";\n/*==================================================\n/src/components/containers\\AllCampusesContainer.js\n\nThe Container component is responsible for stateful logic and data fetching, and\npasses data (if any) as props to the corresponding View component.\nIf needed, it also defines the component's \"connect\" function.\n================================================== */\nimport Header from './Header';\nimport { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { fetchAllCampusesThunk, addCampusThunk, deleteCampusThunk } from \"../../store/thunks\"; // Consolidated imports\nimport { AllCampusesView } from \"../views\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass AllCampusesContainer extends Component {\n  // Get all campuses data from back-end database\n  componentDidMount() {\n    console.log(this.props);\n    this.props.fetchAllCampuses();\n  }\n\n  // Render All Campuses view by passing all campuses data as props to the corresponding View component\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(AllCampusesView, {\n        allCampuses: this.props.allCampuses\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this);\n  }\n}\n\n// 1. The \"mapState\" argument specifies the data from Redux Store that the component needs.\n// The \"mapState\" is called when the Store State changes, and it returns a data object of \"allCampuses\".\n// The following 2 input arguments are passed to the \"connect\" function used by \"AllCampusesContainer\" component to connect to Redux Store.\nconst mapState = state => {\n  return {\n    allCampuses: state.allCampuses // Get the State object from Reducer \"allCampuses\"\n  };\n};\n// 2. The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\nconst mapDispatch = dispatch => {\n  return {\n    fetchAllCampuses: () => dispatch(fetchAllCampusesThunk()),\n    addCampus: campus => dispatch(addCampusThunk(campus)),\n    // Added\n    deleteCampus: campusId => dispatch(deleteCampusThunk(campusId)) // Add deleteCampusThunk\n  };\n};\n\n// Type check props;\nAllCampusesContainer.propTypes = {\n  allCampuses: PropTypes.array.isRequired,\n  fetchAllCampuses: PropTypes.func.isRequired,\n  addCampus: PropTypes.func.isRequired,\n  deleteCampus: PropTypes.func.isRequired\n};\n\n// Export store-connected container by default\n// AllCampusesContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// (and re-read the values when the Store State updates).\nexport default connect(mapState, mapDispatch)(AllCampusesContainer);","map":{"version":3,"names":["Header","Component","PropTypes","connect","fetchAllCampusesThunk","addCampusThunk","deleteCampusThunk","AllCampusesView","jsxDEV","_jsxDEV","AllCampusesContainer","componentDidMount","console","log","props","fetchAllCampuses","render","children","fileName","_jsxFileName","lineNumber","columnNumber","allCampuses","mapState","state","mapDispatch","dispatch","addCampus","campus","deleteCampus","campusId","propTypes","array","isRequired","func"],"sources":["/Users/adelinadautovic/Full-Stack-CRUD-Application-Client/src/components/containers/AllCampusesContainer.js"],"sourcesContent":["/*==================================================\n/src/components/containers\\AllCampusesContainer.js\n\nThe Container component is responsible for stateful logic and data fetching, and\npasses data (if any) as props to the corresponding View component.\nIf needed, it also defines the component's \"connect\" function.\n================================================== */\nimport Header from './Header';\nimport { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { fetchAllCampusesThunk, addCampusThunk, deleteCampusThunk } from \"../../store/thunks\"; // Consolidated imports\nimport { AllCampusesView } from \"../views\";\n\nclass AllCampusesContainer extends Component {\n  // Get all campuses data from back-end database\n  componentDidMount() {\n    console.log(this.props);\n    this.props.fetchAllCampuses();\n  }\n\n  // Render All Campuses view by passing all campuses data as props to the corresponding View component\n  render() {\n    return (\n      <div>\n        <Header />\n        <AllCampusesView\n          allCampuses={this.props.allCampuses}\n        />\n      </div>\n    );\n  }\n}\n\n// 1. The \"mapState\" argument specifies the data from Redux Store that the component needs.\n// The \"mapState\" is called when the Store State changes, and it returns a data object of \"allCampuses\".\n// The following 2 input arguments are passed to the \"connect\" function used by \"AllCampusesContainer\" component to connect to Redux Store.\nconst mapState = (state) => {\n  return {\n    allCampuses: state.allCampuses,  // Get the State object from Reducer \"allCampuses\"\n  };\n};  \n// 2. The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\nconst mapDispatch = (dispatch) => {\n  return {\n    fetchAllCampuses: () => dispatch(fetchAllCampusesThunk()),\n    addCampus: (campus) => dispatch(addCampusThunk(campus)), // Added\n    deleteCampus: (campusId) => dispatch(deleteCampusThunk(campusId)), // Add deleteCampusThunk\n  };\n};\n\n// Type check props;\nAllCampusesContainer.propTypes = {\n  allCampuses: PropTypes.array.isRequired,\n  fetchAllCampuses: PropTypes.func.isRequired,\n  addCampus: PropTypes.func.isRequired, \n  deleteCampus: PropTypes.func.isRequired,\n};\n\n// Export store-connected container by default\n// AllCampusesContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// (and re-read the values when the Store State updates).\nexport default connect(mapState, mapDispatch)(AllCampusesContainer);"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,MAAM,MAAM,UAAU;AAC7B,SAASC,SAAS,QAAQ,OAAO;AACjC,OAAOC,SAAS,MAAM,YAAY;AAClC,SAASC,OAAO,QAAQ,aAAa;AACrC,SAASC,qBAAqB,EAAEC,cAAc,EAAEC,iBAAiB,QAAQ,oBAAoB,CAAC,CAAC;AAC/F,SAASC,eAAe,QAAQ,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3C,MAAMC,oBAAoB,SAAST,SAAS,CAAC;EAC3C;EACAU,iBAAiBA,CAAA,EAAG;IAClBC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACC,KAAK,CAAC;IACvB,IAAI,CAACA,KAAK,CAACC,gBAAgB,CAAC,CAAC;EAC/B;;EAEA;EACAC,MAAMA,CAAA,EAAG;IACP,oBACEP,OAAA;MAAAQ,QAAA,gBACER,OAAA,CAACT,MAAM;QAAAkB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACVZ,OAAA,CAACF,eAAe;QACde,WAAW,EAAE,IAAI,CAACR,KAAK,CAACQ;MAAY;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACrC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAEV;AACF;;AAEA;AACA;AACA;AACA,MAAME,QAAQ,GAAIC,KAAK,IAAK;EAC1B,OAAO;IACLF,WAAW,EAAEE,KAAK,CAACF,WAAW,CAAG;EACnC,CAAC;AACH,CAAC;AACD;AACA;AACA,MAAMG,WAAW,GAAIC,QAAQ,IAAK;EAChC,OAAO;IACLX,gBAAgB,EAAEA,CAAA,KAAMW,QAAQ,CAACtB,qBAAqB,CAAC,CAAC,CAAC;IACzDuB,SAAS,EAAGC,MAAM,IAAKF,QAAQ,CAACrB,cAAc,CAACuB,MAAM,CAAC,CAAC;IAAE;IACzDC,YAAY,EAAGC,QAAQ,IAAKJ,QAAQ,CAACpB,iBAAiB,CAACwB,QAAQ,CAAC,CAAC,CAAE;EACrE,CAAC;AACH,CAAC;;AAED;AACApB,oBAAoB,CAACqB,SAAS,GAAG;EAC/BT,WAAW,EAAEpB,SAAS,CAAC8B,KAAK,CAACC,UAAU;EACvClB,gBAAgB,EAAEb,SAAS,CAACgC,IAAI,CAACD,UAAU;EAC3CN,SAAS,EAAEzB,SAAS,CAACgC,IAAI,CAACD,UAAU;EACpCJ,YAAY,EAAE3B,SAAS,CAACgC,IAAI,CAACD;AAC/B,CAAC;;AAED;AACA;AACA;AACA,eAAe9B,OAAO,CAACoB,QAAQ,EAAEE,WAAW,CAAC,CAACf,oBAAoB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}