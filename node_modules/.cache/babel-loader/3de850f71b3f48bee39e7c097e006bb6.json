{"ast":null,"code":"var _jsxFileName = \"/Users/adelinadautovic/Full-Stack-CRUD-Application-Client/src/components/containers/NewStudentContainer.js\";\n// /*==================================================\n// NewStudentContainer.js\n\n// The Container component is responsible for stateful logic and data fetching, and\n// passes data (if any) as props to the corresponding View component.\n// If needed, it also defines the component's \"connect\" function.\n// ================================================== */\n// import Header from './Header';\n// import { Component } from 'react';\n// import { connect } from 'react-redux';\n// import { Redirect } from 'react-router-dom';\n\n// import NewStudentView from '../views/NewStudentView';\n// import { addStudentThunk } from '../../store/thunks';\n\n// class NewStudentContainer extends Component {\n//   // Initialize state\n//   constructor(props){\n//     super(props);\n//     this.state = {\n//       firstname: \"\", \n//       lastname: \"\", \n//       campusId: null, \n//       redirect: false, \n//       redirectId: null\n//     };\n//   }\n\n//   // Capture input data when it is entered\n//   handleChange = event => {\n//     this.setState({\n//       [event.target.name]: event.target.value\n//     });\n//   }\n\n//   // Take action after user click the submit button\n//   handleSubmit = async event => {\n//     event.preventDefault();  // Prevent browser reload/refresh after submit.\n\n//     let student = {\n//         firstname: this.state.firstname,\n//         lastname: this.state.lastname,\n//         campusId: this.state.campusId\n//     };\n\n//     // Add new student in back-end database\n//     let newStudent = await this.props.addStudent(student);\n\n//     // Update state, and trigger redirect to show the new student\n//     this.setState({\n//       firstname: \"\", \n//       lastname: \"\", \n//       campusId: null, \n//       redirect: true, \n//       redirectId: newStudent.id\n//     });\n//   }\n\n//   // Unmount when the component is being removed from the DOM:\n//   componentWillUnmount() {\n//       this.setState({redirect: false, redirectId: null});\n//   }\n\n//   // Render new student input form\n//   render() {\n//     // Redirect to new student's page after submit\n//     if(this.state.redirect) {\n//       return (<Redirect to={`/student/${this.state.redirectId}`}/>)\n//     }\n\n//     // Display the input form via the corresponding View component\n//     return (\n//       <div>\n//         <Header />\n//         <NewStudentView \n//           handleChange = {this.handleChange} \n//           handleSubmit={this.handleSubmit}      \n//         />\n//       </div>          \n//     );\n//   }\n// }\n\n// // The following input argument is passed to the \"connect\" function used by \"NewStudentContainer\" component to connect to Redux Store.\n// // The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// // The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\n// const mapDispatch = (dispatch) => {\n//     return({\n//         addStudent: (student) => dispatch(addStudentThunk(student)),\n//     })\n// }\n\n// // Export store-connected container by default\n// // NewStudentContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// // (and re-read the values when the Store State updates).\n// export default connect(null, mapDispatch)(NewStudentContainer);\n\n/*==================================================\nNewStudentContainer.js\n\nThe Container component is responsible for stateful logic and data fetching, and\npasses data (if any) as props to the corresponding View component.\nIf needed, it also defines the component's \"connect\" function.\n================================================== */\nimport Header from './Header';\nimport { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport NewStudentView from '../views/NewStudentView';\nimport { addStudentThunk } from '../../store/thunks';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass NewStudentContainer extends Component {\n  // Initialize state\n  constructor(props) {\n    super(props);\n    // Capture input data when it is entered\n    this.handleChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n    // Take action after user clicks the submit button\n    this.handleSubmit = async event => {\n      event.preventDefault(); // Prevent browser reload/refresh after submit.\n\n      const {\n        firstname,\n        lastname,\n        email,\n        imageUrl,\n        gpa,\n        campusId\n      } = this.state;\n\n      // Validate inputs before sending to the backend\n      if (!firstname || !lastname || !email) {\n        alert(\"First name, last name, and email are required.\");\n        return;\n      }\n      if (gpa && (gpa < 0.0 || gpa > 4.0)) {\n        alert(\"GPA must be a number between 0.0 and 4.0.\");\n        return;\n      }\n      let student = {\n        firstname,\n        lastname,\n        email,\n        imageUrl: imageUrl || \"https://via.placeholder.com/150\",\n        // Use default image if none provided\n        gpa: gpa ? parseFloat(gpa) : null,\n        // Ensure GPA is stored as a number\n        campusId: campusId || null // Allow null if no campusId is provided\n      };\n      try {\n        // Add new student to the back-end database\n        let newStudent = await this.props.addStudent(student);\n\n        // Update state, and trigger redirect to show the new student\n        if (newStudent) {\n          this.setState({\n            firstname: \"\",\n            lastname: \"\",\n            email: \"\",\n            imageUrl: \"\",\n            gpa: \"\",\n            campusId: null,\n            redirect: true,\n            redirectId: newStudent.id\n          });\n        }\n      } catch (err) {\n        console.error(\"Error adding student:\", err);\n        alert(\"Failed to add student. Please try again.\");\n      }\n    };\n    this.state = {\n      firstname: \"\",\n      lastname: \"\",\n      email: \"\",\n      imageUrl: \"\",\n      gpa: \"\",\n      campusId: null,\n      redirect: false,\n      redirectId: null\n    };\n  }\n  // Unmount when the component is being removed from the DOM:\n  componentWillUnmount() {\n    this.setState({\n      redirect: false,\n      redirectId: null\n    });\n  }\n\n  // Render new student input form\n  render() {\n    // Redirect to new student's page after submit\n    if (this.state.redirect) {\n      return /*#__PURE__*/_jsxDEV(Redirect, {\n        to: `/students/${this.state.redirectId}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 14\n      }, this);\n    }\n\n    // Display the input form via the corresponding View component\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(NewStudentView, {\n        handleChange: this.handleChange,\n        handleSubmit: this.handleSubmit,\n        studentData: this.state // Pass current state to the view\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 7\n    }, this);\n  }\n}\n\n// The following input argument is passed to the \"connect\" function used by \"NewStudentContainer\" component to connect to Redux Store.\n// The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\nconst mapDispatch = dispatch => {\n  return {\n    addStudent: student => dispatch(addStudentThunk(student))\n  };\n};\n\n// Export store-connected container by default\n// NewStudentContainer uses \"connect\" function to connect to Redux Store and to read values from the Store\n// (and re-read the values when the Store State updates).\nexport default connect(null, mapDispatch)(NewStudentContainer);","map":{"version":3,"names":["Header","Component","connect","Redirect","NewStudentView","addStudentThunk","jsxDEV","_jsxDEV","NewStudentContainer","constructor","props","handleChange","event","setState","target","name","value","handleSubmit","preventDefault","firstname","lastname","email","imageUrl","gpa","campusId","state","alert","student","parseFloat","newStudent","addStudent","redirect","redirectId","id","err","console","error","componentWillUnmount","render","to","fileName","_jsxFileName","lineNumber","columnNumber","children","studentData","mapDispatch","dispatch"],"sources":["/Users/adelinadautovic/Full-Stack-CRUD-Application-Client/src/components/containers/NewStudentContainer.js"],"sourcesContent":["// /*==================================================\n// NewStudentContainer.js\n\n// The Container component is responsible for stateful logic and data fetching, and\n// passes data (if any) as props to the corresponding View component.\n// If needed, it also defines the component's \"connect\" function.\n// ================================================== */\n// import Header from './Header';\n// import { Component } from 'react';\n// import { connect } from 'react-redux';\n// import { Redirect } from 'react-router-dom';\n\n// import NewStudentView from '../views/NewStudentView';\n// import { addStudentThunk } from '../../store/thunks';\n\n// class NewStudentContainer extends Component {\n//   // Initialize state\n//   constructor(props){\n//     super(props);\n//     this.state = {\n//       firstname: \"\", \n//       lastname: \"\", \n//       campusId: null, \n//       redirect: false, \n//       redirectId: null\n//     };\n//   }\n\n//   // Capture input data when it is entered\n//   handleChange = event => {\n//     this.setState({\n//       [event.target.name]: event.target.value\n//     });\n//   }\n\n//   // Take action after user click the submit button\n//   handleSubmit = async event => {\n//     event.preventDefault();  // Prevent browser reload/refresh after submit.\n\n//     let student = {\n//         firstname: this.state.firstname,\n//         lastname: this.state.lastname,\n//         campusId: this.state.campusId\n//     };\n    \n//     // Add new student in back-end database\n//     let newStudent = await this.props.addStudent(student);\n\n//     // Update state, and trigger redirect to show the new student\n//     this.setState({\n//       firstname: \"\", \n//       lastname: \"\", \n//       campusId: null, \n//       redirect: true, \n//       redirectId: newStudent.id\n//     });\n//   }\n\n//   // Unmount when the component is being removed from the DOM:\n//   componentWillUnmount() {\n//       this.setState({redirect: false, redirectId: null});\n//   }\n\n//   // Render new student input form\n//   render() {\n//     // Redirect to new student's page after submit\n//     if(this.state.redirect) {\n//       return (<Redirect to={`/student/${this.state.redirectId}`}/>)\n//     }\n\n//     // Display the input form via the corresponding View component\n//     return (\n//       <div>\n//         <Header />\n//         <NewStudentView \n//           handleChange = {this.handleChange} \n//           handleSubmit={this.handleSubmit}      \n//         />\n//       </div>          \n//     );\n//   }\n// }\n\n// // The following input argument is passed to the \"connect\" function used by \"NewStudentContainer\" component to connect to Redux Store.\n// // The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// // The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\n// const mapDispatch = (dispatch) => {\n//     return({\n//         addStudent: (student) => dispatch(addStudentThunk(student)),\n//     })\n// }\n\n// // Export store-connected container by default\n// // NewStudentContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// // (and re-read the values when the Store State updates).\n// export default connect(null, mapDispatch)(NewStudentContainer);\n\n\n/*==================================================\nNewStudentContainer.js\n\nThe Container component is responsible for stateful logic and data fetching, and\npasses data (if any) as props to the corresponding View component.\nIf needed, it also defines the component's \"connect\" function.\n================================================== */\nimport Header from './Header';\nimport { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\n\nimport NewStudentView from '../views/NewStudentView';\nimport { addStudentThunk } from '../../store/thunks';\n\nclass NewStudentContainer extends Component {\n  // Initialize state\n  constructor(props) {\n    super(props);\n    this.state = {\n      firstname: \"\",\n      lastname: \"\",\n      email: \"\",\n      imageUrl: \"\",\n      gpa: \"\",\n      campusId: null,\n      redirect: false,\n      redirectId: null,\n    };\n  }\n\n  // Capture input data when it is entered\n  handleChange = (event) => {\n    this.setState({\n      [event.target.name]: event.target.value,\n    });\n  };\n\n  // Take action after user clicks the submit button\n  handleSubmit = async (event) => {\n    event.preventDefault(); // Prevent browser reload/refresh after submit.\n  \n    const { firstname, lastname, email, imageUrl, gpa, campusId } = this.state;\n  \n    // Validate inputs before sending to the backend\n    if (!firstname || !lastname || !email) {\n      alert(\"First name, last name, and email are required.\");\n      return;\n    }\n    if (gpa && (gpa < 0.0 || gpa > 4.0)) {\n      alert(\"GPA must be a number between 0.0 and 4.0.\");\n      return;\n    }\n  \n    let student = {\n      firstname,\n      lastname,\n      email,\n      imageUrl: imageUrl || \"https://via.placeholder.com/150\", // Use default image if none provided\n      gpa: gpa ? parseFloat(gpa) : null, // Ensure GPA is stored as a number\n      campusId: campusId || null, // Allow null if no campusId is provided\n    };\n  \n    try {\n      // Add new student to the back-end database\n      let newStudent = await this.props.addStudent(student);\n  \n      // Update state, and trigger redirect to show the new student\n      if (newStudent) {\n        this.setState({\n          firstname: \"\",\n          lastname: \"\",\n          email: \"\",\n          imageUrl: \"\",\n          gpa: \"\",\n          campusId: null,\n          redirect: true,\n          redirectId: newStudent.id,\n        });\n      }\n    } catch (err) {\n      console.error(\"Error adding student:\", err);\n      alert(\"Failed to add student. Please try again.\");\n    }\n  };\n\n  // Unmount when the component is being removed from the DOM:\n  componentWillUnmount() {\n    this.setState({ redirect: false, redirectId: null });\n  }\n\n  // Render new student input form\n  render() {\n    // Redirect to new student's page after submit\n    if (this.state.redirect) {\n      return <Redirect to={`/students/${this.state.redirectId}`} />;\n    }\n\n    // Display the input form via the corresponding View component\n    return (\n      <div>\n        <Header />\n        <NewStudentView\n          handleChange={this.handleChange}\n          handleSubmit={this.handleSubmit}\n          studentData={this.state} // Pass current state to the view\n        />\n      </div>\n    );\n  }\n}\n\n// The following input argument is passed to the \"connect\" function used by \"NewStudentContainer\" component to connect to Redux Store.\n// The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\nconst mapDispatch = (dispatch) => {\n  return {\n    addStudent: (student) => dispatch(addStudentThunk(student)),\n  };\n};\n\n// Export store-connected container by default\n// NewStudentContainer uses \"connect\" function to connect to Redux Store and to read values from the Store\n// (and re-read the values when the Store State updates).\nexport default connect(null, mapDispatch)(NewStudentContainer);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}