{"ast":null,"code":"var _jsxFileName = \"/Users/adelinadautovic/Full-Stack-CRUD-Application-Client/src/components/containers/NewStudentContainer.js\",\n  _s = $RefreshSig$();\n// /*==================================================\n// NewStudentContainer.js\n\n// The Container component is responsible for stateful logic and data fetching, and\n// passes data (if any) as props to the corresponding View component.\n// If needed, it also defines the component's \"connect\" function.\n// ================================================== */\n// import Header from './Header';\n// import { Component } from 'react';\n// import { connect } from 'react-redux';\n// import { Redirect } from 'react-router-dom';\n\n// import NewStudentView from '../views/NewStudentView';\n// import { addStudentThunk } from '../../store/thunks';\n\n// class NewStudentContainer extends Component {\n//   // Initialize state\n//   constructor(props){\n//     super(props);\n//     this.state = {\n//       firstname: \"\", \n//       lastname: \"\", \n//       campusId: null, \n//       redirect: false, \n//       redirectId: null\n//     };\n//   }\n\n//   // Capture input data when it is entered\n//   handleChange = event => {\n//     this.setState({\n//       [event.target.name]: event.target.value\n//     });\n//   }\n\n//   // Take action after user click the submit button\n//   handleSubmit = async event => {\n//     event.preventDefault();  // Prevent browser reload/refresh after submit.\n\n//     let student = {\n//         firstname: this.state.firstname,\n//         lastname: this.state.lastname,\n//         campusId: this.state.campusId\n//     };\n\n//     // Add new student in back-end database\n//     let newStudent = await this.props.addStudent(student);\n\n//     // Update state, and trigger redirect to show the new student\n//     this.setState({\n//       firstname: \"\", \n//       lastname: \"\", \n//       campusId: null, \n//       redirect: true, \n//       redirectId: newStudent.id\n//     });\n//   }\n\n//   // Unmount when the component is being removed from the DOM:\n//   componentWillUnmount() {\n//       this.setState({redirect: false, redirectId: null});\n//   }\n\n//   // Render new student input form\n//   render() {\n//     // Redirect to new student's page after submit\n//     if(this.state.redirect) {\n//       return (<Redirect to={`/student/${this.state.redirectId}`}/>)\n//     }\n\n//     // Display the input form via the corresponding View component\n//     return (\n//       <div>\n//         <Header />\n//         <NewStudentView \n//           handleChange = {this.handleChange} \n//           handleSubmit={this.handleSubmit}      \n//         />\n//       </div>          \n//     );\n//   }\n// }\n\n// // The following input argument is passed to the \"connect\" function used by \"NewStudentContainer\" component to connect to Redux Store.\n// // The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// // The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\n// const mapDispatch = (dispatch) => {\n//     return({\n//         addStudent: (student) => dispatch(addStudentThunk(student)),\n//     })\n// }\n\n// // Export store-connected container by default\n// // NewStudentContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// // (and re-read the values when the Store State updates).\n// export default connect(null, mapDispatch)(NewStudentContainer);\n\n/*==================================================\nNewStudentContainer.js\n\nThe Container component is responsible for stateful logic and data fetching, and\npasses data (if any) as props to the corresponding View component.\nIf needed, it also defines the component's \"connect\" function.\n================================================== */\n// import React, { Component } from 'react';\n// import Header from './Header';\n// import { connect } from 'react-redux';\n// import { Redirect } from 'react-router-dom';\n// import NewStudentView from '../views/NewStudentView';\n// import { addStudentThunk, fetchAllStudentsThunk } from '../../store/thunks'; // Import the fetch action\n\n// class NewStudentContainer extends Component {\n//   // Initialize state\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       firstname: \"\",\n//       lastname: \"\",\n//       email: \"\",\n//       gpa: \"\",\n//       campusId: null,\n//       imageUrl: \"\",\n//       redirect: false,\n//       redirectId: null,\n//       errors: {}, // To handle form errors\n//     };\n//   }\n\n//   // Capture input data when it is entered\n//   handleChange = event => {\n//     this.setState({\n//       [event.target.name]: event.target.value\n//     });\n//   }\n\n//   // Take action after user clicks the submit button\n//   handleSubmit = async event => {\n//     event.preventDefault();  // Prevent browser reload/refresh after submit.\n\n//     const { firstname, lastname, email, gpa, campusId, imageUrl } = this.state;\n//     let student = {\n//       firstname,\n//       lastname,\n//       email,\n//       gpa,\n//       campusId,\n//       imageUrl\n//     };\n\n//     try {\n//       // Add new student in back-end database\n//       let newStudent = await this.props.addStudent(student);\n\n//       // Update state, and trigger redirect to show the new student\n//       this.setState({\n//         firstname: \"\",\n//         lastname: \"\",\n//         email: \"\",\n//         gpa: \"\",\n//         campusId: null,\n//         imageUrl: \"\",\n//         redirect: true,\n//         redirectId: newStudent.id\n//       });\n//     } catch (error) {\n//       // Handle errors from the API\n//       if (error.response && error.response.data.errors) {\n//         this.setState({ errors: error.response.data.errors });\n//       } else {\n//         console.error('There was an error adding the student!', error);\n//         this.setState({ errors: { general: 'An error occurred. Please try again.' } });\n//       }\n//     }\n//   }\n\n//   // Fetch students when the component mounts\n//   componentDidMount() {\n//     this.props.fetchAllStudents(); // Fetch students from the database\n//   }\n\n//   // Unmount when the component is being removed from the DOM:\n//   componentWillUnmount() {\n//     this.setState({ redirect: false, redirectId: null });\n//   }\n\n//   // Render new student input form\n//   render() {\n//     // Redirect to new student's page after submit\n//     if (this.state.redirect) {\n//       return (<Redirect to={`/student/${this.state.redirectId}`} />);\n//     }\n\n//     // Display the input form via the corresponding View component\n//     return (\n//       <div>\n//         <Header />\n//         <NewStudentView\n//           handleChange={this.handleChange}\n//           handleSubmit={this.handleSubmit}\n//           studentData={this.state} // Pass the state to the view for controlled inputs\n//           errors={this.state.errors} // Pass errors to the view if needed\n//         />\n//       </div>\n//     );\n//   }\n// }\n\n// // Map dispatch to props\n// const mapDispatch = (dispatch) => {\n//   return {\n//     addStudent: (student) => dispatch(addStudentThunk(student)),\n//     fetchAllStudents: () => dispatch(fetchAllStudentsThunk()), // Add fetch action\n//   };\n// }\n\n// // Export store-connected container by default\n// export default connect(null, mapDispatch)(NewStudentContainer);\n\nimport React, { useState } from \"react\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport { addStudentThunk } from \"../../store/thunks\";\nimport NewStudentView from \"../views/NewStudentView\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NewStudentContainer = ({\n  fetchCampus\n}) => {\n  _s();\n  const location = useLocation();\n  const navigate = useNavigate();\n\n  // Extract campusId from query parameters\n  const params = new URLSearchParams(location.search);\n  const campusId = params.get(\"campusId\"); // Get the campusId from the query string\n\n  const [newStudent, setNewStudent] = useState({\n    firstname: \"\",\n    lastname: \"\",\n    email: \"\",\n    gpa: \"\",\n    campusId: campusId || \"\" // Pre-select the campus ID\n  });\n  const [errors, setErrors] = useState({});\n  const [blankFieldError, setBlankFieldError] = useState(\"\");\n\n  // Handle input changes\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setNewStudent({\n      ...newStudent,\n      [name]: value\n    });\n    setErrors({\n      ...errors,\n      [name]: \"\"\n    }); // Clear specific field errors\n  };\n\n  // Handle form submission\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!newStudent.firstname || !newStudent.lastname || !newStudent.email || !newStudent.campusId) {\n      setBlankFieldError(\"Please fill out all required fields.\");\n      return;\n    }\n    setBlankFieldError(\"\");\n    try {\n      const addedStudent = await addStudentThunk(newStudent); // Call the thunk to add a new student\n      if (addedStudent) {\n        await fetchCampus(newStudent.campusId); // Re-fetch the campus to update its data\n        navigate(`/campus/${newStudent.campusId}`); // Redirect back to the campus view\n      }\n    } catch (error) {\n      console.error(\"Failed to add student:\", error);\n    }\n  };\n\n  // Handle cancel\n  const handleCancel = () => {\n    navigate(-1); // Navigate back to the previous page\n  };\n  return /*#__PURE__*/_jsxDEV(NewStudentView, {\n    newStudent: newStudent,\n    errors: errors,\n    blankFieldError: blankFieldError,\n    handleChange: handleChange,\n    handleSubmit: handleSubmit,\n    handleCancel: handleCancel\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 289,\n    columnNumber: 5\n  }, this);\n};\n_s(NewStudentContainer, \"36YNo89lzixvAN6RqiA6TQd9MME=\", false, function () {\n  return [useLocation, useNavigate];\n});\n_c = NewStudentContainer;\nexport default NewStudentContainer;\nvar _c;\n$RefreshReg$(_c, \"NewStudentContainer\");","map":{"version":3,"names":["React","useState","useLocation","useNavigate","addStudentThunk","NewStudentView","jsxDEV","_jsxDEV","NewStudentContainer","fetchCampus","_s","location","navigate","params","URLSearchParams","search","campusId","get","newStudent","setNewStudent","firstname","lastname","email","gpa","errors","setErrors","blankFieldError","setBlankFieldError","handleChange","e","name","value","target","handleSubmit","preventDefault","addedStudent","error","console","handleCancel","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/adelinadautovic/Full-Stack-CRUD-Application-Client/src/components/containers/NewStudentContainer.js"],"sourcesContent":["// /*==================================================\n// NewStudentContainer.js\n\n// The Container component is responsible for stateful logic and data fetching, and\n// passes data (if any) as props to the corresponding View component.\n// If needed, it also defines the component's \"connect\" function.\n// ================================================== */\n// import Header from './Header';\n// import { Component } from 'react';\n// import { connect } from 'react-redux';\n// import { Redirect } from 'react-router-dom';\n\n// import NewStudentView from '../views/NewStudentView';\n// import { addStudentThunk } from '../../store/thunks';\n\n// class NewStudentContainer extends Component {\n//   // Initialize state\n//   constructor(props){\n//     super(props);\n//     this.state = {\n//       firstname: \"\", \n//       lastname: \"\", \n//       campusId: null, \n//       redirect: false, \n//       redirectId: null\n//     };\n//   }\n\n//   // Capture input data when it is entered\n//   handleChange = event => {\n//     this.setState({\n//       [event.target.name]: event.target.value\n//     });\n//   }\n\n//   // Take action after user click the submit button\n//   handleSubmit = async event => {\n//     event.preventDefault();  // Prevent browser reload/refresh after submit.\n\n//     let student = {\n//         firstname: this.state.firstname,\n//         lastname: this.state.lastname,\n//         campusId: this.state.campusId\n//     };\n    \n//     // Add new student in back-end database\n//     let newStudent = await this.props.addStudent(student);\n\n//     // Update state, and trigger redirect to show the new student\n//     this.setState({\n//       firstname: \"\", \n//       lastname: \"\", \n//       campusId: null, \n//       redirect: true, \n//       redirectId: newStudent.id\n//     });\n//   }\n\n//   // Unmount when the component is being removed from the DOM:\n//   componentWillUnmount() {\n//       this.setState({redirect: false, redirectId: null});\n//   }\n\n//   // Render new student input form\n//   render() {\n//     // Redirect to new student's page after submit\n//     if(this.state.redirect) {\n//       return (<Redirect to={`/student/${this.state.redirectId}`}/>)\n//     }\n\n//     // Display the input form via the corresponding View component\n//     return (\n//       <div>\n//         <Header />\n//         <NewStudentView \n//           handleChange = {this.handleChange} \n//           handleSubmit={this.handleSubmit}      \n//         />\n//       </div>          \n//     );\n//   }\n// }\n\n// // The following input argument is passed to the \"connect\" function used by \"NewStudentContainer\" component to connect to Redux Store.\n// // The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// // The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\n// const mapDispatch = (dispatch) => {\n//     return({\n//         addStudent: (student) => dispatch(addStudentThunk(student)),\n//     })\n// }\n\n// // Export store-connected container by default\n// // NewStudentContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// // (and re-read the values when the Store State updates).\n// export default connect(null, mapDispatch)(NewStudentContainer);\n\n\n\n\n\n\n\n\n\n\n\n/*==================================================\nNewStudentContainer.js\n\nThe Container component is responsible for stateful logic and data fetching, and\npasses data (if any) as props to the corresponding View component.\nIf needed, it also defines the component's \"connect\" function.\n================================================== */\n// import React, { Component } from 'react';\n// import Header from './Header';\n// import { connect } from 'react-redux';\n// import { Redirect } from 'react-router-dom';\n// import NewStudentView from '../views/NewStudentView';\n// import { addStudentThunk, fetchAllStudentsThunk } from '../../store/thunks'; // Import the fetch action\n\n// class NewStudentContainer extends Component {\n//   // Initialize state\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       firstname: \"\",\n//       lastname: \"\",\n//       email: \"\",\n//       gpa: \"\",\n//       campusId: null,\n//       imageUrl: \"\",\n//       redirect: false,\n//       redirectId: null,\n//       errors: {}, // To handle form errors\n//     };\n//   }\n\n//   // Capture input data when it is entered\n//   handleChange = event => {\n//     this.setState({\n//       [event.target.name]: event.target.value\n//     });\n//   }\n\n//   // Take action after user clicks the submit button\n//   handleSubmit = async event => {\n//     event.preventDefault();  // Prevent browser reload/refresh after submit.\n\n//     const { firstname, lastname, email, gpa, campusId, imageUrl } = this.state;\n//     let student = {\n//       firstname,\n//       lastname,\n//       email,\n//       gpa,\n//       campusId,\n//       imageUrl\n//     };\n\n//     try {\n//       // Add new student in back-end database\n//       let newStudent = await this.props.addStudent(student);\n\n//       // Update state, and trigger redirect to show the new student\n//       this.setState({\n//         firstname: \"\",\n//         lastname: \"\",\n//         email: \"\",\n//         gpa: \"\",\n//         campusId: null,\n//         imageUrl: \"\",\n//         redirect: true,\n//         redirectId: newStudent.id\n//       });\n//     } catch (error) {\n//       // Handle errors from the API\n//       if (error.response && error.response.data.errors) {\n//         this.setState({ errors: error.response.data.errors });\n//       } else {\n//         console.error('There was an error adding the student!', error);\n//         this.setState({ errors: { general: 'An error occurred. Please try again.' } });\n//       }\n//     }\n//   }\n\n//   // Fetch students when the component mounts\n//   componentDidMount() {\n//     this.props.fetchAllStudents(); // Fetch students from the database\n//   }\n\n//   // Unmount when the component is being removed from the DOM:\n//   componentWillUnmount() {\n//     this.setState({ redirect: false, redirectId: null });\n//   }\n\n//   // Render new student input form\n//   render() {\n//     // Redirect to new student's page after submit\n//     if (this.state.redirect) {\n//       return (<Redirect to={`/student/${this.state.redirectId}`} />);\n//     }\n\n//     // Display the input form via the corresponding View component\n//     return (\n//       <div>\n//         <Header />\n//         <NewStudentView\n//           handleChange={this.handleChange}\n//           handleSubmit={this.handleSubmit}\n//           studentData={this.state} // Pass the state to the view for controlled inputs\n//           errors={this.state.errors} // Pass errors to the view if needed\n//         />\n//       </div>\n//     );\n//   }\n// }\n\n// // Map dispatch to props\n// const mapDispatch = (dispatch) => {\n//   return {\n//     addStudent: (student) => dispatch(addStudentThunk(student)),\n//     fetchAllStudents: () => dispatch(fetchAllStudentsThunk()), // Add fetch action\n//   };\n// }\n\n// // Export store-connected container by default\n// export default connect(null, mapDispatch)(NewStudentContainer);\n\n\n\nimport React, { useState } from \"react\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport { addStudentThunk } from \"../../store/thunks\";\nimport NewStudentView from \"../views/NewStudentView\";\n\nconst NewStudentContainer = ({ fetchCampus }) => {\n  const location = useLocation();\n  const navigate = useNavigate();\n\n  // Extract campusId from query parameters\n  const params = new URLSearchParams(location.search);\n  const campusId = params.get(\"campusId\"); // Get the campusId from the query string\n\n  const [newStudent, setNewStudent] = useState({\n    firstname: \"\",\n    lastname: \"\",\n    email: \"\",\n    gpa: \"\",\n    campusId: campusId || \"\", // Pre-select the campus ID\n  });\n\n  const [errors, setErrors] = useState({});\n  const [blankFieldError, setBlankFieldError] = useState(\"\");\n\n  // Handle input changes\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setNewStudent({ ...newStudent, [name]: value });\n    setErrors({ ...errors, [name]: \"\" }); // Clear specific field errors\n  };\n\n  // Handle form submission\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    if (!newStudent.firstname || !newStudent.lastname || !newStudent.email || !newStudent.campusId) {\n      setBlankFieldError(\"Please fill out all required fields.\");\n      return;\n    }\n\n    setBlankFieldError(\"\");\n\n    try {\n      const addedStudent = await addStudentThunk(newStudent); // Call the thunk to add a new student\n      if (addedStudent) {\n        await fetchCampus(newStudent.campusId); // Re-fetch the campus to update its data\n        navigate(`/campus/${newStudent.campusId}`); // Redirect back to the campus view\n      }\n    } catch (error) {\n      console.error(\"Failed to add student:\", error);\n    }\n  };\n\n  // Handle cancel\n  const handleCancel = () => {\n    navigate(-1); // Navigate back to the previous page\n  };\n\n  return (\n    <NewStudentView\n      newStudent={newStudent}\n      errors={errors}\n      blankFieldError={blankFieldError}\n      handleChange={handleChange}\n      handleSubmit={handleSubmit}\n      handleCancel={handleCancel}\n    />\n  );\n};\n\nexport default NewStudentContainer;\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAIA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,WAAW,EAAEC,WAAW,QAAQ,kBAAkB;AAC3D,SAASC,eAAe,QAAQ,oBAAoB;AACpD,OAAOC,cAAc,MAAM,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErD,MAAMC,mBAAmB,GAAGA,CAAC;EAAEC;AAAY,CAAC,KAAK;EAAAC,EAAA;EAC/C,MAAMC,QAAQ,GAAGT,WAAW,CAAC,CAAC;EAC9B,MAAMU,QAAQ,GAAGT,WAAW,CAAC,CAAC;;EAE9B;EACA,MAAMU,MAAM,GAAG,IAAIC,eAAe,CAACH,QAAQ,CAACI,MAAM,CAAC;EACnD,MAAMC,QAAQ,GAAGH,MAAM,CAACI,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC;;EAEzC,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGlB,QAAQ,CAAC;IAC3CmB,SAAS,EAAE,EAAE;IACbC,QAAQ,EAAE,EAAE;IACZC,KAAK,EAAE,EAAE;IACTC,GAAG,EAAE,EAAE;IACPP,QAAQ,EAAEA,QAAQ,IAAI,EAAE,CAAE;EAC5B,CAAC,CAAC;EAEF,MAAM,CAACQ,MAAM,EAAEC,SAAS,CAAC,GAAGxB,QAAQ,CAAC,CAAC,CAAC,CAAC;EACxC,MAAM,CAACyB,eAAe,EAAEC,kBAAkB,CAAC,GAAG1B,QAAQ,CAAC,EAAE,CAAC;;EAE1D;EACA,MAAM2B,YAAY,GAAIC,CAAC,IAAK;IAC1B,MAAM;MAAEC,IAAI;MAAEC;IAAM,CAAC,GAAGF,CAAC,CAACG,MAAM;IAChCb,aAAa,CAAC;MAAE,GAAGD,UAAU;MAAE,CAACY,IAAI,GAAGC;IAAM,CAAC,CAAC;IAC/CN,SAAS,CAAC;MAAE,GAAGD,MAAM;MAAE,CAACM,IAAI,GAAG;IAAG,CAAC,CAAC,CAAC,CAAC;EACxC,CAAC;;EAED;EACA,MAAMG,YAAY,GAAG,MAAOJ,CAAC,IAAK;IAChCA,CAAC,CAACK,cAAc,CAAC,CAAC;IAClB,IAAI,CAAChB,UAAU,CAACE,SAAS,IAAI,CAACF,UAAU,CAACG,QAAQ,IAAI,CAACH,UAAU,CAACI,KAAK,IAAI,CAACJ,UAAU,CAACF,QAAQ,EAAE;MAC9FW,kBAAkB,CAAC,sCAAsC,CAAC;MAC1D;IACF;IAEAA,kBAAkB,CAAC,EAAE,CAAC;IAEtB,IAAI;MACF,MAAMQ,YAAY,GAAG,MAAM/B,eAAe,CAACc,UAAU,CAAC,CAAC,CAAC;MACxD,IAAIiB,YAAY,EAAE;QAChB,MAAM1B,WAAW,CAACS,UAAU,CAACF,QAAQ,CAAC,CAAC,CAAC;QACxCJ,QAAQ,CAAC,WAAWM,UAAU,CAACF,QAAQ,EAAE,CAAC,CAAC,CAAC;MAC9C;IACF,CAAC,CAAC,OAAOoB,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAChD;EACF,CAAC;;EAED;EACA,MAAME,YAAY,GAAGA,CAAA,KAAM;IACzB1B,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EAChB,CAAC;EAED,oBACEL,OAAA,CAACF,cAAc;IACba,UAAU,EAAEA,UAAW;IACvBM,MAAM,EAAEA,MAAO;IACfE,eAAe,EAAEA,eAAgB;IACjCE,YAAY,EAAEA,YAAa;IAC3BK,YAAY,EAAEA,YAAa;IAC3BK,YAAY,EAAEA;EAAa;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC5B,CAAC;AAEN,CAAC;AAAChC,EAAA,CA9DIF,mBAAmB;EAAA,QACNN,WAAW,EACXC,WAAW;AAAA;AAAAwC,EAAA,GAFxBnC,mBAAmB;AAgEzB,eAAeA,mBAAmB;AAAC,IAAAmC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module"}