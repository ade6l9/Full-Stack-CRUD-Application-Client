{"ast":null,"code":"// /*==================================================\n// /src/store/reducers/student.js\n\n// This is a Reducer function that accepts 2 parameters: the previous state object (aka current state) and an action object. \n// Depending on the Action object, the Reducer updates the State and return the new State object.\n// It also defines the State and its default initial value.\n// ================================================== */\n// import { FETCH_STUDENT } from \"../actions/actionTypes\";  // Import Action Type\n\n// // Define default Initial state\n// const initialState = {\n//   campus: {},  // Empty object\n// };\n\n// // REDUCER:\n// const student = (state=initialState, action) => {  // Use \"initialState\" as default Initial State\n//   switch (action.type) {\n//     case FETCH_STUDENT:\n//       return action.payload;\n//     default:\n//       // If the Reducer doesn't recognize the Action Type, returns the previous (current) State unchanged.\n//       return state;\n//   }\n// };\n\n// export default student;\n\n// // Define default Initial state\n// const initialState = {\n//   student: null, // Initialize with null for a single student\n// };\n\n// // REDUCER:\n// const student = (state = initialState, action) => {\n//   switch (action.type) {\n//     case at.FETCH_STUDENT:\n//       return action.payload;\n//     default:\n//       return state; // Return the current state if action type is not recognized\n//   }\n// };\n\n// export default student;\n\nconst initialState = null;\nconst student = (state = initialState, action) => {\n  switch (action.type) {\n    case 'FETCH_STUDENT':\n      return action.payload;\n    default:\n      return state;\n  }\n};\nexport default student;","map":{"version":3,"names":["initialState","student","state","action","type","payload"],"sources":["/Users/adelinadautovic/Full-Stack-CRUD-Application-Client/src/store/reducers/student.js"],"sourcesContent":["// /*==================================================\n// /src/store/reducers/student.js\n\n// This is a Reducer function that accepts 2 parameters: the previous state object (aka current state) and an action object. \n// Depending on the Action object, the Reducer updates the State and return the new State object.\n// It also defines the State and its default initial value.\n// ================================================== */\n// import { FETCH_STUDENT } from \"../actions/actionTypes\";  // Import Action Type\n\n// // Define default Initial state\n// const initialState = {\n//   campus: {},  // Empty object\n// };\n\n// // REDUCER:\n// const student = (state=initialState, action) => {  // Use \"initialState\" as default Initial State\n//   switch (action.type) {\n//     case FETCH_STUDENT:\n//       return action.payload;\n//     default:\n//       // If the Reducer doesn't recognize the Action Type, returns the previous (current) State unchanged.\n//       return state;\n//   }\n// };\n\n// export default student;\n\n\n\n\n\n// // Define default Initial state\n// const initialState = {\n//   student: null, // Initialize with null for a single student\n// };\n\n// // REDUCER:\n// const student = (state = initialState, action) => {\n//   switch (action.type) {\n//     case at.FETCH_STUDENT:\n//       return action.payload;\n//     default:\n//       return state; // Return the current state if action type is not recognized\n//   }\n// };\n\n// export default student;\n\nconst initialState = null;\n\nconst student = (state = initialState, action) => {\n  switch (action.type) {\n    case 'FETCH_STUDENT':\n      return action.payload;\n    default:\n      return state;\n  }\n};\n\nexport default student;\n\n"],"mappings":"AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAMA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,MAAMA,YAAY,GAAG,IAAI;AAEzB,MAAMC,OAAO,GAAGA,CAACC,KAAK,GAAGF,YAAY,EAAEG,MAAM,KAAK;EAChD,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAK,eAAe;MAClB,OAAOD,MAAM,CAACE,OAAO;IACvB;MACE,OAAOH,KAAK;EAChB;AACF,CAAC;AAED,eAAeD,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module"}