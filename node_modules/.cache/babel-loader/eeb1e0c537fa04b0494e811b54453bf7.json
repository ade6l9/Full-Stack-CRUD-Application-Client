{"ast":null,"code":"/*==================================================\n/src/store/index.js\n\nIt contains the necessities and accessories for constructing the Redux Store.\nIt creates a single Redux Store that holds the complete state tree of the app, so that the Redux Store state can access the states in all Reducers. \n================================================== */\nimport { combineReducers, applyMiddleware, createStore } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\n// Import all Reducers from the barrel file (/src/store/reducers/index.js)\nimport * as reducers from './reducers';\n\n// Construct the Redux Store:\n// Create a single Root Reducer to combine all Reducers, so that the Redux Store state can \n// access the states in all Reducers of the app.\nconst rootReducer = combineReducers(reducers);\n// Create a logger middleware to log dispatched Actions in console,\n// so that it displays prevState, nextState, and Action when an Action is dispatched.\nconst logger = createLogger({\n  collapsed: true\n}); // Collapse console messages when displayed\n// Create a Redux Store using Root Reducer and a middleware pipeline consisting of Thunk and logger.\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk, logger)));\n\n// Export the Redux Store by default, which will be provided to and injected within our entire application\nexport default store;","map":{"version":3,"names":["combineReducers","applyMiddleware","createStore","createLogger","thunk","composeWithDevTools","reducers","rootReducer","logger","collapsed","store"],"sources":["/Users/adelinadautovic/Full-Stack-CRUD-Application-Client/src/store/index.js"],"sourcesContent":["/*==================================================\n/src/store/index.js\n\nIt contains the necessities and accessories for constructing the Redux Store.\nIt creates a single Redux Store that holds the complete state tree of the app, so that the Redux Store state can access the states in all Reducers. \n================================================== */\nimport { combineReducers, applyMiddleware, createStore } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\n\n// Import all Reducers from the barrel file (/src/store/reducers/index.js)\nimport * as reducers from './reducers';\n\n// Construct the Redux Store:\n// Create a single Root Reducer to combine all Reducers, so that the Redux Store state can \n// access the states in all Reducers of the app.\nconst rootReducer = combineReducers(reducers);  \n// Create a logger middleware to log dispatched Actions in console,\n// so that it displays prevState, nextState, and Action when an Action is dispatched.\nconst logger = createLogger({ collapsed: true });  // Collapse console messages when displayed\n// Create a Redux Store using Root Reducer and a middleware pipeline consisting of Thunk and logger.\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk, logger)));\n\n// Export the Redux Store by default, which will be provided to and injected within our entire application\nexport default store;"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,eAAe,EAAEC,eAAe,EAAEC,WAAW,QAAQ,OAAO;AACrE,SAASC,YAAY,QAAQ,cAAc;AAC3C,OAAOC,KAAK,MAAM,aAAa;AAC/B,SAASC,mBAAmB,QAAQ,0BAA0B;;AAG9D;AACA,OAAO,KAAKC,QAAQ,MAAM,YAAY;;AAEtC;AACA;AACA;AACA,MAAMC,WAAW,GAAGP,eAAe,CAACM,QAAQ,CAAC;AAC7C;AACA;AACA,MAAME,MAAM,GAAGL,YAAY,CAAC;EAAEM,SAAS,EAAE;AAAK,CAAC,CAAC,CAAC,CAAE;AACnD;AACA,MAAMC,KAAK,GAAGR,WAAW,CAACK,WAAW,EAAEF,mBAAmB,CAACJ,eAAe,CAACG,KAAK,EAAEI,MAAM,CAAC,CAAC,CAAC;;AAE3F;AACA,eAAeE,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module"}