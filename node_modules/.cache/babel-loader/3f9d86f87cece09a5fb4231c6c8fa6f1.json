{"ast":null,"code":"var _jsxFileName = \"/Users/adelinadautovic/Full-Stack-CRUD-Application-Client/src/components/containers/CampusContainer.js\",\n  _s = $RefreshSig$();\n// /*==================================================\n// CampusContainer.js\n\n// The Container component is responsible for stateful logic and data fetching, and\n// passes data (if any) as props to the corresponding View component.\n// If needed, it also defines the component's \"connect\" function.\n// ================================================== */\n// import Header from './Header';\n// import React, { Component } from \"react\";\n// import { connect } from \"react-redux\";\n// import { fetchCampusThunk } from \"../../store/thunks\";\n\n// import { CampusView } from \"../views\";\n\n// class CampusContainer extends Component {\n//   // Get the specific campus data from back-end database\n//   componentDidMount() {\n//     // Get campus ID from URL (API link)\n//     this.props.fetchCampus(this.props.match.params.id);\n//   }\n\n//   // Render a Campus view by passing campus data as props to the corresponding View component\n//   render() {\n//     return (\n//       <div>\n//         <Header />\n//         <CampusView campus={this.props.campus} />\n//       </div>\n//     );\n//   }\n// }\n\n// // The following 2 input arguments are passed to the \"connect\" function used by \"CampusContainer\" component to connect to Redux Store.\n// // 1. The \"mapState\" argument specifies the data from Redux Store that the component needs.\n// // The \"mapState\" is called when the Store State changes, and it returns a data object of \"campus\".\n// const mapState = (state) => {\n//   return {\n//     campus: state.campus,  // Get the State object from Reducer \"campus\"\n//   };\n// };\n// // 2. The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// // The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\n// const mapDispatch = (dispatch) => {\n//   return {\n//     fetchCampus: (id) => dispatch(fetchCampusThunk(id)),\n//   };\n// };\n\n// // Export store-connected container by default\n// // CampusContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// // (and re-read the values when the Store State updates).\n// export default connect(mapState, mapDispatch)(CampusContainer);\n\nimport { connect } from \"react-redux\";\nimport CampusView from \"../views/CampusView\";\nimport { fetchCampusThunk, fetchAllStudentsThunk } from \"../../store/thunks\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CampusContainer = ({\n  campus,\n  allStudents,\n  fetchCampus,\n  fetchAllStudents\n}) => {\n  _s();\n  useEffect(() => {\n    fetchCampus(id); // Fetch current campus\n    fetchAllStudents(); // Fetch all students\n  }, [id, fetchCampus, fetchAllStudents]);\n  return /*#__PURE__*/_jsxDEV(CampusView, {\n    campus: campus,\n    allStudents: allStudents,\n    fetchCampus: fetchCampus\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 10\n  }, this);\n};\n_s(CampusContainer, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = CampusContainer;\nconst mapStateToProps = state => ({\n  campus: state.campus.selectedCampus,\n  allStudents: state.student.allStudents // Ensure this matches your Redux state structure\n});\nconst mapDispatchToProps = dispatch => ({\n  fetchCampus: id => dispatch(fetchCampusThunk(id)),\n  fetchAllStudents: () => dispatch(fetchAllStudentsThunk())\n});\nexport default connect(mapStateToProps, mapDispatchToProps)(CampusContainer);\nvar _c;\n$RefreshReg$(_c, \"CampusContainer\");","map":{"version":3,"names":["connect","CampusView","fetchCampusThunk","fetchAllStudentsThunk","jsxDEV","_jsxDEV","CampusContainer","campus","allStudents","fetchCampus","fetchAllStudents","_s","useEffect","id","fileName","_jsxFileName","lineNumber","columnNumber","_c","mapStateToProps","state","selectedCampus","student","mapDispatchToProps","dispatch","$RefreshReg$"],"sources":["/Users/adelinadautovic/Full-Stack-CRUD-Application-Client/src/components/containers/CampusContainer.js"],"sourcesContent":["// /*==================================================\n// CampusContainer.js\n\n// The Container component is responsible for stateful logic and data fetching, and\n// passes data (if any) as props to the corresponding View component.\n// If needed, it also defines the component's \"connect\" function.\n// ================================================== */\n// import Header from './Header';\n// import React, { Component } from \"react\";\n// import { connect } from \"react-redux\";\n// import { fetchCampusThunk } from \"../../store/thunks\";\n\n// import { CampusView } from \"../views\";\n\n// class CampusContainer extends Component {\n//   // Get the specific campus data from back-end database\n//   componentDidMount() {\n//     // Get campus ID from URL (API link)\n//     this.props.fetchCampus(this.props.match.params.id);\n//   }\n\n//   // Render a Campus view by passing campus data as props to the corresponding View component\n//   render() {\n//     return (\n//       <div>\n//         <Header />\n//         <CampusView campus={this.props.campus} />\n//       </div>\n//     );\n//   }\n// }\n\n\n// // The following 2 input arguments are passed to the \"connect\" function used by \"CampusContainer\" component to connect to Redux Store.\n// // 1. The \"mapState\" argument specifies the data from Redux Store that the component needs.\n// // The \"mapState\" is called when the Store State changes, and it returns a data object of \"campus\".\n// const mapState = (state) => {\n//   return {\n//     campus: state.campus,  // Get the State object from Reducer \"campus\"\n//   };\n// };\n// // 2. The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// // The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\n// const mapDispatch = (dispatch) => {\n//   return {\n//     fetchCampus: (id) => dispatch(fetchCampusThunk(id)),\n//   };\n// };\n\n// // Export store-connected container by default\n// // CampusContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// // (and re-read the values when the Store State updates).\n// export default connect(mapState, mapDispatch)(CampusContainer);\n\nimport { connect } from \"react-redux\";\nimport CampusView from \"../views/CampusView\";\nimport { fetchCampusThunk, fetchAllStudentsThunk } from \"../../store/thunks\";\n\nconst CampusContainer = ({ campus, allStudents, fetchCampus, fetchAllStudents }) => {\n  useEffect(() => {\n    fetchCampus(id); // Fetch current campus\n    fetchAllStudents(); // Fetch all students\n  }, [id, fetchCampus, fetchAllStudents]);\n\n  return <CampusView campus={campus} allStudents={allStudents} fetchCampus={fetchCampus} />;\n};\n\nconst mapStateToProps = (state) => ({\n  campus: state.campus.selectedCampus,\n  allStudents: state.student.allStudents, // Ensure this matches your Redux state structure\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  fetchCampus: (id) => dispatch(fetchCampusThunk(id)),\n  fetchAllStudents: () => dispatch(fetchAllStudentsThunk()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CampusContainer);\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,SAASA,OAAO,QAAQ,aAAa;AACrC,OAAOC,UAAU,MAAM,qBAAqB;AAC5C,SAASC,gBAAgB,EAAEC,qBAAqB,QAAQ,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7E,MAAMC,eAAe,GAAGA,CAAC;EAAEC,MAAM;EAAEC,WAAW;EAAEC,WAAW;EAAEC;AAAiB,CAAC,KAAK;EAAAC,EAAA;EAClFC,SAAS,CAAC,MAAM;IACdH,WAAW,CAACI,EAAE,CAAC,CAAC,CAAC;IACjBH,gBAAgB,CAAC,CAAC,CAAC,CAAC;EACtB,CAAC,EAAE,CAACG,EAAE,EAAEJ,WAAW,EAAEC,gBAAgB,CAAC,CAAC;EAEvC,oBAAOL,OAAA,CAACJ,UAAU;IAACM,MAAM,EAAEA,MAAO;IAACC,WAAW,EAAEA,WAAY;IAACC,WAAW,EAAEA;EAAY;IAAAK,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAC3F,CAAC;AAACN,EAAA,CAPIL,eAAe;AAAAY,EAAA,GAAfZ,eAAe;AASrB,MAAMa,eAAe,GAAIC,KAAK,KAAM;EAClCb,MAAM,EAAEa,KAAK,CAACb,MAAM,CAACc,cAAc;EACnCb,WAAW,EAAEY,KAAK,CAACE,OAAO,CAACd,WAAW,CAAE;AAC1C,CAAC,CAAC;AAEF,MAAMe,kBAAkB,GAAIC,QAAQ,KAAM;EACxCf,WAAW,EAAGI,EAAE,IAAKW,QAAQ,CAACtB,gBAAgB,CAACW,EAAE,CAAC,CAAC;EACnDH,gBAAgB,EAAEA,CAAA,KAAMc,QAAQ,CAACrB,qBAAqB,CAAC,CAAC;AAC1D,CAAC,CAAC;AAEF,eAAeH,OAAO,CAACmB,eAAe,EAAEI,kBAAkB,CAAC,CAACjB,eAAe,CAAC;AAAC,IAAAY,EAAA;AAAAO,YAAA,CAAAP,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module"}