{"ast":null,"code":"var _jsxFileName = \"/Users/adelinadautovic/Full-Stack-CRUD-Application-Client/src/components/containers/NewStudentContainer.js\";\n// /*==================================================\n// NewStudentContainer.js\n\n// The Container component is responsible for stateful logic and data fetching, and\n// passes data (if any) as props to the corresponding View component.\n// If needed, it also defines the component's \"connect\" function.\n// ================================================== */\n// import Header from './Header';\n// import { Component } from 'react';\n// import { connect } from 'react-redux';\n// import { Redirect } from 'react-router-dom';\n\n// import NewStudentView from '../views/NewStudentView';\n// import { addStudentThunk } from '../../store/thunks';\n\n// class NewStudentContainer extends Component {\n//   // Initialize state\n//   constructor(props){\n//     super(props);\n//     this.state = {\n//       firstname: \"\", \n//       lastname: \"\", \n//       campusId: null, \n//       redirect: false, \n//       redirectId: null\n//     };\n//   }\n\n//   // Capture input data when it is entered\n//   handleChange = event => {\n//     this.setState({\n//       [event.target.name]: event.target.value\n//     });\n//   }\n\n//   // Take action after user click the submit button\n//   handleSubmit = async event => {\n//     event.preventDefault();  // Prevent browser reload/refresh after submit.\n\n//     let student = {\n//         firstname: this.state.firstname,\n//         lastname: this.state.lastname,\n//         campusId: this.state.campusId\n//     };\n\n//     // Add new student in back-end database\n//     let newStudent = await this.props.addStudent(student);\n\n//     // Update state, and trigger redirect to show the new student\n//     this.setState({\n//       firstname: \"\", \n//       lastname: \"\", \n//       campusId: null, \n//       redirect: true, \n//       redirectId: newStudent.id\n//     });\n//   }\n\n//   // Unmount when the component is being removed from the DOM:\n//   componentWillUnmount() {\n//       this.setState({redirect: false, redirectId: null});\n//   }\n\n//   // Render new student input form\n//   render() {\n//     // Redirect to new student's page after submit\n//     if(this.state.redirect) {\n//       return (<Redirect to={`/student/${this.state.redirectId}`}/>)\n//     }\n\n//     // Display the input form via the corresponding View component\n//     return (\n//       <div>\n//         <Header />\n//         <NewStudentView \n//           handleChange = {this.handleChange} \n//           handleSubmit={this.handleSubmit}      \n//         />\n//       </div>          \n//     );\n//   }\n// }\n\n// // The following input argument is passed to the \"connect\" function used by \"NewStudentContainer\" component to connect to Redux Store.\n// // The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// // The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\n// const mapDispatch = (dispatch) => {\n//     return({\n//         addStudent: (student) => dispatch(addStudentThunk(student)),\n//     })\n// }\n\n// // Export store-connected container by default\n// // NewStudentContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// // (and re-read the values when the Store State updates).\n// export default connect(null, mapDispatch)(NewStudentContainer);\n\n/*==================================================\nNewStudentContainer.js\n\nThe Container component is responsible for stateful logic and data fetching, and\npasses data (if any) as props to the corresponding View component.\nIf needed, it also defines the component's \"connect\" function.\n================================================== */\nimport Header from './Header';\nimport { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport NewStudentView from '../views/NewStudentView';\nimport { addStudentThunk } from '../../store/thunks';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass NewStudentContainer extends Component {\n  // Initialize state\n  constructor(props) {\n    super(props);\n    // Capture input data when it is entered\n    this.handleChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n    // Take action after user clicks the submit button\n    this.handleSubmit = async event => {\n      event.preventDefault();\n      const {\n        firstname,\n        lastname,\n        email,\n        gpa,\n        imageUrl,\n        campusId\n      } = this.state;\n      let errors = {};\n      if (!firstname) errors.firstname = \"First name is required.\";\n      if (!lastname) errors.lastname = \"Last name is required.\";\n      if (!email) errors.email = \"Email is required.\";\n      if (gpa && (gpa < 0.0 || gpa > 4.0)) errors.gpa = \"GPA must be between 0.0 and 4.0.\";\n      if (imageUrl && !/^https?:\\/\\/.+\\.(jpg|jpeg|png|gif)$/i.test(imageUrl)) {\n        errors.imageUrl = \"Image URL must be a valid link to an image (jpg, jpeg, png, gif).\";\n      }\n      if (Object.keys(errors).length > 0) {\n        this.setState({\n          errors\n        });\n        return;\n      }\n      let student = {\n        firstname,\n        lastname,\n        email,\n        gpa: gpa ? parseFloat(gpa) : null,\n        imageUrl: imageUrl || \"https://via.placeholder.com/150\",\n        campusId: campusId || null\n      };\n      try {\n        let newStudent = await this.props.addStudent(student);\n        if (newStudent) {\n          this.setState({\n            firstname: \"\",\n            lastname: \"\",\n            email: \"\",\n            gpa: \"\",\n            imageUrl: \"\",\n            campusId: null,\n            errors: {},\n            redirect: true,\n            redirectId: newStudent.id\n          });\n        }\n      } catch (err) {\n        console.error(\"Error adding student:\", err);\n        alert(\"Failed to add student. Please try again.\");\n      }\n    };\n    this.handleChange = event => {\n      const {\n        name,\n        value\n      } = event.target;\n\n      // Clear error for the field being updated\n      this.setState(prevState => ({\n        [name]: value,\n        errors: {\n          ...prevState.errors,\n          [name]: null\n        }\n      }));\n    };\n    this.state = {\n      firstname: \"\",\n      lastname: \"\",\n      email: \"\",\n      gpa: \"\",\n      campusId: null,\n      imageUrl: \"\",\n      // optional\n      redirect: false,\n      redirectId: null\n    };\n  }\n  // Unmount when the component is being removed from the DOM:\n  componentWillUnmount() {\n    this.setState({\n      redirect: false,\n      redirectId: null\n    });\n  }\n\n  // Render new student input form\n  render() {\n    // Redirect to new student's page after submit\n    if (this.state.redirect) {\n      return /*#__PURE__*/_jsxDEV(Redirect, {\n        to: `/students/${this.state.redirectId}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 14\n      }, this);\n    }\n\n    // Display the input form via the corresponding View component\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(NewStudentView, {\n        handleChange: this.handleChange,\n        handleSubmit: this.handleSubmit,\n        studentData: {\n          firstname: this.state.firstname || \"\",\n          // Ensure it's initialized\n          lastname: this.state.lastname || \"\",\n          // Ensure it's initialized\n          email: this.state.email || \"\",\n          // Ensure it's initialized\n          gpa: this.state.gpa || \"\",\n          // Ensure it's initialized\n          campusId: this.state.campusId || \"\",\n          // Ensure it's initialized\n          imageUrl: this.state.imageUrl || \"\",\n          // Include imageUrl\n          errors: this.state.errors || {} // Ensure it's initialized\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 7\n    }, this);\n  }\n}\n\n// The following input argument is passed to the \"connect\" function used by \"NewStudentContainer\" component to connect to Redux Store.\n// The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\nconst mapDispatch = dispatch => {\n  return {\n    addStudent: student => dispatch(addStudentThunk(student))\n  };\n};\n\n// Export store-connected container by default\n// NewStudentContainer uses \"connect\" function to connect to Redux Store and to read values from the Store\n// (and re-read the values when the Store State updates).\nexport default connect(null, mapDispatch)(NewStudentContainer);","map":{"version":3,"names":["Header","Component","connect","Redirect","NewStudentView","addStudentThunk","jsxDEV","_jsxDEV","NewStudentContainer","constructor","props","handleChange","event","setState","target","name","value","handleSubmit","preventDefault","firstname","lastname","email","gpa","imageUrl","campusId","state","errors","test","Object","keys","length","student","parseFloat","newStudent","addStudent","redirect","redirectId","id","err","console","error","alert","prevState","componentWillUnmount","render","to","fileName","_jsxFileName","lineNumber","columnNumber","children","studentData","mapDispatch","dispatch"],"sources":["/Users/adelinadautovic/Full-Stack-CRUD-Application-Client/src/components/containers/NewStudentContainer.js"],"sourcesContent":["// /*==================================================\n// NewStudentContainer.js\n\n// The Container component is responsible for stateful logic and data fetching, and\n// passes data (if any) as props to the corresponding View component.\n// If needed, it also defines the component's \"connect\" function.\n// ================================================== */\n// import Header from './Header';\n// import { Component } from 'react';\n// import { connect } from 'react-redux';\n// import { Redirect } from 'react-router-dom';\n\n// import NewStudentView from '../views/NewStudentView';\n// import { addStudentThunk } from '../../store/thunks';\n\n// class NewStudentContainer extends Component {\n//   // Initialize state\n//   constructor(props){\n//     super(props);\n//     this.state = {\n//       firstname: \"\", \n//       lastname: \"\", \n//       campusId: null, \n//       redirect: false, \n//       redirectId: null\n//     };\n//   }\n\n//   // Capture input data when it is entered\n//   handleChange = event => {\n//     this.setState({\n//       [event.target.name]: event.target.value\n//     });\n//   }\n\n//   // Take action after user click the submit button\n//   handleSubmit = async event => {\n//     event.preventDefault();  // Prevent browser reload/refresh after submit.\n\n//     let student = {\n//         firstname: this.state.firstname,\n//         lastname: this.state.lastname,\n//         campusId: this.state.campusId\n//     };\n    \n//     // Add new student in back-end database\n//     let newStudent = await this.props.addStudent(student);\n\n//     // Update state, and trigger redirect to show the new student\n//     this.setState({\n//       firstname: \"\", \n//       lastname: \"\", \n//       campusId: null, \n//       redirect: true, \n//       redirectId: newStudent.id\n//     });\n//   }\n\n//   // Unmount when the component is being removed from the DOM:\n//   componentWillUnmount() {\n//       this.setState({redirect: false, redirectId: null});\n//   }\n\n//   // Render new student input form\n//   render() {\n//     // Redirect to new student's page after submit\n//     if(this.state.redirect) {\n//       return (<Redirect to={`/student/${this.state.redirectId}`}/>)\n//     }\n\n//     // Display the input form via the corresponding View component\n//     return (\n//       <div>\n//         <Header />\n//         <NewStudentView \n//           handleChange = {this.handleChange} \n//           handleSubmit={this.handleSubmit}      \n//         />\n//       </div>          \n//     );\n//   }\n// }\n\n// // The following input argument is passed to the \"connect\" function used by \"NewStudentContainer\" component to connect to Redux Store.\n// // The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// // The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\n// const mapDispatch = (dispatch) => {\n//     return({\n//         addStudent: (student) => dispatch(addStudentThunk(student)),\n//     })\n// }\n\n// // Export store-connected container by default\n// // NewStudentContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// // (and re-read the values when the Store State updates).\n// export default connect(null, mapDispatch)(NewStudentContainer);\n\n\n/*==================================================\nNewStudentContainer.js\n\nThe Container component is responsible for stateful logic and data fetching, and\npasses data (if any) as props to the corresponding View component.\nIf needed, it also defines the component's \"connect\" function.\n================================================== */\nimport Header from './Header';\nimport { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\n\nimport NewStudentView from '../views/NewStudentView';\nimport { addStudentThunk } from '../../store/thunks';\n\nclass NewStudentContainer extends Component {\n  // Initialize state\n  constructor(props) {\n    super(props);\n    this.state = {\n      firstname: \"\",\n      lastname: \"\",\n      email: \"\",\n      gpa: \"\",\n      campusId: null,\n      imageUrl: \"\", // optional\n      redirect: false,\n      redirectId: null,\n    };\n  }\n\n  // Capture input data when it is entered\n  handleChange = (event) => {\n    this.setState({\n      [event.target.name]: event.target.value,\n    });\n  };\n\n  // Take action after user clicks the submit button\n  handleSubmit = async (event) => {\n    event.preventDefault();\n  \n    const { firstname, lastname, email, gpa, imageUrl, campusId } = this.state;\n  \n    let errors = {};\n  \n    if (!firstname) errors.firstname = \"First name is required.\";\n    if (!lastname) errors.lastname = \"Last name is required.\";\n    if (!email) errors.email = \"Email is required.\";\n    if (gpa && (gpa < 0.0 || gpa > 4.0)) errors.gpa = \"GPA must be between 0.0 and 4.0.\";\n    if (imageUrl && !/^https?:\\/\\/.+\\.(jpg|jpeg|png|gif)$/i.test(imageUrl)) {\n      errors.imageUrl = \"Image URL must be a valid link to an image (jpg, jpeg, png, gif).\";\n    }\n  \n    if (Object.keys(errors).length > 0) {\n      this.setState({ errors });\n      return;\n    }\n  \n    let student = {\n      firstname,\n      lastname,\n      email,\n      gpa: gpa ? parseFloat(gpa) : null,\n      imageUrl: imageUrl || \"https://via.placeholder.com/150\",\n      campusId: campusId || null,\n    };\n  \n    try {\n      let newStudent = await this.props.addStudent(student);\n      if (newStudent) {\n        this.setState({\n          firstname: \"\",\n          lastname: \"\",\n          email: \"\",\n          gpa: \"\",\n          imageUrl: \"\",\n          campusId: null,\n          errors: {},\n          redirect: true,\n          redirectId: newStudent.id,\n        });\n      }\n    } catch (err) {\n      console.error(\"Error adding student:\", err);\n      alert(\"Failed to add student. Please try again.\");\n    }\n  };\n  \n  \n  handleChange = (event) => {\n    const { name, value } = event.target;\n  \n    // Clear error for the field being updated\n    this.setState((prevState) => ({\n      [name]: value,\n      errors: {\n        ...prevState.errors,\n        [name]: null,\n      },\n    }));\n  };\n\n  // Unmount when the component is being removed from the DOM:\n  componentWillUnmount() {\n    this.setState({ redirect: false, redirectId: null });\n  }\n\n  // Render new student input form\n  render() {\n    // Redirect to new student's page after submit\n    if (this.state.redirect) {\n      return <Redirect to={`/students/${this.state.redirectId}`} />;\n    }\n\n    // Display the input form via the corresponding View component\n    return (\n      <div>\n        <Header />\n        <NewStudentView\n        handleChange={this.handleChange}\n        handleSubmit={this.handleSubmit}\n        studentData={{\n        firstname: this.state.firstname || \"\", // Ensure it's initialized\n        lastname: this.state.lastname || \"\", // Ensure it's initialized\n        email: this.state.email || \"\", // Ensure it's initialized\n        gpa: this.state.gpa || \"\", // Ensure it's initialized\n        campusId: this.state.campusId || \"\", // Ensure it's initialized\n        imageUrl: this.state.imageUrl || \"\", // Include imageUrl\n        errors: this.state.errors || {}, // Ensure it's initialized\n  }}\n/>\n      </div>\n    );\n  }\n}\n\n// The following input argument is passed to the \"connect\" function used by \"NewStudentContainer\" component to connect to Redux Store.\n// The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\nconst mapDispatch = (dispatch) => {\n  return {\n    addStudent: (student) => dispatch(addStudentThunk(student)),\n  };\n};\n\n// Export store-connected container by default\n// NewStudentContainer uses \"connect\" function to connect to Redux Store and to read values from the Store\n// (and re-read the values when the Store State updates).\nexport default connect(null, mapDispatch)(NewStudentContainer);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}