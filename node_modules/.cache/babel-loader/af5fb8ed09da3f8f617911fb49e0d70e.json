{"ast":null,"code":"var _jsxFileName = \"/Users/adelinadautovic/Full-Stack-CRUD-Application-Client/src/components/containers/NewStudentContainer.js\",\n  _s = $RefreshSig$();\n// /*==================================================\n// NewStudentContainer.js\n\n// The Container component is responsible for stateful logic and data fetching, and\n// passes data (if any) as props to the corresponding View component.\n// If needed, it also defines the component's \"connect\" function.\n// ================================================== */\n// import Header from './Header';\n// import { Component } from 'react';\n// import { connect } from 'react-redux';\n// import { Redirect } from 'react-router-dom';\n\n// import NewStudentView from '../views/NewStudentView';\n// import { addStudentThunk } from '../../store/thunks';\n\n// class NewStudentContainer extends Component {\n//   // Initialize state\n//   constructor(props){\n//     super(props);\n//     this.state = {\n//       firstname: \"\", \n//       lastname: \"\", \n//       campusId: null, \n//       redirect: false, \n//       redirectId: null\n//     };\n//   }\n\n//   // Capture input data when it is entered\n//   handleChange = event => {\n//     this.setState({\n//       [event.target.name]: event.target.value\n//     });\n//   }\n\n//   // Take action after user click the submit button\n//   handleSubmit = async event => {\n//     event.preventDefault();  // Prevent browser reload/refresh after submit.\n\n//     let student = {\n//         firstname: this.state.firstname,\n//         lastname: this.state.lastname,\n//         campusId: this.state.campusId\n//     };\n\n//     // Add new student in back-end database\n//     let newStudent = await this.props.addStudent(student);\n\n//     // Update state, and trigger redirect to show the new student\n//     this.setState({\n//       firstname: \"\", \n//       lastname: \"\", \n//       campusId: null, \n//       redirect: true, \n//       redirectId: newStudent.id\n//     });\n//   }\n\n//   // Unmount when the component is being removed from the DOM:\n//   componentWillUnmount() {\n//       this.setState({redirect: false, redirectId: null});\n//   }\n\n//   // Render new student input form\n//   render() {\n//     // Redirect to new student's page after submit\n//     if(this.state.redirect) {\n//       return (<Redirect to={`/student/${this.state.redirectId}`}/>)\n//     }\n\n//     // Display the input form via the corresponding View component\n//     return (\n//       <div>\n//         <Header />\n//         <NewStudentView \n//           handleChange = {this.handleChange} \n//           handleSubmit={this.handleSubmit}      \n//         />\n//       </div>          \n//     );\n//   }\n// }\n\n// // The following input argument is passed to the \"connect\" function used by \"NewStudentContainer\" component to connect to Redux Store.\n// // The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// // The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\n// const mapDispatch = (dispatch) => {\n//     return({\n//         addStudent: (student) => dispatch(addStudentThunk(student)),\n//     })\n// }\n\n// // Export store-connected container by default\n// // NewStudentContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// // (and re-read the values when the Store State updates).\n// export default connect(null, mapDispatch)(NewStudentContainer);\n\nimport React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect, withRouter } from 'react-router-dom';\nimport NewStudentView from '../views/NewStudentView';\nimport { addStudentThunk } from '../../store/thunks';\nimport Header from './Header';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NewStudentContainer = ({\n  addStudent,\n  success,\n  history\n}) => {\n  _s();\n  const [studentData, setStudentData] = useState({\n    firstname: '',\n    lastname: '',\n    email: '',\n    gpa: '',\n    campusId: '',\n    imageUrl: '',\n    errors: {}\n  });\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setStudentData({\n      ...studentData,\n      [name]: value\n    });\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    try {\n      // Clear previous errors\n      setStudentData({\n        ...studentData,\n        errors: {}\n      });\n\n      // Dispatch the thunk action to add the student\n      await addStudent(studentData);\n\n      // Reset form after successful submission\n      setStudentData({\n        firstname: '',\n        lastname: '',\n        email: '',\n        gpa: '',\n        campusId: '',\n        imageUrl: '',\n        errors: {}\n      });\n\n      // Redirect to the students list or the newly created student page\n      history.push('/students'); // Adjust the path as needed\n    } catch (error) {\n      // Handle errors from the API\n      if (error.response && error.response.data.errors) {\n        setStudentData({\n          ...studentData,\n          errors: error.response.data.errors\n        });\n      } else {\n        console.error('There was an error adding the student!', error);\n        setStudentData({\n          ...studentData,\n          errors: {\n            general: 'An error occurred. Please try again.'\n          }\n        });\n      }\n    }\n  };\n\n  // Redirect if the student was added successfully\n  if (success) {\n    return /*#__PURE__*/_jsxDEV(Redirect, {\n      to: \"/students\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 12\n    }, this); // Adjust the path as needed\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(NewStudentView, {\n      handleChange: handleChange,\n      handleSubmit: handleSubmit,\n      studentData: studentData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 160,\n    columnNumber: 5\n  }, this);\n};\n\n// Map Redux state to props\n_s(NewStudentContainer, \"agPnfasm+dU+FohODMaH9BjplCI=\");\n_c = NewStudentContainer;\nconst mapStateToProps = state => ({\n  success: state.students.success // Adjust based on your Redux state structure\n});\n\n// Map dispatch to props\nconst mapDispatchToProps = dispatch => ({\n  addStudent: studentData => dispatch(addStudentThunk(studentData))\n});\n\n// Wrap the component with withRouter for navigation\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(NewStudentContainer));\nvar _c;\n$RefreshReg$(_c, \"NewStudentContainer\");","map":{"version":3,"names":["React","useState","connect","Redirect","withRouter","NewStudentView","addStudentThunk","Header","jsxDEV","_jsxDEV","NewStudentContainer","addStudent","success","history","_s","studentData","setStudentData","firstname","lastname","email","gpa","campusId","imageUrl","errors","handleChange","e","name","value","target","handleSubmit","preventDefault","push","error","response","data","console","general","to","fileName","_jsxFileName","lineNumber","columnNumber","children","_c","mapStateToProps","state","students","mapDispatchToProps","dispatch","$RefreshReg$"],"sources":["/Users/adelinadautovic/Full-Stack-CRUD-Application-Client/src/components/containers/NewStudentContainer.js"],"sourcesContent":["// /*==================================================\n// NewStudentContainer.js\n\n// The Container component is responsible for stateful logic and data fetching, and\n// passes data (if any) as props to the corresponding View component.\n// If needed, it also defines the component's \"connect\" function.\n// ================================================== */\n// import Header from './Header';\n// import { Component } from 'react';\n// import { connect } from 'react-redux';\n// import { Redirect } from 'react-router-dom';\n\n// import NewStudentView from '../views/NewStudentView';\n// import { addStudentThunk } from '../../store/thunks';\n\n// class NewStudentContainer extends Component {\n//   // Initialize state\n//   constructor(props){\n//     super(props);\n//     this.state = {\n//       firstname: \"\", \n//       lastname: \"\", \n//       campusId: null, \n//       redirect: false, \n//       redirectId: null\n//     };\n//   }\n\n//   // Capture input data when it is entered\n//   handleChange = event => {\n//     this.setState({\n//       [event.target.name]: event.target.value\n//     });\n//   }\n\n//   // Take action after user click the submit button\n//   handleSubmit = async event => {\n//     event.preventDefault();  // Prevent browser reload/refresh after submit.\n\n//     let student = {\n//         firstname: this.state.firstname,\n//         lastname: this.state.lastname,\n//         campusId: this.state.campusId\n//     };\n    \n//     // Add new student in back-end database\n//     let newStudent = await this.props.addStudent(student);\n\n//     // Update state, and trigger redirect to show the new student\n//     this.setState({\n//       firstname: \"\", \n//       lastname: \"\", \n//       campusId: null, \n//       redirect: true, \n//       redirectId: newStudent.id\n//     });\n//   }\n\n//   // Unmount when the component is being removed from the DOM:\n//   componentWillUnmount() {\n//       this.setState({redirect: false, redirectId: null});\n//   }\n\n//   // Render new student input form\n//   render() {\n//     // Redirect to new student's page after submit\n//     if(this.state.redirect) {\n//       return (<Redirect to={`/student/${this.state.redirectId}`}/>)\n//     }\n\n//     // Display the input form via the corresponding View component\n//     return (\n//       <div>\n//         <Header />\n//         <NewStudentView \n//           handleChange = {this.handleChange} \n//           handleSubmit={this.handleSubmit}      \n//         />\n//       </div>          \n//     );\n//   }\n// }\n\n// // The following input argument is passed to the \"connect\" function used by \"NewStudentContainer\" component to connect to Redux Store.\n// // The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// // The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\n// const mapDispatch = (dispatch) => {\n//     return({\n//         addStudent: (student) => dispatch(addStudentThunk(student)),\n//     })\n// }\n\n// // Export store-connected container by default\n// // NewStudentContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// // (and re-read the values when the Store State updates).\n// export default connect(null, mapDispatch)(NewStudentContainer);\n\nimport React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect, withRouter } from 'react-router-dom';\nimport NewStudentView from '../views/NewStudentView';\nimport { addStudentThunk } from '../../store/thunks';\nimport Header from './Header';\n\nconst NewStudentContainer = ({ addStudent, success, history }) => {\n  const [studentData, setStudentData] = useState({\n    firstname: '',\n    lastname: '',\n    email: '',\n    gpa: '',\n    campusId: '',\n    imageUrl: '',\n    errors: {},\n  });\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setStudentData({ ...studentData, [name]: value });\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    try {\n      // Clear previous errors\n      setStudentData({ ...studentData, errors: {} });\n\n      // Dispatch the thunk action to add the student\n      await addStudent(studentData);\n\n      // Reset form after successful submission\n      setStudentData({\n        firstname: '',\n        lastname: '',\n        email: '',\n        gpa: '',\n        campusId: '',\n        imageUrl: '',\n        errors: {},\n      });\n\n      // Redirect to the students list or the newly created student page\n      history.push('/students'); // Adjust the path as needed\n    } catch (error) {\n      // Handle errors from the API\n      if (error.response && error.response.data.errors) {\n        setStudentData({ ...studentData, errors: error.response.data.errors });\n      } else {\n        console.error('There was an error adding the student!', error);\n        setStudentData({ ...studentData, errors: { general: 'An error occurred. Please try again.' } });\n      }\n    }\n  };\n\n  // Redirect if the student was added successfully\n  if (success) {\n    return <Redirect to=\"/students\" />; // Adjust the path as needed\n  }\n\n  return (\n    <div>\n      <Header />\n      <NewStudentView\n        handleChange={handleChange}\n        handleSubmit={handleSubmit}\n        studentData={studentData}\n      />\n    </div>\n  );\n};\n\n// Map Redux state to props\nconst mapStateToProps = (state) => ({\n  success: state.students.success, // Adjust based on your Redux state structure\n});\n\n// Map dispatch to props\nconst mapDispatchToProps = (dispatch) => ({\n  addStudent: (studentData) => dispatch(addStudentThunk(studentData)),\n});\n\n// Wrap the component with withRouter for navigation\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(NewStudentContainer));\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}