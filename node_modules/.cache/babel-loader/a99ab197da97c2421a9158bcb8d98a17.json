{"ast":null,"code":"var _jsxFileName = \"/Users/adelinadautovic/Full-Stack-CRUD-Application-Client/src/components/containers/StudentContainer.js\",\n  _s = $RefreshSig$();\n/*==================================================\nStudentContainer.js\n\nThe Container component is responsible for stateful logic and data fetching, and\npasses data (if any) as props to the corresponding View component.\nIf needed, it also defines the component's \"connect\" function.\n================================================== */\n// import Header from './Header';\n// import React, { Component } from \"react\";\n// import { connect } from \"react-redux\";\n// import { fetchStudentThunk } from \"../../store/thunks\";\n// import { fetchCampusThunk } from \"../../store/thunks\";\n// import { StudentView } from \"../views\";\n// import { fetchCampus } from '../../store/actions/actionCreators';\n\n// class StudentContainer extends Component {\n//   // Get student data from back-end database\n//   componentDidMount() {\n//     //getting student ID from url\n//     this.props.fetchStudent(this.props.match.params.id);\n//   }\n\n//   // Render Student view by passing student data as props to the corresponding View component\n//   render() {\n//     return (\n//       <div>\n//         <Header />\n//         <StudentView student={this.props.student} />\n//       </div>\n//     );\n//   }\n// }\n\n// // The following 2 input arguments are passed to the \"connect\" function used by \"StudentContainer\" to connect to Redux Store.  \n// // The following 2 input arguments are passed to the \"connect\" function used by \"AllCampusesContainer\" component to connect to Redux Store.\n// const mapState = (state) => {\n//   return {\n//     student: state.student,  // Get the State object from Reducer \"student\"\n//     campus: state.campuses.find(campus => campus.id === state.student.campusId), // Get the campus data\n\n//   };\n// };\n// // 2. The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// // The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\n// const mapDispatch = (dispatch) => {\n//   return {\n//     fetchStudent: (id) => dispatch(fetchStudentThunk(id)),\n//     fetchCampus:(id)  => dispatch(fetchCampusThunk(id)),\n//   };\n// };\n\n// // Export store-connected container by default\n// // StudentContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// // (and re-read the values when the Store State updates).\n// export default connect(mapState, mapDispatch)(StudentContainer);\n\nimport React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { useParams, withRouter } from 'react-router-dom';\nimport StudentView from '../views/StudentView';\nimport { fetchStudentThunk, fetchCampusThunk, deleteStudentThunk } from \"../../store/thunks\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StudentContainer = ({\n  student,\n  campus,\n  fetchStudent,\n  fetchCampus,\n  deleteStudent,\n  history // From React Router v5\n}) => {\n  _s();\n  const {\n    id\n  } = useParams(); // Match the parameter name in the route\n\n  useEffect(() => {\n    if (id) {\n      // Ensure id is defined\n      fetchStudent(id);\n    }\n  }, [id, fetchStudent]);\n  useEffect(() => {\n    if (student !== null && student !== void 0 && student.campusId) {\n      // Use optional chaining to avoid undefined errors\n      fetchCampus(student.campusId);\n    }\n  }, [student, fetchCampus]);\n  const handleDeleteStudent = id => {\n    deleteStudent(id);\n    // Navigate to the students list after deletion\n    history.push('/students');\n  };\n  return /*#__PURE__*/_jsxDEV(StudentView, {\n    student: student,\n    campus: campus,\n    onDeleteStudent: handleDeleteStudent\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n};\n_s(StudentContainer, \"NrwAnu+Xu8IMxwuWRtdZQJzKwrE=\", false, function () {\n  return [useParams];\n});\n_c = StudentContainer;\nconst mapStateToProps = state => {\n  var _state$student, _state$campus;\n  return {\n    student: ((_state$student = state.student) === null || _state$student === void 0 ? void 0 : _state$student.selectedStudent) || null,\n    // Safeguard against undefined state\n    campus: ((_state$campus = state.campus) === null || _state$campus === void 0 ? void 0 : _state$campus.selectedCampus) || null // Safeguard against undefined state\n  };\n};\nconst mapDispatchToProps = dispatch => ({\n  fetchStudent: id => dispatch(fetchStudentThunk(id)),\n  // Dispatch thunk for fetching student\n  fetchCampus: id => dispatch(fetchCampusThunk(id)),\n  // Dispatch thunk for fetching campus\n  deleteStudent: id => dispatch(deleteStudentThunk(id)) // Dispatch thunk for deleting student\n});\n\n// Use withRouter for older React Router versions\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(StudentContainer));\nvar _c;\n$RefreshReg$(_c, \"StudentContainer\");","map":{"version":3,"names":["React","useEffect","connect","useParams","withRouter","StudentView","fetchStudentThunk","fetchCampusThunk","deleteStudentThunk","jsxDEV","_jsxDEV","StudentContainer","student","campus","fetchStudent","fetchCampus","deleteStudent","history","_s","id","campusId","handleDeleteStudent","push","onDeleteStudent","fileName","_jsxFileName","lineNumber","columnNumber","_c","mapStateToProps","state","_state$student","_state$campus","selectedStudent","selectedCampus","mapDispatchToProps","dispatch","$RefreshReg$"],"sources":["/Users/adelinadautovic/Full-Stack-CRUD-Application-Client/src/components/containers/StudentContainer.js"],"sourcesContent":["/*==================================================\nStudentContainer.js\n\nThe Container component is responsible for stateful logic and data fetching, and\npasses data (if any) as props to the corresponding View component.\nIf needed, it also defines the component's \"connect\" function.\n================================================== */\n// import Header from './Header';\n// import React, { Component } from \"react\";\n// import { connect } from \"react-redux\";\n// import { fetchStudentThunk } from \"../../store/thunks\";\n// import { fetchCampusThunk } from \"../../store/thunks\";\n// import { StudentView } from \"../views\";\n// import { fetchCampus } from '../../store/actions/actionCreators';\n\n// class StudentContainer extends Component {\n//   // Get student data from back-end database\n//   componentDidMount() {\n//     //getting student ID from url\n//     this.props.fetchStudent(this.props.match.params.id);\n//   }\n\n//   // Render Student view by passing student data as props to the corresponding View component\n//   render() {\n//     return (\n//       <div>\n//         <Header />\n//         <StudentView student={this.props.student} />\n//       </div>\n//     );\n//   }\n// }\n\n// // The following 2 input arguments are passed to the \"connect\" function used by \"StudentContainer\" to connect to Redux Store.  \n// // The following 2 input arguments are passed to the \"connect\" function used by \"AllCampusesContainer\" component to connect to Redux Store.\n// const mapState = (state) => {\n//   return {\n//     student: state.student,  // Get the State object from Reducer \"student\"\n//     campus: state.campuses.find(campus => campus.id === state.student.campusId), // Get the campus data\n\n//   };\n// };\n// // 2. The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// // The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\n// const mapDispatch = (dispatch) => {\n//   return {\n//     fetchStudent: (id) => dispatch(fetchStudentThunk(id)),\n//     fetchCampus:(id)  => dispatch(fetchCampusThunk(id)),\n//   };\n// };\n\n// // Export store-connected container by default\n// // StudentContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// // (and re-read the values when the Store State updates).\n// export default connect(mapState, mapDispatch)(StudentContainer);\n\nimport React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { useParams, withRouter } from 'react-router-dom';\nimport StudentView from '../views/StudentView';\nimport { \n  fetchStudentThunk, \n  fetchCampusThunk,\n  deleteStudentThunk \n} from \"../../store/thunks\";\n\nconst StudentContainer = ({\n  student, \n  campus, \n  fetchStudent, \n  fetchCampus,\n  deleteStudent,\n  history // From React Router v5\n}) => {\n  const { id } = useParams(); // Match the parameter name in the route\n\n  useEffect(() => {\n    if (id) { // Ensure id is defined\n      fetchStudent(id);\n    }\n  }, [id, fetchStudent]);\n\n  useEffect(() => {\n    if (student?.campusId) { // Use optional chaining to avoid undefined errors\n      fetchCampus(student.campusId);\n    }\n  }, [student, fetchCampus]);\n\n  const handleDeleteStudent = (id) => {\n    deleteStudent(id);\n    // Navigate to the students list after deletion\n    history.push('/students');\n  };\n\n  return (\n    <StudentView \n      student={student} \n      campus={campus}\n      onDeleteStudent={handleDeleteStudent}\n    />\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  student: state.student?.selectedStudent || null, // Safeguard against undefined state\n  campus: state.campus?.selectedCampus || null // Safeguard against undefined state\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  fetchStudent: (id) => dispatch(fetchStudentThunk(id)), // Dispatch thunk for fetching student\n  fetchCampus: (id) => dispatch(fetchCampusThunk(id)), // Dispatch thunk for fetching campus\n  deleteStudent: (id) => dispatch(deleteStudentThunk(id)) // Dispatch thunk for deleting student\n});\n\n// Use withRouter for older React Router versions\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(StudentContainer));\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}