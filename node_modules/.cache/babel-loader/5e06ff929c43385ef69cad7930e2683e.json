{"ast":null,"code":"/*==================================================\n/src/store/thunks.js\n\nIt contains all Thunk Creators and Thunks.\n================================================== */\nimport * as ac from './actions/actionCreators'; // Import Action Creators (\"ac\" keyword Action Creator)\nconst axios = require('axios');\n\n//All Campuses\n// THUNK CREATOR:\nexport const fetchAllCampusesThunk = () => async dispatch => {\n  // The THUNK\n  try {\n    // API \"get\" call to get \"campuses\" data from database\n    let res = await axios.get(`/api/campuses`);\n    // Call Action Creator to return Action object (type + payload with \"campuses\" data)\n    // Then dispatch the Action object to Reducer to update state \n    dispatch(ac.fetchAllCampuses(res.data));\n  } catch (err) {\n    console.error(err);\n  }\n};\n\n// Single Campus\n// THUNK CREATOR:\nexport const fetchCampusThunk = id => async dispatch => {\n  // The THUNK\n  try {\n    // API \"get\" call to get a student data (based on \"id\")from database\n    let res = await axios.get(`/api/campuses/${id}`);\n    dispatch(ac.fetchCampus(res.data));\n  } catch (err) {\n    console.error(err);\n  }\n};\n\n// All Students\n// THUNK CREATOR:\n// export const fetchAllStudentsThunk = () => async (dispatch) => {  // The THUNK\n//   try {\n//     // API \"get\" call to get \"students\" data from database\n//     let res = await axios.get(`/api/students`);  \n//     // Call Action Creator to return Action object (type + payload with \"students\" data)\n//     // Then dispatch the Action object to Reducer to update state \n//     dispatch(ac.fetchAllStudents(res.data));  \n//   } catch(err) {\n//     console.error(err);\n//   }\n// };\n// export const fetchAllStudentsThunk = () => async (dispatch) => {  // The THUNK\n//   try {\n//     // API \"get\" call to get \"students\" data from database\n//     let res = await axios.get(`/api/students`);  \n//     // Call Action Creator to return Action object (type + payload with \"students\" data)\n//     // Then dispatch the Action object to Reducer to update state \n//     dispatch(ac.fetchAllStudents(res.data));  \n//   } catch(err) {\n//     console.error(err);\n//   }\n// };\nexport const fetchAllStudentsThunk = () => {\n  return dispatch => {\n    axios.get('/api/students').then(response => {\n      dispatch({\n        type: 'FETCH_ALL_STUDENTS',\n        students: response.data\n      });\n    }).catch(error => {\n      console.error(error);\n    });\n  };\n  14;\n};\n\n// Add Student\n// THUNK CREATOR:\nexport const addStudentThunk = student => async dispatch => {\n  try {\n    // Ensure imageUrl has a fallback\n    student.imageUrl = student.imageUrl || \"default-student-image-url.jpg\"; // Provide a default image URL\n\n    console.log(\"Student payload:\", student); // Debugging log\n\n    // API call to add student\n    let res = await axios.post(`/api/students`, student);\n    console.log(\"Response from backend:\", res.data); // Debugging log\n\n    // Dispatch action to update state with new student\n    dispatch(ac.addStudent(res.data));\n    return res.data; // Return the added student data if needed\n  } catch (err) {\n    console.error(\"Error adding student:\", err);\n    alert(\"Failed to add student. Please try again.\");\n  }\n};\n\n// Delete Student\n// THUNK CREATOR:\nexport const deleteStudentThunk = studentId => async dispatch => {\n  // The THUNK\n  try {\n    // API \"delete\" call to delete student (based on \"studentID\") from database\n    await axios.delete(`/api/students/${studentId}`);\n    // Delete successful so change state with dispatch\n    dispatch(ac.deleteStudent(studentId));\n  } catch (err) {\n    console.error(err);\n  }\n};\n\n// Edit Student\n// THUNK CREATOR:\nexport const editStudentThunk = student => async dispatch => {\n  // The THUNK\n  try {\n    // API \"put\" call to update student (based on \"id\" and \"student\" object's data) from database\n    let updatedStudent = await axios.put(`/api/students/${student.id}`, student);\n    // Update successful so change state with dispatch\n    dispatch(ac.editStudent(updatedStudent));\n  } catch (err) {\n    console.error(err);\n  }\n};\n\n// Single Student\n// THUNK CREATOR:\nexport const fetchStudentThunk = id => async dispatch => {\n  // The THUNK\n  try {\n    // API \"get\" call to get a specific student (based on \"id\") data from database\n    let res = await axios.get(`/api/students/${id}`);\n    // Call Action Creator to return Action object (type + payload with student data)\n    // Then dispatch the Action object to Reducer to display student data \n    dispatch(ac.fetchStudent(res.data));\n  } catch (err) {\n    console.error(err);\n  }\n};\n\n// Add Campus\n// THUNK CREATOR:\nexport const addCampusThunk = campus => async dispatch => {\n  try {\n    // Ensure imageUrl has a fallback\n    campus.imageUrl = campus.imageUrl || \"default-image-url.jpg\";\n    console.log(\"Campus payload:\", campus); // Debugging log\n\n    // API call to add campus\n    let res = await axios.post(`/api/campuses`, campus);\n    console.log(\"Response from backend:\", res.data); // Debugging log\n\n    // Dispatch action to update state with new campus\n    dispatch(ac.addCampus(res.data));\n    return res.data;\n  } catch (err) {\n    console.error(\"Error adding campus:\", err);\n    alert(\"Failed to add campus. Please try again.\");\n  }\n};\n\n// Delete Campus\n// THUNK CREATOR:\nexport const deleteCampusThunk = campusId => async dispatch => {\n  try {\n    // Send DELETE request to the backend\n    await axios.delete(`/api/campuses/${campusId}`);\n\n    // Dispatch action to update the Redux store\n    dispatch(ac.deleteCampus(campusId));\n  } catch (err) {\n    console.error(\"Error deleting campus:\", err);\n  }\n};","map":{"version":3,"names":["ac","axios","require","fetchAllCampusesThunk","dispatch","res","get","fetchAllCampuses","data","err","console","error","fetchCampusThunk","id","fetchCampus","fetchAllStudentsThunk","then","response","type","students","catch","addStudentThunk","student","imageUrl","log","post","addStudent","alert","deleteStudentThunk","studentId","delete","deleteStudent","editStudentThunk","updatedStudent","put","editStudent","fetchStudentThunk","fetchStudent","addCampusThunk","campus","addCampus","deleteCampusThunk","campusId","deleteCampus"],"sources":["/Users/adelinadautovic/Full-Stack-CRUD-Application-Client/src/store/thunks.js"],"sourcesContent":["/*==================================================\n/src/store/thunks.js\n\nIt contains all Thunk Creators and Thunks.\n================================================== */\nimport * as ac from './actions/actionCreators';  // Import Action Creators (\"ac\" keyword Action Creator)\nconst axios = require('axios');\n\n//All Campuses\n// THUNK CREATOR:\nexport const fetchAllCampusesThunk = () => async (dispatch) => {  // The THUNK\n  try {\n    // API \"get\" call to get \"campuses\" data from database\n    let res = await axios.get(`/api/campuses`);  \n    // Call Action Creator to return Action object (type + payload with \"campuses\" data)\n    // Then dispatch the Action object to Reducer to update state \n    dispatch(ac.fetchAllCampuses(res.data));\n  } catch(err) {\n    console.error(err);\n  }\n};\n\n// Single Campus\n// THUNK CREATOR:\nexport const fetchCampusThunk = (id) => async (dispatch) => {  // The THUNK\n  try {\n    // API \"get\" call to get a student data (based on \"id\")from database\n    let res = await axios.get(`/api/campuses/${id}`);  \n    dispatch(ac.fetchCampus(res.data));\n  } catch(err) {\n    console.error(err);\n  }\n};\n\n// All Students\n// THUNK CREATOR:\n// export const fetchAllStudentsThunk = () => async (dispatch) => {  // The THUNK\n//   try {\n//     // API \"get\" call to get \"students\" data from database\n//     let res = await axios.get(`/api/students`);  \n//     // Call Action Creator to return Action object (type + payload with \"students\" data)\n//     // Then dispatch the Action object to Reducer to update state \n//     dispatch(ac.fetchAllStudents(res.data));  \n//   } catch(err) {\n//     console.error(err);\n//   }\n// };\n// export const fetchAllStudentsThunk = () => async (dispatch) => {  // The THUNK\n//   try {\n//     // API \"get\" call to get \"students\" data from database\n//     let res = await axios.get(`/api/students`);  \n//     // Call Action Creator to return Action object (type + payload with \"students\" data)\n//     // Then dispatch the Action object to Reducer to update state \n//     dispatch(ac.fetchAllStudents(res.data));  \n//   } catch(err) {\n//     console.error(err);\n//   }\n// };\nexport const fetchAllStudentsThunk = () => {\n   return (dispatch) => {\n      axios.get('/api/students')\n        .then(response => {\n         dispatch({ type: 'FETCH_ALL_STUDENTS', students: response.data });\n        })\n        .catch(error => {\n        console.error(error);\n        });\n    };\n  14};\n\n// Add Student\n// THUNK CREATOR:\nexport const addStudentThunk = (student) => async (dispatch) => {\n  try {\n    // Ensure imageUrl has a fallback\n    student.imageUrl = student.imageUrl || \"default-student-image-url.jpg\"; // Provide a default image URL\n\n    console.log(\"Student payload:\", student); // Debugging log\n\n    // API call to add student\n    let res = await axios.post(`/api/students`, student);\n\n    console.log(\"Response from backend:\", res.data); // Debugging log\n\n    // Dispatch action to update state with new student\n    dispatch(ac.addStudent(res.data));\n\n    return res.data; // Return the added student data if needed\n  } catch (err) {\n    console.error(\"Error adding student:\", err);\n    alert(\"Failed to add student. Please try again.\");\n  }\n};\n\n// Delete Student\n// THUNK CREATOR:\nexport const deleteStudentThunk = studentId => async dispatch => {  // The THUNK\n  try {\n    // API \"delete\" call to delete student (based on \"studentID\") from database\n    await axios.delete(`/api/students/${studentId}`);  \n    // Delete successful so change state with dispatch\n    dispatch(ac.deleteStudent(studentId));\n  } catch(err) {\n    console.error(err);\n  }\n};\n\n// Edit Student\n// THUNK CREATOR:\nexport const editStudentThunk = student => async dispatch => {  // The THUNK\n  try {\n    // API \"put\" call to update student (based on \"id\" and \"student\" object's data) from database\n    let updatedStudent = await axios.put(`/api/students/${student.id}`, student); \n    // Update successful so change state with dispatch\n    dispatch(ac.editStudent(updatedStudent));\n  } catch(err) {\n    console.error(err);\n  }\n};\n\n// Single Student\n// THUNK CREATOR:\nexport const fetchStudentThunk = id => async dispatch => {  // The THUNK\n  try {\n    // API \"get\" call to get a specific student (based on \"id\") data from database\n    let res = await axios.get(`/api/students/${id}`);  \n    // Call Action Creator to return Action object (type + payload with student data)\n    // Then dispatch the Action object to Reducer to display student data \n    dispatch(ac.fetchStudent(res.data));\n  } catch(err) {\n    console.error(err);\n  }\n};\n\n// Add Campus\n// THUNK CREATOR:\nexport const addCampusThunk = (campus) => async (dispatch) => {\n  try {\n    // Ensure imageUrl has a fallback\n    campus.imageUrl = campus.imageUrl || \"default-image-url.jpg\";\n\n    console.log(\"Campus payload:\", campus); // Debugging log\n\n    // API call to add campus\n    let res = await axios.post(`/api/campuses`, campus);\n\n    console.log(\"Response from backend:\", res.data); // Debugging log\n\n    // Dispatch action to update state with new campus\n    dispatch(ac.addCampus(res.data));\n\n    return res.data;\n  } catch (err) {\n    console.error(\"Error adding campus:\", err);\n    alert(\"Failed to add campus. Please try again.\");\n  }\n};\n\n// Delete Campus\n// THUNK CREATOR:\nexport const deleteCampusThunk = (campusId) => async (dispatch) => {\n  try {\n    // Send DELETE request to the backend\n    await axios.delete(`/api/campuses/${campusId}`);\n\n    // Dispatch action to update the Redux store\n    dispatch(ac.deleteCampus(campusId));\n  } catch (err) {\n    console.error(\"Error deleting campus:\", err);\n  }\n};\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}