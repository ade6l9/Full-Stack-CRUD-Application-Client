{"ast":null,"code":"var _jsxFileName = \"/Users/adelinadautovic/Full-Stack-CRUD-Application-Client/src/components/containers/CampusContainer.js\";\n/*==================================================\nCampusContainer.js\n\nThe Container component is responsible for stateful logic and data fetching, and\npasses data (if any) as props to the corresponding View component.\nIf needed, it also defines the component's \"connect\" function.\n================================================== */\nimport Header from './Header';\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { fetchCampusThunk } from \"../../store/thunks\";\nimport { CampusView } from \"../views\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass CampusContainer extends Component {\n  // Get the specific campus data from back-end database\n  componentDidMount() {\n    // Get campus ID from URL (API link)\n    this.props.fetchCampus(this.props.match.params.id);\n  }\n\n  // Render a Campus view by passing campus data as props to the corresponding View component\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CampusView, {\n        campus: this.props.campus\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this);\n  }\n}\nconst handleRemoveStudent = studentId => {\n  axios.put(`/api/students/${studentId}/remove-campus`).then(response => {\n    console.log(response.data);\n    // Update the list of students after removing the association\n    setStudents(prevStudents => prevStudents.filter(student => student.id !== studentId));\n  }).catch(error => {\n    console.error('Error removing student from campus:', error);\n  });\n};\n\n// The following 2 input arguments are passed to the \"connect\" function used by \"CampusContainer\" component to connect to Redux Store.\n// 1. The \"mapState\" argument specifies the data from Redux Store that the component needs.\n// The \"mapState\" is called when the Store State changes, and it returns a data object of \"campus\".\nconst mapState = state => {\n  return {\n    campus: state.campus // Get the State object from Reducer \"campus\"\n  };\n};\n// 2. The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\nconst mapDispatch = dispatch => {\n  return {\n    fetchCampus: id => dispatch(fetchCampusThunk(id))\n  };\n};\n\n// Export store-connected container by default\n// CampusContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// (and re-read the values when the Store State updates).\nexport default connect(mapState, mapDispatch)(CampusContainer);","map":{"version":3,"names":["Header","React","Component","connect","fetchCampusThunk","CampusView","jsxDEV","_jsxDEV","CampusContainer","componentDidMount","props","fetchCampus","match","params","id","render","children","fileName","_jsxFileName","lineNumber","columnNumber","campus","handleRemoveStudent","studentId","axios","put","then","response","console","log","data","setStudents","prevStudents","filter","student","catch","error","mapState","state","mapDispatch","dispatch"],"sources":["/Users/adelinadautovic/Full-Stack-CRUD-Application-Client/src/components/containers/CampusContainer.js"],"sourcesContent":["/*==================================================\nCampusContainer.js\n\nThe Container component is responsible for stateful logic and data fetching, and\npasses data (if any) as props to the corresponding View component.\nIf needed, it also defines the component's \"connect\" function.\n================================================== */\nimport Header from './Header';\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { fetchCampusThunk } from \"../../store/thunks\";\n\nimport { CampusView } from \"../views\";\n\nclass CampusContainer extends Component {\n  // Get the specific campus data from back-end database\n  componentDidMount() {\n    // Get campus ID from URL (API link)\n    this.props.fetchCampus(this.props.match.params.id);\n  }\n\n  // Render a Campus view by passing campus data as props to the corresponding View component\n  render() {\n    return (\n      <div>\n        <Header />\n        <CampusView campus={this.props.campus} />\n      </div>\n    );\n  }\n}\nconst handleRemoveStudent = (studentId) => {\n  axios\n    .put(`/api/students/${studentId}/remove-campus`)\n    .then((response) => {\n      console.log(response.data);\n      // Update the list of students after removing the association\n      setStudents((prevStudents) =>\n        prevStudents.filter((student) => student.id !== studentId)\n      );\n    })\n    .catch((error) => {\n      console.error('Error removing student from campus:', error);\n    });\n};\n\n// The following 2 input arguments are passed to the \"connect\" function used by \"CampusContainer\" component to connect to Redux Store.\n// 1. The \"mapState\" argument specifies the data from Redux Store that the component needs.\n// The \"mapState\" is called when the Store State changes, and it returns a data object of \"campus\".\nconst mapState = (state) => {\n  return {\n    campus: state.campus,  // Get the State object from Reducer \"campus\"\n  };\n};\n// 2. The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\nconst mapDispatch = (dispatch) => {\n  return {\n    fetchCampus: (id) => dispatch(fetchCampusThunk(id)),\n  };\n};\n\n// Export store-connected container by default\n// CampusContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// (and re-read the values when the Store State updates).\nexport default connect(mapState, mapDispatch)(CampusContainer);"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,MAAM,MAAM,UAAU;AAC7B,OAAOC,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAASC,OAAO,QAAQ,aAAa;AACrC,SAASC,gBAAgB,QAAQ,oBAAoB;AAErD,SAASC,UAAU,QAAQ,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtC,MAAMC,eAAe,SAASN,SAAS,CAAC;EACtC;EACAO,iBAAiBA,CAAA,EAAG;IAClB;IACA,IAAI,CAACC,KAAK,CAACC,WAAW,CAAC,IAAI,CAACD,KAAK,CAACE,KAAK,CAACC,MAAM,CAACC,EAAE,CAAC;EACpD;;EAEA;EACAC,MAAMA,CAAA,EAAG;IACP,oBACER,OAAA;MAAAS,QAAA,gBACET,OAAA,CAACP,MAAM;QAAAiB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACVb,OAAA,CAACF,UAAU;QAACgB,MAAM,EAAE,IAAI,CAACX,KAAK,CAACW;MAAO;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtC,CAAC;EAEV;AACF;AACA,MAAME,mBAAmB,GAAIC,SAAS,IAAK;EACzCC,KAAK,CACFC,GAAG,CAAC,iBAAiBF,SAAS,gBAAgB,CAAC,CAC/CG,IAAI,CAAEC,QAAQ,IAAK;IAClBC,OAAO,CAACC,GAAG,CAACF,QAAQ,CAACG,IAAI,CAAC;IAC1B;IACAC,WAAW,CAAEC,YAAY,IACvBA,YAAY,CAACC,MAAM,CAAEC,OAAO,IAAKA,OAAO,CAACpB,EAAE,KAAKS,SAAS,CAC3D,CAAC;EACH,CAAC,CAAC,CACDY,KAAK,CAAEC,KAAK,IAAK;IAChBR,OAAO,CAACQ,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;EAC7D,CAAC,CAAC;AACN,CAAC;;AAED;AACA;AACA;AACA,MAAMC,QAAQ,GAAIC,KAAK,IAAK;EAC1B,OAAO;IACLjB,MAAM,EAAEiB,KAAK,CAACjB,MAAM,CAAG;EACzB,CAAC;AACH,CAAC;AACD;AACA;AACA,MAAMkB,WAAW,GAAIC,QAAQ,IAAK;EAChC,OAAO;IACL7B,WAAW,EAAGG,EAAE,IAAK0B,QAAQ,CAACpC,gBAAgB,CAACU,EAAE,CAAC;EACpD,CAAC;AACH,CAAC;;AAED;AACA;AACA;AACA,eAAeX,OAAO,CAACkC,QAAQ,EAAEE,WAAW,CAAC,CAAC/B,eAAe,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}